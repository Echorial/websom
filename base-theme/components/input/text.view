info {
	"name": "input-text",
	"type": "component"
}

template {
	<div class="input-text form-field" :style="'--line-count: ' + lines" :class="{'input-text-invalid input-invalid': error, ['text-' + type]: true, focus: focus, placeholder: myValue.length == 0, icon, 'icon-left': side != 'right', 'icon-right': side == 'right', 'input-error': error, 'input-success': success}">
		<div class="input-text-wrap">
			<div class="input-text-before"></div>
			<icon v-if="icon && side != 'right'" :icon="icon" class="input-text-icon start" />
			<input :readonly="readonly" v-if="type != 'area'" type="text" class="input-text-input" @input="input" v-model="myValue" :type="type" ref="input"></input>
			<textarea v-else :readonly="readonly" class="input-text-input" @input="input" v-model="myValue" ref="input"></textarea>
			<icon v-if="icon && side == 'right'" :icon="icon" class="input-text-icon end" />
			<label class="input-text-placeholder">{{placeholder}}</label>
			<div class="input-text-after">
				<icon class="input-text-search-icon" :icon="searchIcon" v-if="type == 'search'" />
			</div>
		</div>

		<popover v-if="error && errorMessage" :activated="displayingInvalidPopover" :activate-on-hover="!displayingInvalidPopover" edge="left">
			{{errorMessage}}
		</popover>
		<popover v-else-if="error && displayingInvalidPopover" :activated="true" :activate-on-hover="false" edge="left">
			Invalid
		</popover>
	</div>
}

script {
	export default {
		props: {
			value: {
				type: [Number, String],
				default: "",
				description: "Use this to set the value of the input."
			},
			placeholder: {
				type: String,
				default: "Input your text",
				description: "The placeholder text."
			},
			icon: {
				type: String,
				default: "",
				description: "The icon to use when rendering. Leave blank for no icon."
			},
			side: {
				type: String,
				default: "left",
				description: `The alignment of the icon. Accepted values: "left" or "right"`
			},
			type: {
				type: String,
				default: "text",
				description: `The type of text input. Accepted values: "text", "area", "password", "email", "number", "search"`
			},
			validate: {
				type: [String, Function],
				default: "",
				description: `The function or validator name to use when detecting if a value is malformed. See the validator example for more information.`
			},
			required: {
				type: Boolean,
				default: false,
				description: "A validator shorthand for requiring at least 1 character of content."
			},
			searchIcon: {
				type: String,
				default: "search"
			},
			readonly: {
				type: Boolean,
				default: false
			}
		},
		data() {
			return {
				focus: false,
				myValue: this.value || "",
				success: false,
				error: false,
				errorMessage: "",
				displayingInvalidPopover: false
			};
		},
		methods: {
			giveFocus() {
				this.$refs.input.focus();
			},
			async checkValidation() {
				if (this.required)
					if (this.myValue.length == 0) {
						this.success = false;
						this.error = true;
						this.errorMessage = "This cannot be empty.";
						return false;
					}

				if (typeof this.validate == "function") {
					let res = await this.validate(this.myValue);
					
					if (res === false || typeof res == "string") {
						this.error = true;
						this.success = false;

						if (typeof res == "string")
							this.errorMessage = res;
						
						return false;
					}else{
						this.error = false;
						this.success = true;

						return true;
					}
				}

				if (this.validate.length > 0) {
					let splits = this.validate.split(".");
					let endpoint = this.$store.state.websom.data.endpoints[splits[0]];
					let field = splits[1];

					if (endpoint && endpoint.writes[field]) {
						field = endpoint.writes[field];

						for (let r of field.restrictions) {
							let res = await this.$store.state.websom.validators[r.type](r, this.myValue);

							if (res === false || typeof res == "string") {
								this.error = true;
								this.success = false;

								if (typeof res == "string")
									this.errorMessage = res;

								return false;
							}
								
						}
					}

					this.success = true;
					this.error = false;

					return true;
				}
				
				return true;
			},
			input() {
				this.displayingInvalidPopover = false;

				this.checkValidation();

				if (this.type == "number")
					this.$emit("input", parseFloat(this.myValue));
				else
					this.$emit("input", this.myValue);
			},
			showErrorMessage() {
				this.displayingInvalidPopover = true;
			}
		},
		watch: {
			value() {
				this.displayingInvalidPopover = false;

				this.myValue = this.value;
			}
		},
		computed: {
			lines() {
				if (typeof this.myValue == "string")
					return this.myValue.split("\n").length;
				
				return 0;
			}
		}
	}
}

style {
	.input-text {
		display: flex;

		height: var(--base-height);
		width: 100%;

		position: relative;

		&.text-search {
			.input-text-after {
				display: flex;
				align-items: center;
				height: 100%;
			}

			.input-text-search-icon {
				--icon-size: 20px;
				margin-left: auto;
			}
		}

		&.placeholder {
			.input-text-placeholder {
				opacity: 1;
			}
		}

		&.input-error {
			&.icon .input-text-icon {
				background: var(--danger);
				color: var(--danger-contrast);
			}

			.input-text-wrap {
				input {
					color: var(--danger);
				}
			}
		}

		&.input-success {
			&.icon .input-text-icon {
				background: var(--success);
				color: var(--success-contrast);
			}

			.input-text-wrap {
				input {
					color: var(--success);
				}
			}
		}

		&.icon .input-text-icon {
			position: absolute;
			width: calc(var(--base-size) * 3);
			height: var(--base-height);
			background: var(--mute-light);
			top: 0px;

			padding: 0px;
		}

		&.icon.icon-left .input-text-icon {
			left: 0px;
		}

		&.icon.icon-right .input-text-icon {
			right: 0px;
			left: unset;
			pointer-events: none;
		}

		&.icon.icon-left .input-text-placeholder {
			left: calc(var(--base-size) * 4);
		}

		.input-text-placeholder {
			transition: var(--transition) var(--transition-easing);
			opacity: 0;

			position: absolute;
			top: 0px;
			left: var(--base-size);
			line-height: var(--base-height);

			white-space: nowrap;

			color: var(--mute-contrast-blend);

			pointer-events: none;
			
			font-size: 16px;
		}

		&.icon.icon-left {
			.input-text-wrap {
				.input-text-input {
					padding-left: calc(var(--base-size) * 4);
				}
			}
		}

		&.icon.icon-right {
			.input-text-wrap {
				.input-text-input {
					padding-right: calc(var(--base-size) * 3);
				}
			}
		}

		&.text-area {
			min-height: calc(var(--base-height) * 3);
			height: calc(var(--line-count) * var(--base-height));
			transition: height var(--transition) var(--transition-easing);

			.input-text-input {
				min-height: 100%;
				max-height: 100%;

				min-width: 100%;
				max-width: 100%;

				overflow: hidden;
			}
		}

		.input-text-wrap {
			width: 100%;
			height: 100%;
			top: 0;
			left: 0;
			position: absolute;

			.input-text-input {
				box-sizing: border-box;

				width: 100%;
				height: 100%;

				position: absolute;
				left: 0px;
				top: 0px;

				border: none;
				background: var(--mute);
				color: var(--mute-contrast);
				outline: none;

				height: var(--base-height);
				padding: var(--padding-small-v) var(--base-size);

				line-height: var(--base-height);

				&:focus {
					background: var(--mute-light);
					color: var(--mute-contrast);
				}
			}
		}
	}
}