info {
	"name": "input-file",
	"type": "component"
}

template {
	<div class="input-file" :class="{'input-file-has-files': files.length > 0, 'input-file-hovering': hovering}">
		<input type="file" ref="file" @dragenter="enter" @dragleave="leave" :accept="accept.length > 0 ? accept.join(',') : undefined" :multiple="multiple" @change="change" />
		<div class="input-file-upload-row">
			<icon class="input-file-icon large" icon="upload" />
			<h3 class="input-file-message">
				Drag or click here to upload files.
				<div class="input-file-info-row">
					<span class="input-file-names">{{fileNames}}</span>
					<span class="input-file-size">{{fileSizeDisplay}}</span>
				</div>
			</h3>
		</div>
	</div>
}

script {
	export default {
		props: {
			multiple: {
				type: Boolean,
				default: false
			},
			displayFileSize: {
				type: Boolean,
				default: true
			},
			accept: {
				type: Array,
				default: () => []
			}
		},
		data() {
			return {
				fileSize: 0,
				files: [],
				hovering: false
			};
		},
		methods: {
			change(e) {
				this.hovering = false;

				this.files = this.$refs.file.files;
				this.fileSize = 0;
				for (let file of this.files)
					this.fileSize += file.size;
			},
			enter() {
				this.hovering = true;
			},
			leave() {
				this.hovering = false;
			}
		},
		computed: {
			fileSizeDisplay() {
				const fs = this.fileSize;

				if (fs < 1024) {
					return `${fs} B`;
				}else if (fs < 1024 * 1024) {
					return `${Math.round(fs / 1024)} KB`;
				}else if (fs < 1024 * 1024 * 1024) {
					return `${Math.round(fs / (1024 * 1024))} MB`;
				}else if (fs < 1024 * 1024 * 1024 * 1024) {
					return `${Math.round(fs / (1024 * 1024 * 1024))} GB`;
				}else{
					return "Too big!";
				}
			},
			fileNames() {
				if (this.files.length > 2) {
					return `(${this.files.length}) files`;
				}

				let names = [];
				for (let file of this.files)
					names.push(file.name);

				return names.join(", ");
			}
		}
	}
}

style {
	.input-file {
		position: relative;
		display: flex;
		flex-direction: column;
		justify-content: center;

		min-height: calc(var(--base-size) * 24);

		background: var(--background-overlay);

		transition: var(--transition-color) var(--transition-easing);

		cursor: var(--cursor-action);

		&.input-file-hovering, &:hover {
			.input-file-icon {
				color: var(--color);
			}
		}

		&:not(.input-file-has-files) {
			&.input-file-hovering, &:hover {
				background: var(--background-tint);

				.input-file-icon {
					transform: scale(2) translateY(20px);
				}

				.input-file-upload-row .input-file-message {
					opacity: 0;
				}
			}
		}

		input {
			position: absolute;
			opacity: 0;
			left: 0;
			top: 0;
			width: 100%;
			height: 100%;

			cursor: var(--cursor-action);

			z-index: 1;
		}

		.input-file-icon {
			height: 100%;
			transition: var(--transition-movement) var(--transition-easing-movement);
			color: var(--mute);
		}

		.input-file-upload-row {
			display: flex;
			flex-direction: column;
			align-items: center;

			transition: var(--transition-movement) var(--transition-easing-movement);

			.input-file-message {
				transition: var(--transition-movement) var(--transition-easing-movement);
				overflow: hidden;
			}

			h3 {
				color: var(--mute);
			}
		}

		.input-file-info-row {
			display: flex;
			transition: var(--transition-color) var(--transition-easing);

			width: 100%;

			margin-top: var(--base-size);
		}

		&:not(.input-file-has-files) {
			.input-file-info-row {
				opacity: 0;
			}
		}

		.input-file-size {
			flex: 2;
			text-align: right;
		}

		.input-file-names {
			flex: 5;
			max-width: 100%;
			overflow: hidden;
			text-overflow: ellipsis;

			text-align: left;

			color: var(--color);
		}
	}
}