info {
	"name": "rich-view",
	"type": "component"
}

template {
	<div class="rich-view">
		<modal ref="deletionDialog" size="prompt" :dialog="true" dialog-title="Are you sure?" :dialog-body="`You are about to delete ${websom.plural(selectedCount, 'item')}.`" @confirm="deleteItems()"></modal>

		<div class="rich-view-header">
			<input-select placeholder="Filter Type" value="all" :options="['all', 'image', 'video', 'audio', 'document', 'other']" />

			<inline-bar class="rich-view-mode" v-model="myLayout" :icons="['table', 'grid']" />

			<button class="rich-bulk-button" :class="{'disabled': selectedCount == 0}"><icon icon="edit" left />
				Bulk

				<dropdown>
					<button key="delete" @click="confirmDeletion" class="danger"><icon icon="delete" left /> Delete {{selectedCount}}</button>
				</dropdown>
			</button>
		</div>

		<div v-if="myLayout == 'table'" class="rich-table-columns" ref="head">
			<th class="center-content table-bulk-checkbox table-bulk-checkbox-all" v-if="bulk">
				<input-checkbox :value="allSelected" @input="checkAll($event)" text="" />
			</th>
			<th v-for="column in displayColumns" class="rich-table-column" :class="{'fat-action': sortable}" @click="sort(column)">
				<icon v-if="sortable && sortColumn == column" :icon="sortDirection == 'asc' ? 'up' : 'down'" />
				{{column}}
			</th>
		</div>
		<div class="rich-view-table-wrap" v-if="myLayout == 'table'" @scroll="scrollListener" ref="tableWrap">
			<table class="rich-view-table">
				<thead v-if="myLayout == 'table'" class="rich-table-hidden-columns">
					<th class="center-content table-bulk-checkbox table-bulk-checkbox-all" v-if="bulk">
						<input-checkbox :value="allSelected" @input="checkAll($event)" text="" />
					</th>
					<th v-for="column in displayColumns" class="rich-table-column" :class="{'fat-action': sortable}">
						<icon v-if="sortable && sortColumn == column" :icon="sortDirection == 'asc' ? 'up' : 'down'" />
						{{column}}
					</th>
				</thead>
				<transition-group v-if="!error" tag="tbody" class="rich-view-collection" :class="'rich-view-layout-' + myLayout" :name="transition" :mode="transitionMode">
					<template v-if="documents.length > 0">
						<template v-for="(d, i) in documents">
							<slot name="row" :entity="d" :index="i" :class="{'data-view': true, [transition]: true}" :selected="selected[d.id]">
								<tr :key="d.id" :class="{selected: selected[d.id]}" ref="rows">
									<td class="center-content table-bulk-checkbox" v-if="bulk">
										<input-checkbox v-model="selected[d.id]" @input="checkboxInput(d.id, $event)" text="" />
									</td>
									<template v-for="(col, ci) in displayColumns">
										<slot :column="col" :entity="d" :index="ci" :data="d[col]" :name="'column-' + col">
											<td :key="col">{{d[col]}}</td>
										</slot>
									</template>
								</tr>
							</slot>
						</template>
					</template>
					<template v-else-if="!loading">
						<slot name="empty">
							<no-data :index="0" :class="{'data-view': true, [transition]: true}" key="0"></no-data>
						</slot>
					</template>
				</transition-group>
				<div v-else>
					<h3>Error</h3>
					<p>{{message}}</p>
					<button @click="refresh()">Retry</button>
				</div>
			</table>
		</div>

		<div class="rich-view-grid-wrap" v-if="myLayout == 'grid'" @scroll="scrollListener" ref="gridWrap">
			<transition-group v-if="!error" tag="div" class="rich-view-collection" :class="'rich-view-layout-' + myLayout + (selectedCount > 0 ? ' rich-view-selected' : '')" :name="transition" :mode="transitionMode">
				<template v-if="documents.length > 0">
					<template v-for="(d, i) in documents">
						<div :key="d.id" class="rich-view-grid-item" :class="{'rich-view-grid-item-selected': selected[d.id]}" @click="tryFullSelect(d.id)">
							<div class="rich-view-grid-item-checkbox">
								<input-checkbox v-model="selected[d.id]" @input="checkboxInput(d.id, $event)" text="" :class="{disabled: fullSelect}"/>
							</div>
							<slot name="grid" :entity="d" :index="i" :class="{'data-view': true, [transition]: true}" :selected="selected[d.id]" />
						</div>
					</template>
				</template>
				<template v-else-if="!loading">
					<slot name="empty">
						<no-data :index="0" class="no-data" :class="{'data-view': true, [transition]: true}" key="0"></no-data>
					</slot>
				</template>
			</transition-group>
			<div v-else>
				<h3>Error</h3>
				<p>{{message}}</p>
				<button @click="refresh()">Retry</button>
			</div>
		</div>

		<loader :active="loading"></loader>
	</div>
}

script {
	export default {
		props: {
			route: {
				type: String,
				required: true
			},
			filter: {
				type: String,
				default: "default"
			},
			query: {
				type: Object,
				default: () => ({})
			},
			transition: {
				type: String,
				default: "data-view"
			},
			transitionMode: {
				type: String,
				default: "out-in"
			},
			collection: {
				type: String,
				default: ""
			},
			limit: {
				type: Number,
				default: 15
			},
			page: {
				type: Number,
				default: 0
			},
			paginate: {
				type: Boolean,
				default: false
			},
			autoload: {
				type: Boolean,
				default: false
			},
			scrollThreshold: {
				type: Number,
				default: 0.95
			},
			fetchOptions: {
				type: Object,
				default: () => ({})
			},
			columns: {
				type: Object,
				default: () => ({})
			},
			layout: {
				type: String,
				default: "table"
			},
			bulk: {
				type: Boolean,
				default: false
			},
			sortable: {
				type: Boolean,
				default: false
			},
			deleteRoute: {
				type: String,
				default: "/delete"
			},
			deleteFilter: {
				type: String,
				default: "default"
			},
			deleteOptions: {
				type: Object,
				default: () => ({})
			},
			fullSelect: {
				type: Boolean,
				default: false
			},
			singleSelect: {
				type: Boolean,
				default: false
			}
		},
		data() {
			return {
				documents: [],
				error: false,
				message: "",
				loading: true,
				selected: {},
				sortColumn: "id",
				sortDirection: "dsc",
				myLayout: this.layout,
				autoLoadPage: 0,
				reachedEnd: false
			};
		},
		methods: {
			checkboxInput(id, v) {
				if (this.singleSelect) {
					this.clearSelection();

					if (v)
						this.setSelected(id, true);
				}
			},
			tryFullSelect(id) {
				if (this.fullSelect) {
					this.setSelected(id, !this.selected[id]);
				}
			},
			makeOrderQuery() {
				if (this.sortable) {
					return {
						field: this.sortColumn,
						direction: this.sortDirection
					};
				}

				return {};
			},
			sort(column) {
				if (this.sortColumn == column)
					this.sortDirection = (this.sortDirection == "dsc" ? "asc" : "dsc");
				else
					this.sortColumn = column;

				this.refresh();
			},
			checkScroll() {
				if (this.myLayout == "table") {
					this.scrollListener({
						srcElement: this.$refs.tableWrap
					});
				}else{
					this.scrollListener({
						srcElement: this.$refs.gridWrap
					});
				}
			},
			scrollListener(e) {
				let scroll = e.srcElement;

				if (scroll.scrollTop + scroll.clientHeight > scroll.scrollHeight * this.scrollThreshold) {
					if (!this.loading && !this.reachedEnd)
						this.loadNextPage();
				}
			},
			async loadNextPage() {
				this.autoLoadPage++;

				this.error = false;
				this.message = "";
				this.loading = true;

				let res = await this.websom.fetch(this.route, {
					filter: this.filter,
					fields: {"*": true},
					query: this.query,
					page: this.autoLoadPage,
					limit: this.limit,
					order: this.makeOrderQuery()
				}, this.fetchOptions);

				if (res.status == "error") {
					if (!this.websom.ssr)
						console.error("Error while fetching for data-view", res);

					this.error = true;
					this.message = res.message;

					this.loading = false;

					return false;
				}

				if (res.documents.length == 0)
					this.reachedEnd = true;

				if (this.collection == "") {
					for (let doc of res.documents) {
						this.documents.push(doc);

						if (this.bulk)
							this.$set(this.selected, doc.id, false);
					}
				}else{
					for (let doc of res.documents) {
						let entity = this.websom.makeEntity(this.collection, doc);
						this.documents.push(entity);

						if (this.bulk)
							this.$set(this.selected, entity.id, false);
					}
				}

				this.$emit("update", this.documents);

				this.loading = false;

				this.$nextTick(() => {
					this.computeColumnSizes();
				});
			},
			async deleteItems() {
				let ids = [];

				for (let id in this.selected)
					if (this.selected[id])
						ids.push(id);

				let res = await this.websom.fetch(this.route + this.deleteRoute, {
					filter: this.deleteFilter,
					query: {
						id: ids
					}
				}, this.deleteOptions);

				if (res.status == "success") {
					this.$toast({
						text: "Deleted",
						expires: 3000
					});
				}else{
					this.$toast({
						text: res.message,
						expires: 6000,
						icon: "error"
					});
				}

				this.refresh();
			},
			confirmDeletion() {
				this.$refs.deletionDialog.open();
			},
			setSelected(id, e) {
				if (this.singleSelect)
					this.clearSelection();

				this.$set(this.selected, id, e);
				this.emitSelection();
			},
			clearSelection() {
				for (let k of Object.keys(this.selected))
					this.selected[k] = false;
			},
			async refresh() {
				this.reachedEnd = false;
				
				for (let k in this.selected)
					this.$delete(this.selected, k);

				this.error = false;
				this.message = "";
				this.loading = true;

				let res = await this.websom.fetch(this.route, {
					filter: this.filter,
					fields: {"*": true},
					query: this.query,
					page: this.page,
					limit: this.limit,
					order: this.makeOrderQuery()
				}, this.fetchOptions);

				if (res.status == "error") {
					if (!this.websom.ssr)
						console.error("Error while fetching for data-view", res);

					this.error = true;
					this.message = res.message;

					this.loading = false;

					return false;
				}

				let resDocs = [];

				if (this.collection == "") {
					for (let doc of res.documents) {
						resDocs.push(doc);
					}
				}else{
					for (let doc of res.documents) {
						let entity = this.websom.makeEntity(this.collection, doc);
						resDocs.push(entity);
					}
				}

				this.documents = resDocs;

				if (this.bulk)
					for (let doc of this.documents)
						this.$set(this.selected, doc.id, false);

				this.$emit("update", this.documents);

				this.loading = false;

				this.$nextTick(() => {
					this.computeColumnSizes();

					this.checkScroll();
				});

				return true;
			},
			checkAll(set) {
				if (!this.singleSelect) {
					for (let k in this.selected)
						this.selected[k] = set;
				}else{
					this.clearSelection();
				}
					
				this.emitSelection();
			},
			computeColumnSizes() {
				this.documents;

				let sizes = new Array(this.displayColumns.length);

				let calculateRow = (row) => {
					for (let i = 0; i < row.children.length; i++) {
						let el = row.children[i];
						if (!sizes[i] || el.clientWidth > sizes[i])
							sizes[i] = el.clientWidth;
					}
				};

				let setColumnWidth = (i, width) => {
					sizes[i] = width;

					if (this.$refs.rows)
					for (let row of this.$refs.rows) {
						let el = row.children[i];

						el.style.setProperty("--column-width", sizes[i] + "px");
					}
				};

				let setRow = (row) => {
					for (let i = 0; i < row.children.length; i++) {
						let el = row.children[i];
						if (el.clientWidth > sizes[i]) {
							//setColumnWidth(i, el.clientWidth);
						}

						el.style.setProperty("--column-width", sizes[i] + "px");
					}
				};

				if (this.$refs.rows)
				for (let row of this.$refs.rows) {
					calculateRow(row);
				}

				if (this.$refs.head)
					setRow(this.$refs.head);

				return sizes;
			},
			emitSelection() {
				let list = [];

				for (let k of Object.keys(this.selected))
					if (this.selected[k])
						list.push(this.documents.find(d => d.id == k));

				this.$emit("input", list);
			}
		},
		watch: {
			layout() {
				this.myLayout = this.layout;
			},
			myLayout() {
				if (this.myLayout == "table")
					this.$nextTick(() => {
						this.computeColumnSizes();
					});

				this.$nextTick(() => {
					this.checkScroll();
				});
			},
			selected: {
				handler() {
					this.emitSelection();
				},
				deep: true
			}
		},
		computed: {
			displayColumns() {
				let keys = Object.keys(this.columns);
				
				if (keys.length > 0) {
					return keys;
				}else{
					if (this.documents.length > 0)
						return Object.keys(this.documents[0]).filter(c => c[0] != "$");
					else
						return [];
				}
			},
			allSelected() {
				for (let k in this.selected)
					if (!this.selected[k])
						return false;

				return true;
			},
			selectedCount() {
				let count = 0;

				for (let k in this.selected)
					if (this.selected[k])
						count++;

				return count;
			}
		},
		serverPrefetch() {
			return this.refresh();
		},
		mounted() {
			if (this.documents.length == 0)
				this.refresh();
		}
	}
}

style {
	.rich-view {
		display: flex;
		flex-direction: column;

		.rich-view-header {
			min-height: calc(var(--base-size) * 4);
		}
	}

	.table-bulk-checkbox {
		height: 100%;
	}

	.rich-view-table {
		width: 100%;

		position: relative;
		top: -24px;
	}

	.rich-table-hidden-columns {
		opacity: 0;
	}

	.rich-table-columns {
		display: flex;
		flex-direction: row;

		> th {
			display: flex;
			align-items: center;

			min-width: var(--column-width);
		}
	}

	.rich-view-table-wrap {
		overflow: auto;
	}

	.rich-view-grid-wrap {
		overflow: auto;
	}

	.rich-bulk-button {
		
	}

	.rich-view-header {
		display: flex;
		align-items: center;
	}

	.rich-view-mode {
		margin-left: auto;
	}

	.rich-view-grid-item {
		display: inline-block;
		width: calc(var(--base-size) * 12);
		height: calc(var(--base-size) * 12);

		margin: calc(var(--base-size) / 2);

		position: relative;

		> .card {
			margin: 0;
			width: calc(var(--base-size) * 12);
			height: calc(var(--base-size) * 12);
		}

		&:hover, &.rich-view-grid-item-selected {
			> .rich-view-grid-item-checkbox {
				opacity: 1;
			}
		}

		> .rich-view-grid-item-checkbox {
			position: absolute;
			opacity: 0;
			z-index: 10;
			transition: var(--transition);
			top: 0;
			left: 0;
			width: calc(var(--base-size) * 4);
			height: calc(var(--base-size) * 4);
			display: flex;
			align-items: center;
			justify-content: center;
		}
	}
}