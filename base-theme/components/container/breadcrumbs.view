info {
	"name": "breadcrumbs",
	"type": "component"
}

template {
	<div class="breadcrumbs">
		<template v-if="!linkedDataOnly">
			<router-link v-for="(c, i) in items" class="breadcrumbs-crumb" :to="c.route" :key="c.name">
				<span>{{c.name}}</span>
				<icon v-if="i != items.length - 1" :icon="$config.breadcrumbsIcon" />
			</router-link>
		</template>

		<script v-if="crumbs.length == 0" v-html="breadcrumbs" type="application/ld+json"></script>
	</div>
}

script {
	export default {
		props: {
			crumbs: {
				type: Array,
				default: () => [],
				description: "Leave blank for auto breadcrumb resolution."
			},
			linkedDataOnly: {
				type: Boolean,
				default: false,
				description: "By setting this to true websom will only render the JSON Linked Data version of these breadcrumbs. Useful for SEO."
			}
		},
		computed: {
			breadcrumbs() {
				let crumbs = this.items;

				return {
					"@context": "https://schema.org",
					"@type": "BreadcrumbList",
					"itemListElement": crumbs.map((c, i) => ({
						"@type": "ListItem",
						"position": i + 1,
						"name": c.name,
						"item": this.absolute(c.route)
					}))
				};
			},
			items() {
				if (this.crumbs.length > 0) {
					return this.crumbs;
				}else{
					return [].concat.apply([], this.$route.matched.map(a => {
						if (a.instances.default) {
							return a.instances.default.breadcrumb();
						}
					}));
				}
			}
		},
		methods: {
			absolute(to) {
				if (this.$store.state.websom.ssr) {
					return this.$store.state.websom.client + to;
				}else{
					let link = document.createElement("a");
					link.href = to;
					return link.href;
				}
			}
		}
	}
}

style {
	.breadcrumbs {
		display: flex;
		align-items: center;
	}
}

config {
	"options": {
		"breadcrumbsIcon": {
			"name": "Breadcrumbs Icon",
			"type": "string",
			"default": "right",
			"helper": "icons"
		}
	}
}