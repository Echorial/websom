info {
	"name": "card",
	"type": "component"
}

template {
	<div class="card" @mouseenter="enter" @mouseleave="leave" :class="{'card-revealed': revealed, 'card-drop-slide-active': dropSlideVisible, 'card-has-reveal fat-action': canReveal, 'fat-action': href, 'card-image-gradient': titlePosition == 'image'}" @click="click">
		<div class="card-main" @click="open">
			<div v-if="$slots.image || images.length > 0" class="card-images">
				<slider v-if="images.length > 0" class="card-images-slider" :images="images" />
				<slot v-else name="image" />

				<slot class="card-title" data-slot="title" name="title" v-if="titlePosition == 'image'" />
			</div>
			<div class="card-content">
				<slot class="card-fab" name="fab" />
				<slot class="card-title" name="title" v-if="titlePosition == 'content' || (!$slots.image && images.length == 0)" />
				<slot class="card-body" name="body" />
				<slot class="card-body" />
			</div>
			<div class="card-action-bar">
				<slot class="card-actions" name="action" />
			</div>
		</div>
		<div class="card-reveal" v-if="canReveal">
			<div class="card-reveal-content">
				<div class="card-reveal-bar" @click="close">
					<slot name="reveal-title" />
					<icon icon="close" class="card-reveal-close large"  />
				</div>
				<slot class="card-reveal-content" name="reveal" />
			</div>
		</div>
		
		<div class="card-drop-slide" v-if="canDropSlide">
			<slot name="drop-slide" />
		</div>
	</div>
}

script {
	export default {
		props: {
			images: {
				type: Array,
				default: () => []
			},
			titlePosition: {
				type: String,
				default: "image"
			},
			href: {
				type: String,
				default: ""
			},
			dropSlideTime: {
				type: Number,
				default: 300
			}
		},
		data() {
			return {
				revealed: false,
				dropSlideTimeout: null,
				dropSlideVisible: false
			};
		},
		computed: {
			canReveal() {
				return !!this.$slots.reveal;
			},
			canDropSlide() {
				return !!this.$slots["drop-slide"];
			}
		},
		methods: {
			open(e) {
				if (this.canReveal)
					this.revealed = true;
			},
			close(e) {
				this.revealed = false;
			},
			click() {
				if (this.href) {
					this.$router.push(this.href);
				}
			},
			enter() {
				if (this.canDropSlide)
					this.dropSlideTimeout = setTimeout(() => {
						this.dropSlideVisible = true;
					}, this.dropSlideTime);
			},
			leave() {
				this.dropSlideVisible = false;
				
				if (this.dropSlideTimeout) {
					clearTimeout(this.dropSlideTimeout);
					this.dropSlideTimeout = null;
				}
			}
		}
	}
}

style {
	#app .card .card-main .card-content, #app .card .card-main .card-images {
		& > h1,
		& > h2,
		& > h3,
		& > h4,
		& > h5,
		& > h6 {
			padding-top: 0px;
			padding: 0;
		}
	}

	#app .card .card-main .card-images {
		& > h1,
		& > h2,
		& > h3,
		& > h4,
		& > h5,
		& > h6 {
			position: absolute;
			bottom: 0px;
			padding: var(--base-size);
			width: calc(100% - var(--base-size) * 2);

			color: white;
		}
	}

	.card:not(:first-child) {
		margin-top: var(--base-size);
	}

	@media @small {
		.card {
			margin-left: var(--base-size);
			margin-right: var(--base-size);

			&:last-child {
				margin-bottom: var(--base-size);
			}
		}
	}

	.card-drop-slide {
		position: absolute;
		top: 0%;
		z-index: var(--z-overlay);
		background: var(--background-overlay);
		transition: top var(--transition-movement) var(--transition-easing-movement);
		opacity: 0;
	}

	.card.card-drop-slide-active {
		overflow: visible;

		border-bottom-left-radius: 0px;
		border-bottom-right-radius: 0px;
		border-bottom: 0;

		.card-main {
			z-index: var(--z-above-overlay);
			position: absolute;
			background: var(--background-overlay);
		}

		.card-drop-slide {
			top: 100%;
			opacity: 1;

			border: 1px solid var(--background-center);
			border-radius: 4px;
			border-top-left-radius: 0px;
			border-top-right-radius: 0px;
			border-top: 0;
			width: 100%;
		}
	}

	.card {
		background: var(--background-overlay);
		border: 1px solid var(--background-center);
		border-radius: 4px;

		transition: var(--transition-color) var(--transition-easing);

		position: relative;

		overflow: hidden;

		&.card-grid {
			display: inline-block;
			width: calc(var(--base-size) * 12);
			height: calc(var(--base-size) * 12);

			margin: calc(var(--base-size) / 2);

			&.free-height {
				height: auto;
			}
		}

		&.card-has-reveal {
			.card-main {
				cursor: var(--cursor-action);
			}
		}

		&.space-horizontal {
			margin-left: var(--base-size);
			margin-right: var(--base-size);
		}

		&.fat-action:hover {
			background: var(--background-tint);
		}

		&.full-image {
			.card-images {
				height: 100%;
			}
		}

		&.hover-title {
			h1, h2, h3, h4, h5, h6 {
				transition: var(--transition) var(--transition-easing);
				opacity: 0;
			}

			&:hover {
				h1, h2, h3, h4, h5, h6 {
					opacity: 1;
				}
			}
		}

		&.card-image-gradient .card-images::before {
			content: "";
			position: absolute;
			bottom: 0;
			height: calc(var(--base-size) * 6);
			background: linear-gradient(to bottom, transparent, rgba(0, 0, 0, 0.3));
			width: 100%;
			left: 0;
		}
 
		.card-main {
			text-align: left;
			height: 100%;

			.card-content {
				padding: var(--base-size);

				.floating {
					float: right;
					margin-top: calc(var(--base-size) * -3);
					margin-bottom: 12px;

					position: relative;
				}

				& > h1 + div,
				& > h2 + div,
				& > h3 + div,
				& > h4 + div,
				& > h5 + div,
				& > h6 + div {
					padding-top: var(--base-size);
				}
			}
			
			.card-images {
				overflow: hidden;

				position: relative;
				display: flex;
				align-items: center;
				justify-content: center;

				border-top-left-radius: 4px;
				border-top-right-radius: 4px;

				& > img {
					max-width: 100%;
					max-height: 100%;
				}
			}

			.card-action-bar {
				overflow: hidden;
				border-bottom-left-radius: 4px;
				border-bottom-right-radius: 4px;
			}
		}

		.card-reveal {
			position: absolute;
			top: 100%;
			left: 0;
			width: 100%;
			height: 0%;

			transition: var(--transition-movement) var(--transition-easing-movement);

			overflow: hidden;

			background: var(--background-tint);
			border-radius: 4px;

			text-align: left;

			.card-reveal-content {
				padding: var(--base-size);
			}

			.card-reveal-bar {
				display: flex;
				align-items: center;
				justify-content: flex-start;

				.card-reveal-close {
					margin-left: auto;
					cursor: var(--cursor-action);
				}
			}
		}

		&.card-revealed {
			.card-reveal {
				top: 0;
				height: 100%;
			}
		}
	}
}