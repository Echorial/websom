info {
	"name": "loader",
	"type": "component"
}

template {
	<div v-if="!status && !hasSlot()" class="loader" :class="{'loader-active': active, ['loader-' + type]: true}">
		<div class="loader-before"></div>
		<div class="loader-icon"><icon icon="loading" /></div>
		<div class="loader-after"></div>
	</div>
	<div v-else-if="!status && hasSlot()" class="loader-block" :class="{'loader-block-active': active}">
		<div class="loader-block-content">
			<slot />
		</div>
		<div class="loader-block-loader">
			<loader type="small" />
		</div>
	</div>
	<div v-else-if="status">
		<icon class="loader-status-icon" :icon="status == 'error' ? 'danger' : status" />
	</div>
}

script {
	export default {
		props: {
			type: {
				type: String,
				default: "long"
			},
			active: {
				type: Boolean,
				default: true
			},
			status: {
				type: String,
				default: ""
			}
		},
		methods: {
			hasSlot() {
				return !!this.$slots.default || !!this.$scopedSlots.default;
			}
		}
	}
}

style {
	@keyframes status-icon {
		0% {
			transform: scale(0);
		}

		100% {
			transform: scale(1);
		}
	}

	.loader-status-icon {
		animation: status-icon 1s;
		--icon-size: calc(var(--base-size) * 3);
	}

	.loader-block {
		position: relative;

		.loader-block-loader {
			position: absolute;
			background: var(--background);

			opacity: 0;

			top: 0;
			left: 0;
			width: 100%;
			height: 100%;

			pointer-events: none;

			transition: var(--transition-color) var(--transition-easing);

			display: flex;
			align-items: center;
			justify-content: center;
		}

		.loader-block-content {
			transition: var(--transition-color) var(--transition-easing);
		}

		&.loader-block-active > .loader-block-loader {
			opacity: 0.5;

			pointer-events: all;
		}

		&.loader-block-active > .loader-block-content {
			filter: blur(3px);
		}
	}

	.loader {
		&.loader-long {
			width: 100%;
			height: calc(var(--base-size) / 2);

			background: var(--background-overlay);

			overflow: hidden;

			position: relative;

			&.loader-after, .loader-icon {
				display: none;
			}

			.loader-before {
				position: absolute;
				top: 0%;
				height: 100%;
				width: 0%;

				background: var(--color);
			}

			&.loader-active {
				.loader-before {
					animation: loader-long-slide 1s infinite cubic-bezier(0.75, 0, 0.25, 0.99);
				}
			}
		}

		&.loader-small, &.loader-big {
			.loader-icon {
				opacity: 0;
			}
			
			&.loader-active {
				.loader-icon {
					opacity: 1;
					animation: loader-small-rotate 1s infinite linear;
				}
			}
		}

		&.loader-big {
			padding: calc(var(--base-size) * 6);

			.loader-icon {
				--icon-size: calc(var(--base-size) * 6);
			}
		}
	}

	@keyframes loader-long-slide {
		0% {
			left: 0%;
			width: 0%;
		}

		50% {
			left: 25%;
			width: 50%;
		}

		100% {
			left: 100%;
			width: 0%;
		}
	}

	@keyframes loader-small-rotate {
		0% {
			transform: rotate(0deg);
		}

		100% {
			transform: rotate(360deg);
		}
	}
}