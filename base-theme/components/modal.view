info {
	"name": "modal",
	"type": "component"
}

template {
	<portal to="top">
		<div class="modal-wrap" :class="{'modal-wrap-open': isOpen}">
			<div :class="'modal' + (isOpen ? ' modal-open' : '') + ' modal-' + size + (modalTransparent ? ' modal-transparent ' : ' ') + modalClass">
				<slot v-if="!dialog" />
				<button v-if="showClose" @click="close" class="modal-close floating"><icon icon="close" /></button>

				<div class="modal-dialog" v-if="dialog">
					<h1 class="modal-dialog-title">
						<icon :icon="dialogIcon" :left="true" />
						{{dialogTitle}}
					</h1>
					
					<p class="modal-dialog-body">
						<slot>
							{{dialogBody}}
						</slot>
					</p>

					<action-bar v-if="dialog" edge="bottom">
						<button @click="dialogAction('cancel')" :class="dialogCancelColor">{{dialogCancel}}</button>
						<button @click="dialogAction('confirm')" :class="dialogConfirmColor">{{dialogConfirm}}</button>
					</action-bar>
				</div>
			</div>
		</div>
	</portal>
}

script {
	export default {
		props: {
			modalTransparent: {
				type: Boolean,
				default: false
			},
			showClose: {
				type: Boolean,
				default: false
			},
			modalClass: {
				type: String,
				default: ""
			},
			autoOpen: {
				type: Boolean,
				default: false
			},
			size: {
				type: String,
				default: "normal"
			},
			dialog: {
				type: Boolean,
				default: false
			},
			dialogTitle: {
				type: String,
				default: "Dialog Title"
			},
			dialogIcon: {
				type: String,
				default: "warning"
			},
			dialogBody: {
				type: String,
				default: "Dialog body"
			},
			dialogConfirm: {
				type: String,
				default: "Yes"
			},
			dialogConfirmColor: {
				type: String,
				default: "success"
			},
			dialogCancel: {
				type: String,
				default: "No"
			},
			dialogCancelColor: {
				type: String,
				default: "mute"
			},
			closeOnRouteChange: {
				type: Boolean,
				default: true
			},
			selfClose: {
				type: Boolean,
				default: true
			}
		},
		data() {
			return {
				isOpen: false
			};
		},
		methods: {
			dialogAction(action) {
				this.$emit(action);
				
				if (this.selfClose)
					this.close();
			},
			open() {
				this.isOpen = true;
				this.$send("open-shade", () => this.close());
			},
			close() {
				this.isOpen = false;
				this.$send("close-shade");
				this.$emit("close");
			},
			toggle() {
				if (this.isOpen)
					this.close();
				else
					this.open();
			}
		},
		mounted() {
			if (this.autoOpen)
				this.open();
		},
		watch: {
			$route() {
				if (this.isOpen && this.closeOnRouteChange)
					this.close();
			}
		}
	}
}

style {
	.modal-wrap {
		position: fixed;
		top: 0;
		bottom: 0;
		left: 0;
		right: 0;

		z-index: var(--z-modal);

		display: flex;
		align-items: center;
		justify-content: center;

		pointer-events: none;
	}

	.modal {
		background: var(--background-tint);

		&.modal-transparent {
			background: transparent;
		}

		transition: var(--transition) var(--transition-easing);

		opacity: 0;

		pointer-events: none;

		min-width: var(--modal-width);

		min-height: 300px;

		max-height: calc(100% - var(--base-size) * 4);
		max-width: 100%;

		.modal-close {
			position: absolute;
			top: calc(var(--base-size) * 2);
			right: calc(var(--base-size) * 2);
		}

		&.modal-open {
			opacity: 1;
			pointer-events: all;
		}

		&.modal-full {
			width: 100%;
			height: 100%;
		}

		&.modal-prompt {
			width: 300px;
			min-width: 300px;
			min-height: 200px;
		}

		&.modal-display {
			height: 60%;
			width: 70%;
		}

		.modal-dialog {
			display: flex;
			flex-direction: column;
			height: 100%;

			p {
				flex: 1;
				padding: 0px var(--base-size);
			}

			h1 {
				text-align: center;
			}
		}
	}
}