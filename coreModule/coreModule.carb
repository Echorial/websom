namespace CoreModule {}

#script Carbon
	print("Core module");
#end script

class CoreModule.Module inherits Websom.Module {
	Websom.Adapters.Database.Collection groups = null;
	Websom.Adapters.Database.Collection confirmations = null;
	Websom.Adapters.Database.Collection objects = null;
	Websom.Adapters.Database.Collection mediaFiles = null;

	public Websom.Permission dashboardView = null;

	public Websom.Permission commentEdit = null;
	public Websom.Permission commentCreate = null;
	public Websom.Permission commentRead = null;

	Websom.Permission groupRead = null;
	Websom.Permission groupCreate = null;
	Websom.Permission groupEdit = null;

	Websom.Bucket media = null;

	override void permissions() {
		this.dashboardView = new Websom.Permission("Dashboard.View");

		this.commentEdit = new Websom.Permission("Comment.Edit");
		this.commentEdit.description = "Allows users to edit any comment";
		
		this.commentCreate = new Websom.Permission("Comment.Create");
		this.commentCreate.description = "Allows users to create a comment";

		this.commentRead = new Websom.Permission("Comment.Read");
		this.commentRead.description = "Read permissions on any comment anywhere";
		this.commentRead.public = true;
		
		this.registerPermission(this.dashboardView);
		this.registerPermission(this.commentEdit);
		this.registerPermission(this.commentCreate);
		this.registerPermission(this.commentRead);

		this.groupRead = this.registerPermission("Group.Read")
			.setDescription("Allows users to read permission group information.");
		
		this.groupCreate = this.registerPermission("Group.Create")
			.setDescription("Allows users to create permission groups. WARNING This is an admin level permission.");
		
		this.groupEdit = this.registerPermission("Group.Edit")
			.setDescription("Allows users to edit permission groups. WARNING This is an admin level permission.");
	}

	override void collections() {
		let db = this.server.database.central;

		this.objects = db.collection("websom_bucket_objects");
		this.objects.schema()
			.field("filename", "string")
			.field("bucket", "string")
			.field("acl", "string")
			.field("uploaded", "boolean")
			.field("token", "string")
			.field("sizeLimit", "int");
		
		this.registerCollection(this.objects);

		this.mediaFiles = db.collection("websom_media");
		this.mediaFiles.schema()
			.field("name", "string")
			.field("file", "string")
			.field("size", "int")
			.field("created", "time")
			.field("owner", "string")
			.field("type", "string");
		
		this.registerCollection(this.mediaFiles);

		this.server.api.interface(this.mediaFiles, "/media")
			.route("/insert")
				.auth(this.dashboardView)
				.executes("insert")
					.write("name")
					.write("file")
					.write("size")
					.write("type")
					.setComputed("user", string (Websom.Request req) => {
						return req.user().id;
					})
					.setComputed("created", uint64 (Websom.Request req) => {
						return Websom.Time.now();
					})
			.route("/delete")
				.auth(this.dashboardView)
				.executes("delete")
					.filter("default")
						.field("id", "in")
					.on("success", void (Websom.Request req, <Websom.Adapters.Database.Document>array docs) => {
						for (let int i in docs) {
							let doc = docs[i];

							this.media.deleteObject(doc.get("name"));
						}
					})
			.route("/view")
				.auth(this.dashboardView)
				.executes("select")
					.read("*")
					.filter("default")
						.order("created", "dsc")
			.route("/read")
				.auth(this.dashboardView)
				.executes("select")
					.read("*")
					.filter("default")
						.field("file", "==");

		this.confirmations = db.collection("confirmations");
		let confirmationSchema = this.confirmations.schema()
			.field("secret", "string")
			.field("key", "string")
			.field("ip", "string")
			.field("created", "time")
			.field("storage", "string")
			.field("expires", "time")
			.field("confirmed", "boolean")
			.field("service", "string")
			.field("method", "string")
			.field("to", "string");

		this.registerCollection(this.confirmations);

		this.groups = db.collection("groups");

		Websom.Group.applySchema(this.groups);

		this.registerCollection(this.groups);

		this.server.api.interface(this.groups, "/groups")
			.route("/create")
				.auth(this.groupCreate)
				.executes("insert")
					.write("name")
					.write("description")
					.write("permissions")
					.write("rules")
					.write("public")
					.write("user")
					.setComputed("created", uint64 (Websom.Request req) => { return Websom.Time.now(); })
			.route("/find")
				.auth(this.groupRead)
				.executes("select")
					.read("*")
					.filter("default")
						.order("created", "dsc")
			.route("/read")
				.auth(this.groupRead)
				.executes("select")
					.read("*")
					.filter("default")
						.field("id", "==");

		this.server.api.route("/dashboard/view")
			.auth(this.dashboardView)
			.executes(void (Websom.APIContext ctx) => {
				let data = new map();

				data["website"] = this.server.config.name;
				data["dev"] = this.server.config.dev;
				data["config"] = this.server.configService.cacheOptions();
				data["options"] = this.server.configService.getConfiguredOptions();

				ctx.request.endWithData(data);
			});
	}

	override void registerWithServer() {
		let adapter = new CoreModule.Confirmation(this.server);
		adapter.module = this;
		this.server.confirmation.confirmation = adapter;

		adapter.registerCollection();
	}

	override Websom.Status start() {
		this.media = this.registerBucket("media");

		this.server.api.route("/media/upload")
			.auth(this.dashboardView)
			.input("filename")
				.type("string")
			.input("type")
				.type("string")
			.input("size")
				.type("integer")
			.executes(void (Websom.APIContext ctx) => {
				let string filename = ctx.get("filename");
				let res = this.mediaFiles.where("name", "==", filename).get();

				let data = new map();
				data["uploadURL"] = this.media.uploadObject().name(filename).access("public").generateUploadURL();
				data["conflict"] = false;

				if (res.documents.length > 0) {
					data["conflict"] = true;
				}else{
					this.mediaFiles.insert()
						.set("name", filename)
						.set("file", this.media.serve(filename))
						.set("type", ctx.get("type"))
						.set("size", ctx.get("size"))
						.set("created", Websom.Time.now())
						.set("owner", ctx.request.user().id)
						.run();
				}

				ctx.request.endWithData(data);
			});
	}
}

#include "adapters/loki"
#include "adapters/firestore"
#include "adapters/sendGrid"
#include "adapters/confirmation"
#include "adapters/fileSystem"