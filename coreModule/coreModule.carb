namespace CoreModule {}

#script Carbon
	print("Core module");
#end script

class CoreModule.Module inherits Websom.Module {
	Websom.Adapters.Database.Collection test = null;

	public Websom.Permission commentEdit = null;
	public Websom.Permission commentCreate = null;
	public Websom.Permission commentRead = null;

	override void permissions() {
		this.commentEdit = new Websom.Permission("Comment.Edit");
		this.commentEdit.description = "Allows users to edit any comment";
		
		this.commentCreate = new Websom.Permission("Comment.Create");
		this.commentCreate.description = "Allows users to create a comment";

		this.commentRead = new Websom.Permission("Comment.Read");
		this.commentRead.description = "Read permissions on any comment anywhere";
		this.commentRead.public = true;
		
		this.registerPermission(this.commentEdit);
		this.registerPermission(this.commentCreate);
		this.registerPermission(this.commentRead);
	}

	override void collections() {
		let db = this.server.database.central;

		this.test = db.collection("test");

		let schema = this.test.schema()
			.field("name", "string")
			.field("balance", "float")
			.calc("averageBalance", new Websom.Calculators.Average("balance"))
			.index()
				.field("name", "==")
				.field("balance", "dsc");
			
		this.registerCollection(this.test);
		let int x = Websom.Time.now();
		this.test.insert()
			.set("name", "Hello")
			.set("balance", Math.sin(x))
			.run();

		let res = this.test.where("name", "==", "Hello").get();

		this.server.api.interface(this.test, "/testing")
			.route("/create")
				.auth(this.commentCreate)
				.executes("insert")
					.write("name")
						.limit(3, 256)
					.set("balance", 0)
			.route("/edit")
				.auth(this.commentEdit)
				.executes("update")
					.write("name")
					.filter("default")
						.field("id", "==")
			.route("/find")
				.auth(this.commentRead)
				.executes("select")
					.read("name")
					.read("balance")
					.filter("default")
						.field("name", "==")
						.force("balance", "<", 100)
						.order("balance", "dsc");
	}

	override Websom.Status start() {
		this.server.api.route("/custom/endpoint", void (Websom.Request req) => {
			req.end("Hello");
		});
	}
}

class Person { //extends Websom.Entity {
	field string firstName = "";
	field string lastName = "";
	field int age = 0;

	override Websom.Adapters.Database.Schema getSchema() {
		let s = new Websom.Adapters.Database.Schema(null);

		s
			.field("firstName", "string")
			.field("lastName", "string")
			.field("age", "int");

		return s;
	}
}

#include "adapters/loki"