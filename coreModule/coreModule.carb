namespace CoreModule {}

class CoreModule.Module inherits Websom.Module, Websom.Standard.CoreModule {

	string transientAccessCode = "";

	override void permissions() {
		this.dashboardView = new Websom.Permission("Dashboard.View");

		this.commentEdit = new Websom.Permission("Comment.Edit");
		this.commentEdit.description = "Allows users to edit any comment";
		
		this.commentCreate = new Websom.Permission("Comment.Create");
		this.commentCreate.description = "Allows users to create a comment";

		this.commentRead = new Websom.Permission("Comment.Read");
		this.commentRead.description = "Read permissions on any comment anywhere";
		this.commentRead.public = true;
		
		this.registerPermission(this.dashboardView);
		this.registerPermission(this.commentEdit);
		this.registerPermission(this.commentCreate);
		this.registerPermission(this.commentRead);

		this.corePublic = this.registerPermission("Core.Public")
			.isPublic()
			.setDescription("Base public permission providing access to tags, categories and more.");


		this.groupRead = this.registerPermission("Group.Read")
			.setDescription("Allows users to read permission group information.");
		
		this.groupCreate = this.registerPermission("Group.Create")
			.setDescription("Allows users to create permission groups. WARNING This is an admin level permission.");
		
		this.groupEdit = this.registerPermission("Group.Edit")
			.setDescription("Allows users to edit permission groups. WARNING This is an admin level permission.");
	}

	override void collections() {
		let db = this.server.database.central;

		this.tags = db.collection("tags");
		this.tags.schema()
			.field("name", "string")
			.field("namespace", "string")
			.field("description", "string")
			.field("color", "string")
			.field("created", "time")
			.field("objects", "int");

		let fieldsForSearching = new <string>array();
		fieldsForSearching.push("name");
		fieldsForSearching.push("namespace");
		fieldsForSearching.push("description");
		fieldsForSearching.push("color");
		fieldsForSearching.push("created");
		fieldsForSearching.push("objects");

		this.tags.enableSearching(fieldsForSearching);

		this.registerCollection(this.tags);

		this.server.api.interface(this.tags, "/tags")
			.route("/insert")
				.auth(this.dashboardView)
				.executes("insert")
					.write("name")
					.write("namespace")
					.write("description")
					.write("color")
					.setComputed("created", uint64 (Websom.Request req) => {
						return Websom.Time.now();
					})
				.route("/delete")
					.auth(this.dashboardView)
					.executes("delete")
						.filter("default")
							.field("id", "in")
				.route("/view")
					.auth(this.dashboardView)
					.executes("select")
						.read("*")
						.filter("default")
							.field("namespace", "==")
				.route("/search")
					.auth(this.corePublic)
					.executes("search")
						.read("*")
						.filter("default")
							.field("name", "==")
							.field("namespace", "==")
				.route("/get")
					.auth(this.dashboardView)
					.executes("select")
						.read("*")
						.filter("default")
							.field("id", "==");

		this.categories = db.collection("categories");
		this.categories.schema()
			.field("name", "string")
			.field("namespace", "string")
			.field("description", "string")
			.field("color", "string")
			.field("created", "time")
			.field("objects", "int")
			.field("parent", "string");

		this.registerCollection(this.categories);

		this.server.api.interface(this.categories, "/categories")
			.route("/insert")
				.auth(this.dashboardView)
				.executes("insert")
					.write("name")
					.write("namespace")
					.write("description")
					.write("color")
					.write("parent")
					.setComputed("created", uint64 (Websom.Request req) => {
						return Websom.Time.now();
					})
				.route("/delete")
					.auth(this.dashboardView)
					.executes("delete")
						.filter("default")
							.field("id", "in")
				.route("/view")
					.auth(this.dashboardView)
					.executes("select")
						.read("*")
						.filter("default")
							.field("namespace", "==")
				.route("/get")
					.auth(this.dashboardView)
					.executes("select")
						.read("*")
						.filter("default")
							.field("id", "==");

		this.objects = db.collection("websom_bucket_objects");
		this.objects.schema()
			.field("filename", "string")
			.field("bucket", "string")
			.field("acl", "string")
			.field("uploaded", "boolean")
			.field("token", "string")
			.field("sizeLimit", "int");
		
		this.registerCollection(this.objects);

		this.mediaFiles = db.collection("websom_media");
		this.mediaFiles.schema()
			.field("name", "string")
			.field("file", "string")
			.field("size", "int")
			.field("created", "time")
			.field("owner", "string")
			.field("type", "string");
		
		this.registerCollection(this.mediaFiles);

		this.server.api.interface(this.mediaFiles, "/media")
			.route("/insert")
				.auth(this.dashboardView)
				.executes("insert")
					.write("name")
					.write("file")
					.write("size")
					.write("type")
					.setComputed("user", string (Websom.Request req) => {
						return req.user().id;
					})
					.setComputed("created", uint64 (Websom.Request req) => {
						return Websom.Time.now();
					})
			.route("/delete")
				.auth(this.dashboardView)
				.executes("delete")
					.filter("default")
						.field("id", "in")
					.on("success", void (Websom.Request req, <Websom.Adapters.Database.Document>array docs) => {
						for (let int i in docs) {
							let doc = docs[i];
							let string name = doc.get("name");
							let ext = name.split(".");
							ext.pop();
							let rawName = ext.join(".");

							this.media.deleteObject(name);
							this.media.deleteObject(rawName + "_thumbnail.png");
							this.media.deleteObject(rawName + "_thumbnail.webp");
						}
					})
			.route("/view")
				.auth(this.dashboardView)
				.executes("select")
					.read("*")
					.filter("default")
						.order("*", "dsc")
			.route("/get")
				.auth(this.dashboardView)
				.executes("select")
					.read("*")
					.filter("default")
						.field("file", "==")
					.filter("id")
						.field("id", "==");

		this.confirmations = db.collection("confirmations");
		let confirmationSchema = this.confirmations.schema()
			.field("secret", "string")
			.field("key", "string")
			.field("ip", "string")
			.field("created", "time")
			.field("storage", "string")
			.field("expires", "time")
			.field("confirmed", "boolean")
			.field("service", "string")
			.field("method", "string")
			.field("to", "string");

		this.registerCollection(this.confirmations);

		this.groups = db.collection("groups");

		Websom.Group.applySchema(this.groups);

		this.registerCollection(this.groups);

		this.server.api.interface(this.groups, "/groups")
			.route("/create")
				.auth(this.groupCreate)
				.executes("insert")
					.write("name")
					.write("description")
					.write("permissions")
					.write("rules")
					.write("public")
					.write("user")
					.setComputed("created", uint64 (Websom.Request req) => { return Websom.Time.now(); })
			.route("/find")
				.auth(this.groupRead)
				.executes("select")
					.read("*")
					.filter("default")
						.order("created", "dsc", true)
			.route("/read")
				.auth(this.groupRead)
				.executes("select")
					.read("*")
					.filter("default")
						.field("id", "==");

		this.server.api.route("/dashboard/view")
			.auth(this.dashboardView)
			.executes(void (Websom.APIContext ctx) => {
				let data = new map();

				data["website"] = this.server.config.name;
				data["dev"] = this.server.config.dev;
				data["config"] = this.server.configService.cacheOptions();
				data["options"] = this.server.configService.getConfiguredOptions();

				ctx.request.endWithData(data);
			});

		this.server.api.route("/dashboard/access")
			.executes(void (Websom.APIContext ctx) => {
				if (this.server.config.dev) {
					let data = new map();

					let str = "";
					for (let int i = 0; i < 4; i++)
						str += (Math.floor(Math.random() * 10));

					this.transientAccessCode = str;

					Console.log("Dev access code requested: " + this.transientAccessCode);

					ctx.request.endWithSuccess("Generated");
				}else{
					ctx.request.endWithError("Nice try.");
				}
			});
		
		this.server.api.route("/dashboard/login-with-access-code")
			.input("code")
				.type("string")
			.executes(void (Websom.APIContext ctx) => {
				if (this.server.config.dev) {
					if (this.transientAccessCode != "") {
						let code = ctx.get("code");

						if (code == this.transientAccessCode) {
							this.transientAccessCode = "";

							ctx.request.grantSessionRole("admin");

							ctx.request.endWithSuccess("Success");
						}else{
							ctx.request.endWithError("Invalid");
						}
					}else{
						ctx.request.endWithError("Invalid");
					}
				}else{
					ctx.request.endWithError("This feature is only available on dev servers.");
				}
			});
	}

	override void registerWithServer() {
		let adapter = new CoreModule.Confirmation(this.server);
		adapter.module = this;
		this.server.confirmation.confirmation = adapter;

		adapter.registerCollection();
	}

	override Websom.Status start() {
		this.media = this.registerBucket("media");

		this.media.afterWrite = void (Websom.BucketObjectContext ctx) => {
			let filePath = ctx.localFile();

			native javascript {
				const sharp = require("sharp");
				const fs = require("fs");
				const mime = require("mime");

				let mimeType = mime.getType(filePath);

				if (mimeType.split("/")[0] != "image")
					return;
				
				let name = ctx.name.split(".");
				if (name[name.length - 2].endsWith("_thumbnail"))
					return;

				let info = await sharp(filePath)
					.resize(256)
					.webp()
					.toFile(_c_this.server.tmp + "/output.webp");
				
				let info2 = await sharp(filePath)
					.resize(256)
					.png()
					.toFile(_c_this.server.tmp + "/output.png");
				
				name.pop();
				let dest = name.join(".") + "_thumbnail.webp";
				let destLegacy = name.join(".") + "_thumbnail.png";

				_c_this.media.writeObject(dest, _c_this.server.tmp + "/output.webp");
				_c_this.media.writeObject(destLegacy, _c_this.server.tmp + "/output.png");
			}
		};

		this.server.api.route("/media/upload")
			.auth(this.dashboardView)
			.input("filename")
				.type("string")
			.input("type")
				.type("string")
			.input("size")
				.type("integer")
			.executes(void (Websom.APIContext ctx) => {
				let string filename = ctx.get("filename");
				let res = this.mediaFiles.where("name", "==", filename).get();

				let data = new map();
				data["uploadURL"] = this.media.uploadObject().name(filename).access("public").generateUploadURL();
				data["conflict"] = false;

				if (res.documents.length > 0) {
					data["conflict"] = true;
				}else{
					this.mediaFiles.insert()
						.set("name", filename)
						.set("file", this.media.serve(filename))
						.set("type", ctx.get("type"))
						.set("size", ctx.get("size"))
						.set("created", Websom.Time.now())
						.set("owner", ctx.request.user().id)
						.run();
				}

				ctx.request.endWithData(data);
			});
	}
}

#include "adapters/loki"
#include "adapters/firestore"
#include "adapters/sendGrid"
#include "adapters/confirmation"
#include "adapters/fileSystem"
#include "adapters/algolia"