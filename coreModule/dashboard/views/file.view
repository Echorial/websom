info {
	"name": "websom-dashboard-file",
	"type": "page",
	"route": ":id",
	"nested": "/websom.dashboard/files"
}

template {
	<modal ref="modal" @close="closed" size="display">
		<g-l v-if="file">
			<g-h>
				<g-v m="6" class="file-display-wrap center-content">
					<template v-if="isImage">
						<img :src="file.file" class="file-preview" @load="setImageDimensions" v-draggable="{position: 'transform'}" />
						<span class="file-display-dimensions">{{imageDimensions}}</span>
					</template>
				</g-v>
				<g-v m="6">
					<h1 class="pad-content">
						{{file.name}}
					</h1>
					<div class="pad-content">
						ID: <label>{{file.id}}</label>
					</div>
					<div class="pad-content">
						Name: <label>{{file.name}}</label>
					</div>
					<div class="pad-content">
						Type: <label>{{file.type}}</label>
					</div>
					<div class="pad-content">
						Size: <label>{{(file.size / (1024 * 1024)).toFixed(2)}}MB</label>
					</div>
					<div class="pad-content">
						Created: <label><time-display :time="file.created" /></label>
					</div>
					<div class="pad-content">
						<input-text placeholder="Public Location" readonly :value="file.file" />
					</div>
					<div class="pad-content" v-if="isImage">
						<input-text placeholder="Thumbnail (webp)" readonly :value="toThumbnail(file.file, 'webp')" />
					</div>
					<div class="pad-content">
						<label>Owner</label>
						<br><br>
						<user-block :user="file.owner" />
					</div>
				</g-v>
			</g-h>
		</g-l>
		<no-data v-else />
	</modal>
}

script {
	export default {
		data: () => ({
			file: {},
			imageDimensions: ""
		}),
		methods: {
			closed() {
				this.$router.push("./");
			},
			setImageDimensions(e) {
				this.imageDimensions = e.target.width + "x" + e.target.height;
			},
			toThumbnail(file, ext) {
				file = file || "";
				let x = file.split(".");
				x.pop();
				return x.join(".") + "_thumbnail." + ext;
			}
		},
		computed: {
			isImage() {
				if (this.file)
					return this.file.type ? this.file.type.split("/")[0] == "image" : false;
				else
					return false;
			}
		},
		async mounted() {
			this.file = await this.websom.getEntity("/media", this.$route.params.id, "id");
			
			this.$refs.modal.open();
		}
	}
}

style {
	.file-display-wrap {
		background-image: linear-gradient(45deg, #808080 25%, transparent 25%), linear-gradient(-45deg, #808080 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #808080 75%), linear-gradient(-45deg, transparent 75%, #808080 75%);
		background-size: 20px 20px;
		background-position: 0 0, 0 10px, 10px -10px, -10px 0px;

		position: relative;

		overflow: hidden;
	}

	.file-preview {
		max-width: 100%;
	}

	.file-display-dimensions {
		position: absolute;
		bottom: 0;
		right: 0;
		background: var(--background);
		border-top-left-radius: 4px;
		padding: 6px;
	}
}