info {
	"name": "rich-editor",
	"type": "component"
}

template {
	<div class="dashboard-rich-editor" :class="{['dashboard-rich-editor-' + collection]: true, 'dashboard-file-hover': fileHover, ['dashboard-rich-editor-' + viewMode]: true}">
		<transition name="page-slide" mode="out-in">
			<div v-if="!viewMode" key="default">
				<div class="dashboard-rich-editor-bar">
					<h1>
						{{displayName}}
						<span class="dashboard-route" v-if="$store.state.dashboard.advanced">{{route}}</span>
					</h1>
					<div>
						<router-link to="create" append class="button success">
							<icon icon="add" left/> New
						</router-link>
					</div>
				</div>

				<rich-view :sortable="true" :bulk="true" :collection="collection" :route="route + '/list'" class="dashboard-products-block" ref="productView" :columns="columns">
					<template v-slot:column-name="p">
						<td>
							<router-link :to="'edit/' + p.entity.id" append>{{p.data}}</router-link>
						</td>
					</template>
				</rich-view>
			</div>
			<div class="dashboard-editor-main" v-if="viewMode == 'create' || viewMode == 'edit'" key="editor">
				<api-form status-location="top" ref="editingForm" :route="route + '/' + viewMode">
					<g-l class="space">
						<g-h purpose="header">
							<div class="dashboard-rich-editor-bar">
								<h1>
									{{viewMode == "create" ? "New" : "Update"}} {{displayName}}
								</h1>
								<div>
									<router-link :to="basePath" class="button danger">
										<icon icon="back" left/> {{viewMode == "create" ? "Cancel" : "Back"}}
									</router-link>
								</div>
							</div>
						</g-h>
						<g-h>
							<g-v m="9">
								<slot name="edit-main" :data="editingData">
									<card v-for="k in Object.keys(schema.schema)" :key="k">
										<template v-slot:body>
											<div>
												<div class="rich-editor-row">
													<input-rich-text v-if="k == 'description'" :placeholder="k" />
													<input-text :placeholder="k" v-else />
												</div>
											</div>
										</template>
									</card>
								</slot>
							</g-v>
							<g-v m="3">
								<slot name="edit-side" :data="editingData">
									<card>
										<g-h>
											<g-v s="6">
												<input-select :options="[{value: 'Draft', name: 'Draft', icon: 'send'}, {value: 'private', name: 'Private', icon: 'lock'}, {value: 'publish', name: 'Publish', icon: 'public'}]" v-model="editingData.displayStatus" />
											</g-v>
											<g-v s="5" shift="1">
												<button class="success" @click="create"><icon icon="add" left /> {{viewMode == "create" ? "Create" : "Update"}}</button>
											</g-v>
										</g-h>
									</card>
									<dashboard-card name="Tags">
										<dashboard-tags v-model="editingData.tags" />
									</dashboard-card>
									<dashboard-card name="Categories">
										<dashboard-categories v-model="editingData.categories" />
									</dashboard-card>
									<dashboard-card name="Featured Image">
										<input-media :multi="false" v-model="editingData.featuredImage" />
									</dashboard-card>
								</slot>
							</g-v>
						</g-h>
					</g-l>
				</api-form>
			</div>
		</transition>
	</div>
}

script {
	export default {
		props: {
			displayName: {
				type: String,
				required: true
			},
			collection: {
				type: String,
				required: true
			},
			route: {
				type: String,
				required: true
			},
			mode: {
				type: String
			},
			entity: {
				type: String
			},
			columns: {
				type: Object,
				default: () => ({
					"name": true,
					"displayStatus": true,
					"authors": true,
					"created": true,
					"modified": true
				})
			}
		},
		data: () => ({
			editingData: {},
			initialEditingData: {},
			tag: {id: ""}
		}),
		watch: {
			editingData(nv) {
				//console.log(nv);
			},
			viewMode() {
				if (this.viewMode == "create")
					this.createEditingData();
				else if (this.viewMode == "edit")
					this.loadEditingData();
			},
			entityId() {
				if (this.viewMode == "create")
					this.createEditingData();
				else if (this.viewMode == "edit")
					this.loadEditingData();
			}
		},
		methods: {
			async create() {
				if (this.viewMode == "create") {
					await this.$refs.editingForm.submit({
						document: this.websom.flattenDocument(this.editingData)
					});
				}else if (this.viewMode == "edit") {
					let changedFields = {};

					let eD = this.websom.flattenDocument(this.editingData);
					let iD = this.websom.flattenDocument(this.initialEditingData);

					for (let [k, v] of Object.entries(eD)) {
						if (JSON.stringify(v) != JSON.stringify(iD[k]))
							changedFields[k] = v;
					}

					await this.$refs.editingForm.submit({
						fields: "*",
						filter: "default",
						query: {
							id: this.entityId
						},
						document: changedFields
					});
				}
			},
			createEditingData() {
				this.editingData = {
					tags: [],
					categories: [],
					displayStatus: "Draft"
				};

				for (let k in this.schema.schema) {
					let type = this.schema.schema[k];
					let v = null;

					if (type == "string")
						v = "";
					else if (type == "integer" || type == "float")
						v = 0;
					else if (type == "array")
						v = [];
					else if (type == "map")
						v = {};
					else if (type == "boolean")
						v = false;

					this.$set(this.editingData, k, v);
				}
			},
			async loadEditingData() {
				let id = this.entityId;
				let res = await this.websom.fetch(this.route + "/get", {
					fields: "*",
					query: {
						id
					}
				});

				if (res.status == "error") {
					// Handle it
					return;
				}

				let entity = this.websom.makeEntity(this.collection, res.documents[0]);

				for (let [i, v] of entity.tags.entries())
					entity.tags[i] = {
						$collection: "tags",
						$fields: {
							name: true
						},
						id: v,
						name: entity.tagsCache[i]
					};

				this.editingData = {...entity};
				this.initialEditingData = {...entity};
			}
		},
		computed: {
			viewMode() {
				return this.mode || this.$route.params.mode;
			},
			entityId() {
				return this.entity ?
					(typeof this.entity == "object" ? this.entity.id : this.entity)
					:
					this.$route.params.id;
			},
			basePath() {
				let path = this.$route.path.split("/");
				let params = Object.keys(this.$route.params).filter(p => this.$route.params[p]).length;
				path.splice(path.length - params, params);
				return path.join("/");
			},
			schema() {
				return this.$store.state.websom.data.endpoints[this.collection];
			}
		},
		mounted() {
			if (!this.schema)
				console.error("Unable to find schema for collection " + this.collection + " in rich-editor. Did you forget to collectionInterface.exposeSchemaTo(permission)?");

			if (this.viewMode == "create")
				this.createEditingData();
			else if (this.viewMode == "edit") {
				this.loadEditingData();
			}
		}
	}
}

style {
	.dashboard-editor-main {
		width: 100%;
		margin: var(--base-size) auto !important;
	}

	.dashboard-route {
		color: var(--primary);
		opacity: 0.5;

		font-size: 0.5em;
	}

	.dashboard-rich-editor-bar {
		display: flex;
		flex-direction: row;
		justify-content: center;
		width: 100%;

		> * {
			flex: 1;
			margin: calc(var(--base-size) / 2);

			&:last-child {
				text-align: right;
			}
		}
	}

	.dashboard-rich-editor {
		display: flex;
		flex-direction: column;
		height: 100%;
		overflow: auto;

		> * {
			height: 100%;
			display: flex;
			flex-direction: column;
			margin: var(--base-size);
		}

		.rich-view {
			flex: 1;

			.rich-view-table-wrap, .rich-view-grid-wrap, .rich-view-layout-grid {
				height: 100%;

				.no-data {
					height: 100%;
				}
			}
		}
	}
}