info {
	"name": "websom-dashboard-files",
	"type": "page",
	"route": "files",
	"nested": "/websom.dashboard"
}

template {
	<div class="dashboard-files" :class="{'dashboard-file-hover': fileHover}">
		<div class="dashboard-rich-editor-bar">
			<h1>
				Media
			</h1>
			<div>
				<input-file button @input="upload"/>
			</div>
		</div>

		<router-view></router-view>

		<rich-view :sortable="true" :bulk="true" collection="/media" route="/media/view" class="dashboard-files-block" ref="mediaView">
			<template v-slot:grid="slotProps">
				<card class="dashboard-file-item full-image hover-title" :key="slotProps.entity.id">
					<img v-if="slotProps.entity.type.split('/')[0] == 'image'" slot="image" :src="slotProps.entity.file" />
					<icon v-else slot="image" :icon="getIconFor(slotProps.entity.type)" />

					<h4 slot="title"><router-link :to="slotProps.entity.id" append>{{slotProps.entity.name}}</router-link></h4>
				</card>
			</template>

			<template v-slot:column-created="s">
				<td key="created"><time-display :time="s.data" /></td>
			</template>

			<template v-slot:column-size="s">
				<td key="size">
					{{(s.data / (1024 * 1024)).toFixed(2)}} MB
				</td>
			</template>

			<template v-slot:column-name="s">
				<td key="name">
					<router-link :to="s.entity.id" append>{{s.data}}</router-link>
				</td>
			</template>

			<template v-slot:column-file="s">
				<td key="file">
					<icon v-if="s.entity.type.split('/')[0] != 'image'" :icon="getIconFor(s.entity.type)" />
					<div v-else class="dashboard-file-table-image">
						<img :src="s.data" />
					</div>
				</td>
			</template>

			<template v-slot:empty>
				<div key="empty" class="center-content dashboard-fill">
					<input-file @input="upload"/>
				</div>
			</template>
		</rich-view>

		<card class="dashboard-uploading" :class="{'dashboard-uploading-visible': uploading.length > 0}">
			<div slot="body">
				<card v-for="(file, i) in uploading" :key="file.name">
					<div slot="body">
						{{file.file.name}}

						<loader v-if="file.uploading" :value="file.progress" type="progress" class="card-loader" />

						<icon class="dashboard-upload-status" v-if="file.completed" icon="check" style="color: var(--success)"/>
						<icon class="dashboard-upload-status" v-if="file.error" icon="close" style="color: var(--danger)"/>
						<icon class="dashboard-upload-status" v-if="file.conflict" icon="warning" style="color: var(--warning)"/>
					</div>
					<action-bar slot="action" v-if="file.conflict">
						<button class="mute" @click="uploading.splice(i, 1)">
							Cancel
						</button>

						<button class="danger" @click="overwrite(file)">
							Overwrite
						</button>
					</action-bar>
				</card>
			</div>
		</card>
	</div>
}

script {
	export default {
		data: () => ({
			fileHover: false,
			uploading: []
		}),
		methods: {
			getIconFor(type) {
				let g = type.split("/")[0];

				return ({
					video: "video",
					audio: "audio"
				})[g] || "document";
			},
			async overwrite(file) {
				file.conflict = false;
				await this.uploadFile(file);
				
				for (let i = this.uploading.length - 1; i >= 0; i--)
					if (this.uploading[i].completed)
						this.uploading.splice(i, 1);
				
				this.$refs.mediaView.refresh();
			},
			async upload(files) {
				for (let file of files) {
					this.uploading.push({
						file,
						uploading: false,
						progress: 0,
						conflict: false,
						completed: false,
						error: false
					});
				}

				for (let [i, file] of this.uploading.entries()) {
					if (file.completed)
						continue;
					
					let res = await this.websom.fetch("/media/upload", {
						filename: file.file.name,
						size: file.file.size,
						type: file.file.type
					});

					file.uploadURL = res.data.uploadURL;

					if (res.data.conflict) {
						file.conflict = true;
					}else{
						file.uploading = true;

						await this.uploadFile(file);
					}
				}

				for (let i = this.uploading.length - 1; i >= 0; i--)
					if (this.uploading[i].completed)
						this.uploading.splice(i, 1);
				
				this.$refs.mediaView.refresh();
			},
			uploadFile(file) {
				return new Promise((resolve, rej) => {
						let req = new XMLHttpRequest();

						req.onreadystatechange = function () {
							if (this.readyState == 4) {
								if (this.status == 200) {
									file.completed = true;
									file.uploading = false;
									resolve();
								}else{
									file.error = true;
								}
							}
						};

						req.upload.onprogress = (e) => {
							file.progress = e.loaded / e.total;
						};

						req.open("POST", file.uploadURL);

						let data = new FormData();
						data.append("upload", file.file);

						req.send(data);
					});
			}
		},
		mounted() {
			this.$el.addEventListener("dragenter", (e) => {
				e.preventDefault();
				e.stopPropagation();
				this.fileHover = true;
			}, false);

			this.$el.addEventListener("dragleave", (e) => {
				e.preventDefault();
				e.stopPropagation();
				this.fileHover = false;
			}, false);

			this.$el.addEventListener("drop", (e) => {
				e.preventDefault();
				e.stopPropagation();

				this.fileHover = false;

				this.upload(e.dataTransfer.files);
			}, false);

			this.$el.addEventListener("dragover", (e) => {
				e.preventDefault();
				e.stopPropagation();
				this.fileHover = true;
			}, false);
		}
	}
}

style {
	.dashboard-files {
		display: flex;
		flex-direction: column;
		height: 100%;

		&.dashboard-file-hover {
			.dashboard-files-block {
				border: 4px dashed var(--primary);
			}
		}

		> * {
			margin: var(--base-size);
		}
	}

	.dashboard-files-block {
		flex: 1;
		background: var(--background-overlay);
		border: 4px solid transparent;

		overflow: auto;
	}

	.dashboard-fill {
		height: 100%;
	}

	.dashboard-uploading {
		background: var(--background-tint) !important;
		position: fixed !important;
		bottom: var(--base-size);
		right: var(--base-size);
		width: 300px;
		height: 300px;

		overflow: auto;

		opacity: 0;

		pointer-events: none;

		&.dashboard-uploading-visible {
			opacity: 1;
			pointer-events: all;
		}
	}

	.dashboard-upload-status {
		position: absolute;
		right: var(--base-size);

	}

	.dashboard-file-item {
		background: var(--background-tint) !important;

		.card-images {
			background-image: linear-gradient(45deg, #808080 25%, transparent 25%), linear-gradient(-45deg, #808080 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #808080 75%), linear-gradient(-45deg, transparent 75%, #808080 75%);
			background-size: 20px 20px;
			background-position: 0 0, 0 10px, 10px -10px, -10px 0px;
		}
	}

	.dashboard-file-table-image {
		width: 56px;
		height: 56px;

		display: flex;
		align-items: center;
		justify-content: center;

		background-image: linear-gradient(45deg, #808080 25%, transparent 25%), linear-gradient(-45deg, #808080 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #808080 75%), linear-gradient(-45deg, transparent 75%, #808080 75%);
		background-size: 20px 20px;
		background-position: 0 0, 0 10px, 10px -10px, -10px 0px;

		img {
			max-width: 90%;
			max-height: 90%;
		}
	}
}