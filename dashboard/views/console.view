info {
	"name": "websom-console"
}

template {
	<div class="websom-console" @click="focus()">
		<div class="websom-console-log">
			<template v-for="(v, i) in log">
				<div v-if="typeof v == 'string'" v-html="v"></div>
				<div v-else :style="'color: ' + v.color + ';'" v-html="v.message"></div>
			</template>
		</div>
		<div class="websom-console-line"><span><icon fa :icon="authenticated ? 'angle-right' : 'key'"></icon></span><input ref="input" :type="authenticated ? 'text' : (user != null && pass == null ? 'password' : 'text')" @keyup.enter="sendCommand()" @keyup.up="upLog()" @keyup.down="downLog()" v-model="command"/></div>
	</div>
}

client {
	data: function () {
		return {
			curLog: 0,
			inputLog: [],
			log: [],
			command: "",
			user: null,
			pass: null,
			authenticated: false,
			info: {},
			cache: null
		};
	},
	created: function () {
		DashboardBridge.awaitInfo().then((data) => {
			this.info = data;
			this.authenticated = this.info.status;

			if (!this.authenticated) {
				this.log.push("Username:");
			}
		});
	},
	methods: {
		process: function (command) {
			if (command.status == "error") {
				this.log.push({color: "red", message: command.message});
			}else{
				this.log.push(command.message);
			}
		},
		sendRequest: function (data, gchunk, finish) {
			$.post("/websom.run.command", data, (out) => {
				finish(out);
			});
		},
		sendCommand: function () {
			if (!this.authenticated) {
				if (this.user == null) {
					this.user = this.command;
					this.log.push(this.user);
					this.log.push("Password:");
				}else{
					this.pass = this.command;
					
					DashboardBridge.login(this.user, this.pass).then((data) => {
						if (data.hadError) {
							this.log.push(data.error);
							this.user = null;
							this.pass = null;
							this.log.push("Username:");
						}else {
							this.info = data;
							this.authenticated = this.info.status;
							this.log.push("Logged in");
						}
					});
				}
			}else{
				if (this.command == "")	 {
					this.log.push("\n");
					return;
				}

				this.log.push('<span style="margin-left: -1em; font-family: monospace; font-weight: bold;">></span> ' + this.command.replace("<", "&lt;"));
				this.inputLog.unshift(this.command);
				this.cache = null;
				this.curLog = 0;

				this.sendRequest({command: this.command}, (txt) => {
					
				}, (txt) => {
					let parsed = JSON.parse(txt);
					if (Array.isArray(parsed)) {
						for (let p of parsed)
							this.process(p);
					}else{
						this.process(parsed);
					}
				});
			}

			this.command = "";
		},
		focus: function () {
			$(this.$refs.input).focus();
		},
		upLog: function () {
			if (this.curLog == 0)
				this.cache = this.command;
			
			if (this.curLog < this.inputLog.length) {
				this.command = this.inputLog[this.curLog];
				this.curLog++;
			}
		},
		downLog: function () {
			if (this.curLog > 0) {
				this.curLog--;
				this.command = this.inputLog[this.curLog];

				if (this.curLog == -1)
					this.command = this.cache;
			}else{
				this.command = this.cache;
			}
		}
	}
}