info {
	"name": "dashboard-builder",
	"type": "component"
}

template {
	<div :class="'dashboard-builder ' + theme">
		<div :class="'builder-head ' + theme">
			<ul class="dropdown">
				<span><icon fa>file</icon></span>
				<li><a>New</a></li>
				<li><a>Open</a></li>
				<li><a>Save</a></li>
				<li><a>Exit</a></li>
			</ul>
			<button class="button right" @click="theme = theme == 'dark' ? 'light' : 'dark'">{{theme}}</button>
			<button class="button right" @click="mode = mode == 'simple' ? 'design' : 'simple'">{{mode}}</button>
		</div>
		<div style="" class="builder-body">
			
			<div :class="'builder-toolbox ' + theme">
				<div class="input-box">
					<span class="icon"><icon fa>search</icon></span>
					<input v-model="search" type="text" class="input" placeholder="Search"/>
				</div>
				<div v-for="(group, gName) in groups">
					<label class="header">{{gName}}</label>
					<div v-for="(block, name, index) in blocks" v-if="typeof block.display == 'function' && block.group() == gName && (reg.test(gName) || reg.test(name) || reg.test(block.description()))" @dblclick="setRoot(block)" class="block editor-block" data-type="block" :data-node="name">
						<img v-if="block.displayImage" :src="block.displayImage()"/>
						<icon fa v-if="block.displayIcon">{{block.displayIcon()}}</icon>

						<label>{{name}}</label>
					</div>
				</div>
			</div>
			<div :class="'builder-view ' + theme">
				<div ref="view" style="padding: 1px;" :class="{'no-root': rootBlock === null}">
					<div class="empty-block" v-if="rootBlock === null">
						<div>
							<icon fa>caret-square-down</icon>
							<div>Empty root block<br>Double click a block to set it as the root</div>
						</div>
					</div>
					<view-editor v-else :studio="this" :block="rootBlock"/>
				</div>
			</div>
			<div :class="'builder-design-panel ' + theme + ' ' + (mode == 'design' ? '' : 'closed')">
				<div v-if="selected !== null">
					<div class="editor-row icon-list">
						<icon fa>align-left</icon>
						<icon fa>align-center</icon>
						<icon fa>align-right</icon>
						<icon fa>align-justify</icon>
					</div>
					<div class="editor-row editor-transform">
						<label class="header">Transform</label>
						<div class="transform-row">
							<div class="input-group"><label>X</label> <input type="text"/></div>
							<div class="input-group"><label>Y</label> <input type="text"/></div>
						</div>
						<div class="transform-row">
							<div class="input-group"><label>W</label> <input type="text"/></div>
							<div class="input-group"><label>H</label> <input type="text"/></div>
						</div>
					</div>
					<div class="editor-row editor-transform">
						<label class="header">Appearance</label>
						<div>
							<div class="input-group"><input type="checkbox" :checked="'background' in selected.style"/> <input type="color" v-model="selected.style.background"/> <label>Fill</label></div>
							<div class="input-group"><input type="checkbox" :checked="'color' in selected.style"/> <input type="color" v-model="selected.style.color"/> <label>Text</label></div>
							<div class="input-group"><input type="checkbox" :checked="'border-color' in selected.style"/> <input type="color" v-model="selected.style['border-color']"/> <label>Border</label> <input type="text" v-model="selected.style['border-width']"/><select v-model="selected.style['border-style']"><option value="solid">Solid</option></select></div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}

client {
	props: ["data"],
	data: function () {
		return {
			theme: "dark",
			mode: "design",
			rootBlock: null,
			selected: null,
			views: {},
			basicViews: [],
			search: "",
			groups: {}
		};
	},
	computed: {
		blocks: function () {
			return window.Websom.Editor.Blocks;
		},
		reg: function () {
			return new RegExp(this.search, "i");
		}
	},
	methods: {
		setRoot: function (block) {
			if (this.rootBlock === null) {
				this.rootBlock = new block();
			}
		},
		loadFromHref: function() {
			var splits = window.location.href.split("/");
			var searchIn = this.views.views;
			if (splits[splits.length - 2] == "override") {
				searchIn = this.views.overrides;
			}
			var name = splits[splits.length - 1];
			var found = null;
			for (var i = 0; i < searchIn.length; i++)
				if (searchIn[i].name == name)
					found = searchIn[i];

			if (found) {
				this.loadFile(found.location);
			}else{
				Websom.Theme.toast("Error opening view " + name);
			}
		},
		loadFile: function (file) {
			DashboardBridge.readFile(file).then((raw) => {
				var view = Websom.Editor.viewParser(raw);
				this.rootBlock = Websom.Editor.loadBlock(Websom.Editor.parseBlock(view.template));
				Websom.Editor.listenForToolbox();
			});
		},
		buildBasicViews: function () {
			for (var i = 0; i < this.views.useViews.length; i++) {
				((view) => {
					Websom.Editor.Blocks[view.name] = (class extends Websom.Editor.Block {
						static display() {return view.name;}
						static displayIcon() {return "eye";}
						static description() {return view.meta.description || "";}
						nodeName() {return view.name;}
						static group() {return view.module || "website";}

						render(createElement, vm) {
							return super.simpleRender(view.name, createElement, vm, true);
						}
					});
				})(this.views.useViews[i]);
			}
			this.groups = this.getGroups();
		},
		getGroups: function () {
			var groups = {};
			for (var i in Websom.Editor.Blocks)
				if (Websom.Editor.Blocks[i].group)
					if (!(Websom.Editor.Blocks[i].group() in groups))
						groups[Websom.Editor.Blocks[i].group()] = true;
			
			return groups;
		}
	},
	created: function () {
		this.groups = this.getGroups();
	},
	mounted: function () {
		
		$.getScript("https://cdn.jsdelivr.net/npm/interactjs@1.3.3/dist/interact.min.js", () => {
			Websom.Editor.listenForToolbox();
			DashboardBridge.getBuilderViews().then((views) => {
				this.views = {views: views.views.concat(views.pages), overrides: views.website, useViews: views.website.concat(views.views)};
				this.buildBasicViews();
				this.loadFromHref();
			});
		});

		var zoom = 1;
		var rotate = 0;

		document.onmousewheel = (e) => {
			if (e.ctrlKey) {
				if (e.deltaY < 0.5)
					zoom += 0.1;
				else
					zoom -= 0.1;

				if (zoom < 0.1)
					zoom = 0.1;

				e.preventDefault();
			}

			if (e.altKey) {
				if (e.deltaY < 0.5)
					rotate += 15;
				else
					rotate -= 15;

				if (Math.abs(rotate) == 360)
					rotate = 0;

				e.preventDefault();
			}

			if (zoom != 1 || rotate != 0)
				this.$refs.view.style.transform = "scale(" + zoom + ") rotate(" + rotate + "deg)";
			else
				this.$refs.view.removeAttribute("style");
		}
		
	}
}