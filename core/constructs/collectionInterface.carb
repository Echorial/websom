class Websom.CollectionInterface {
	<Websom.CollectionInterfaceRoute>array routes = new <Websom.CollectionInterfaceRoute>array();

	string baseRoute = "";
	
	bool exposeSchema = false;
	Websom.Permission exposedTo = null;

	Websom.Adapters.Database.Collection collection = null;

	trust void @construct(Websom.Adapters.Database.Collection collection, string route) {
		this.baseRoute = route;
		this.collection = collection;
	}

	Websom.CollectionInterface route(string route) {
		this.routes.push(new Websom.CollectionInterfaceRoute(this, route));
		return this;
	}

	Websom.CollectionInterface generateSearchEndpoint(<string>array excludeFields, Websom.Permission permission) {
		let fieldsForSearching = new <string>array();

		this.route("/view")
			.auth(permission)
			.executes("search");

		if (this.collection.appliedSchema != null) {
			for (let int i in this.collection.appliedSchema.fields) {
				let field = this.collection.appliedSchema.fields[i];
				
				if (excludeFields.includes(field.name) == false) {
					fieldsForSearching.push(field.name);
					this.read(field.name);
				}
			}
		}

		this.filter("default")
			.field("name", "==");

		this.collection.enableSearching(fieldsForSearching);

		return this;
	}

	Websom.CollectionInterface exposeSchemaTo(Websom.Permission perm) {
		this.exposedTo = perm;
		this.exposeSchema = true;
		return this;
	}

	Websom.CollectionInterface auth(Websom.Permission permission) {
		let perm = new Websom.PermissionAuthenticator(permission);
		perm.server = this.collection.database.server;
		this.routes[this.routes.length - 1].authenticators.push(perm);
		return this;
	}

	Websom.CollectionInterface auth(<bool, Websom.Request>function func) {
		let auth = new Websom.FunctionAuthenticator(func);
		auth.server = this.collection.database.server;
		this.routes[this.routes.length - 1].authenticators.push(auth);
		return this;
	}

	Websom.CollectionInterface executes(string executes) {
		this.routes[this.routes.length - 1].executes = executes;
		return this;
	}

	Websom.CollectionInterface write(string field) {
		this.routes[this.routes.length - 1].writes.push(new Websom.CollectionInterfaceWrite(field, null));
		return this;
	}

	Websom.CollectionInterface write(string field, primitive defaultValue) {
		this.routes[this.routes.length - 1].writes.push(new Websom.CollectionInterfaceWrite(field, defaultValue));
		return this;
	}

	Websom.CollectionInterface limit(int min, int max) {
		return this.restrict(new Websom.Restrictions.Limit(min, max));
	}

	Websom.CollectionInterface format(string format) {
		return this.restrict(new Websom.Restrictions.Format(format));
	}

	Websom.CollectionInterface regexTest(string reg) {
		return this.restrict(new Websom.Restrictions.Regex(reg));
	}

	Websom.CollectionInterface unique() {
		return this.restrict(new Websom.Restrictions.Unique());
	}

	Websom.CollectionInterface restrict(Websom.Restriction restriction) {
		let writes = this.routes[this.routes.length - 1].writes;
		writes[writes.length - 1].restrictions.push(restriction);
		return this;
	}

	Websom.CollectionInterface restrict(<bool, Websom.Adapters.Database.Collection, Websom.Adapters.Database.Field, primitive>function func) {
		return this.restrict(new Websom.Restrictions.Function(func));
	}

	Websom.CollectionInterface set(string field, primitive defaultValue) {
		this.routes[this.routes.length - 1].sets.push(new Websom.CollectionInterfaceWriteSet(field, defaultValue));
		return this;
	}

	Websom.CollectionInterface setComputed(string field, <primitive, Websom.Request>function func) {
		this.routes[this.routes.length - 1].computedSets.push(new Websom.CollectionInterfaceWriteSetComputed(field, func));
		return this;
	}

	Websom.CollectionInterface read(string field) {
		this.routes[this.routes.length - 1].reads.push(new Websom.CollectionInterfaceRead(field));
		return this;
	}

	trust Websom.CollectionInterface transform(Websom.Transformer transformer) {
		let reads = this.routes[this.routes.length - 1].reads;
		reads[reads.length - 1].transformers.push(transformer);
		return this;
	}

	Websom.CollectionInterface mutate(<primitive, Websom.Adapters.Database.Collection, Websom.Request, primitive>function func) {
		let writes = this.routes[this.routes.length - 1].writes;
		writes[writes.length - 1].mutators.push(new Websom.Mutators.Function(func));
		return this;
	}

	Websom.CollectionInterface filter(string name) {
		this.routes[this.routes.length - 1].filters.push(new Websom.CollectionInterfaceFilter(name));
		return this;
	}

	Websom.CollectionInterface filter(string name, <void, Websom.Request, Websom.Adapters.Database.SelectQuery>function handler) {
		let filter = new Websom.CollectionInterfaceFilter(name);
		filter.handler = handler;

		this.routes[this.routes.length - 1].filters.push(filter);
		return this;
	}

	Websom.CollectionInterface field(string name, string operator) {
		return this.field(name, operator, null);
	}

	Websom.CollectionInterface field(string name, string operator, primitive value) {
		let filters = this.routes[this.routes.length - 1].filters;
		filters[filters.length - 1].fields.push(new Websom.CollectionInterfaceFieldSet(name, operator, value));
		return this;
	}

	Websom.CollectionInterface fieldComputed(string name, string operator, <primitive, Websom.Request>function func) {
		let filters = this.routes[this.routes.length - 1].filters;
		filters[filters.length - 1].computed.push(new Websom.CollectionInterfaceFieldSetComputed(name, operator, func));
		return this;
	}

	Websom.CollectionInterface force(string name, string operator, primitive value) {
		let filters = this.routes[this.routes.length - 1].filters;
		filters[filters.length - 1].forces.push(new Websom.CollectionInterfaceFieldSet(name, operator, value));
		return this;
	}

	Websom.CollectionInterface order(string name, string order) {
		return this.order(name, order, false);
	}

	Websom.CollectionInterface order(string name, string order, bool clientControlled) {
		let filters = this.routes[this.routes.length - 1].filters;
		filters[filters.length - 1].orders.push(new Websom.CollectionInterfaceFieldSet(name, order, clientControlled));
		return this;
	}

	Websom.CollectionInterface on(string hook, <void, Websom.Request, <Websom.Adapters.Database.Document>array>function func) {
		this.routes[this.routes.length - 1].hooks[hook] = func;
		return this;
	}

	Websom.CollectionInterface beforeUpdate(<void, Websom.Request, Websom.Adapters.Database.UpdateQuery>function func) {
		this.routes[this.routes.length - 1].beforeUpdateHandler = func;
		return this;
	}

	Websom.CollectionInterface beforeWrite(<void, Websom.APIContext>function func) {
		this.routes[this.routes.length - 1].beforeWriteHandler = func;
		return this;
	}

	Websom.CollectionInterface validateEachDocument(<bool, Websom.APIContext, Websom.Adapters.Database.Document>function func) {
		this.routes[this.routes.length - 1].validateTouchesHandler = func;
		return this;
	}
}

class Websom.CollectionInterfaceRoute {
	Websom.CollectionInterface collection = null;

	<Websom.Authenticator>array authenticators = new <Websom.Authenticator>array();
	<Websom.CollectionInterfaceRead>array reads = new <Websom.CollectionInterfaceRead>array();
	<Websom.CollectionInterfaceWrite>array writes = new <Websom.CollectionInterfaceWrite>array();
	<Websom.CollectionInterfaceWriteSet>array sets = new <Websom.CollectionInterfaceWriteSet>array();
	<Websom.CollectionInterfaceWriteSetComputed>array computedSets = new <Websom.CollectionInterfaceWriteSetComputed>array();
	<Websom.CollectionInterfaceFilter>array filters = new <Websom.CollectionInterfaceFilter>array();
	<<void, Websom.Request, <Websom.Adapters.Database.Document>array>function>map hooks = new <<void, Websom.Request, <Websom.Adapters.Database.Document>array>function>map();

	<void, Websom.Request, Websom.Adapters.Database.UpdateQuery>function beforeUpdateHandler = null;
	<void, Websom.APIContext>function beforeWriteHandler = null;
	<void, Websom.APIContext, Websom.Adapters.Database.Document>function validateTouchesHandler = null;

	string route = "";

	string executes = "";

	void @construct(Websom.CollectionInterface collection, string route) {
		this.collection = collection;
		this.route = route;
	}

	Websom.CollectionInterfaceFilter findFilter(string name) {
		return this.filters.find(bool (Websom.CollectionInterfaceFilter filter) => {
			return filter.name == name;
		});
	}

	void trigger(string hook, Websom.Request req, <Websom.Adapters.Database.Document>array docs) {
		if (this.hooks.hasKey(hook))
			this.hooks[hook](req, docs);
	}
}

header class Websom.Restriction {
	void @construct() {}

	[ForceAsync]
	trust bool testServer(Websom.Adapters.Database.Collection collection, Websom.Adapters.Database.Field field, primitive value) {}

	string testClient() {}

	string message(string fieldName, primitive value) {
		return this.name() + " failed on field " + fieldName + ".";
	}

	string name() {
		return "Restriction";
	}

	map exposeToClient() {
		return new map();
	}
}

namespace Websom.Restrictions {}

header class Websom.Restrictions.Limit inherits Websom.Restriction {
	int min = 0;
	int max = 0;

	void @construct(int min, int max) {
		this.min = min;
		this.max = max;
	}

	[ForceAsync]
	override trust bool testServer(Websom.Adapters.Database.Collection collection, Websom.Adapters.Database.Field field, primitive value) {
		if (field.type == "string") {
			let string castToString = value;

			return castToString.length >= this.min and castToString.length <= this.max;
		}else if (field.type == "integer" or field.type == "float") {
			let float castToFloat = value;

			return castToFloat >= this.min and castToFloat <= this.max;
		}else if (field.type == "array") {
			let <primitive>array castToArray = value;
			
			return castToArray.length >= this.min and castToArray.length <= this.max;
		}else{
			throw "Limit restriction only works on fields of type: string, integer, float, and array";
		}
	}

	override string name() {
		return "Limit";
	}

	override map exposeToClient() {
		let mp = new map();

		mp["min"] = this.min;
		mp["max"] = this.max;
		mp["type"] = "limit";

		return mp;
	}
}

header class Websom.Restrictions.Unique inherits Websom.Restriction {
	string uniqueRoute = "";

	[ForceAsync]
	override trust bool testServer(Websom.Adapters.Database.Collection collection, Websom.Adapters.Database.Field field, primitive value) {
		return collection.where(field.name, "==", value).limit(1).get().documents.length == 0;
	}

	override string name() {
		return "Unique";
	}

	override map exposeToClient() {
		let mp = new map();

		mp["route"] = this.uniqueRoute;
		mp["type"] = "unique";

		return mp;
	}
}

header class Websom.Restrictions.Format inherits Websom.Restriction {
	string format = "";

	void @construct(string format) {
		this.format = format;
	}

	[ForceAsync]
	override trust bool testServer(Websom.Adapters.Database.Collection collection, Websom.Adapters.Database.Field field, primitive value) {
		let string valueAsString = value;

		if (this.format == "email") {
			// return valueAsString.test("^([^@]+)(@)(.+)(\\.)([^.]{2,})$");
			// A better version of the above is now used:
			return valueAsString.test("^(([^<>()\\[\\]\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\]\\.,;:\\s@\"]+\\.)+[^<>()[\\]\\.,;:\\s@\"]{2,})");
		}else if (this.format == "single-line") {
			return valueAsString.test("^([^\\n]*)$");
		}else if (this.format == "number") {
			return valueAsString.test("^(-)?([\d.,]*)$");
		}
	}

	override string name() {
		return "Format";
	}

	override map exposeToClient() {
		let mp = new map();

		mp["format"] = this.format;
		mp["type"] = "format";

		return mp;
	}
}

header class Websom.Restrictions.Regex inherits Websom.Restriction {
	string regex = "";

	void @construct(string regex) {
		this.regex = regex;
	}

	[ForceAsync]
	override trust bool testServer(Websom.Adapters.Database.Collection collection, Websom.Adapters.Database.Field field, primitive value) {
		let string valueAsString = value;
		
		return valueAsString.test(this.regex);
	}

	override string name() {
		return "Regex";
	}

	override map exposeToClient() {
		let mp = new map();

		mp["regex"] = this.regex;
		mp["type"] = "regex";

		return mp;
	}
}

header class Websom.Restrictions.Function inherits Websom.Restriction {
	<bool, Websom.Adapters.Database.Collection, Websom.Adapters.Database.Field, primitive>function tester = null;

	void @construct(<bool, Websom.Adapters.Database.Collection, Websom.Adapters.Database.Field, primitive>function func) {
		this.tester = func;
	}

	[ForceAsync]
	override trust bool testServer(Websom.Adapters.Database.Collection collection, Websom.Adapters.Database.Field field, primitive value) {
		native javascript {
			return await this.tester(collection, field, value);
		}
		
		native php {
			return $this->tester($collection, $field, $value);
		}
	}

	override string name() {
		return "Function";
	}
}

header class Websom.Transformer {
	void @construct() {}

	[ForceAsync]
	primitive transform(Websom.Request req, Websom.Adapters.Database.Document doc, string field, primitive value) {}
}

namespace Websom.Mutators {}

header class Websom.Mutator {
	void @construct() {}

	[ForceAsync]
	trust primitive mutate(Websom.Adapters.Database.Collection collection, Websom.Request req, primitive value) {}
}

header class Websom.Mutators.Function inherits Websom.Mutator {
	<primitive, Websom.Adapters.Database.Collection, Websom.Request, primitive>function mutator = null;

	void @construct(<primitive, Websom.Adapters.Database.Collection, Websom.Request, primitive>function func) {
		this.mutator = func;
	}

	[ForceAsync]
	override trust primitive mutate(Websom.Adapters.Database.Collection collection, Websom.Request req, primitive value) {
		native javascript {
			return await this.mutator(collection, req, value);
		}
		
		native php {
			return $this->mutator($collection, $req, $value);
		}
	}
}

header class Websom.Authenticator {
	Websom.Server server = null;

	void @construct() {}

	[ForceAsync]
	bool authenticate(Websom.Request req) {}

	string errorMessage(Websom.Request req) {
		return "Authentication failed";
	}
}

class Websom.PermissionAuthenticator inherits Websom.Authenticator {
	Websom.Permission permission = null;

	void @construct(Websom.Permission permission) {
		this.permission = permission;
	}

	[ForceAsync]
	bool authenticate(Websom.Request req) {
		return this.server.security.authenticateRequest(req, this.permission);
	}
}

class Websom.FunctionAuthenticator inherits Websom.Authenticator {
	<bool, Websom.Request>function func = null;

	void @construct(<bool, Websom.Request>function func) {
		this.func = func;
	}

	[ForceAsync]
	bool authenticate(Websom.Request req) {
		native javascript {
			await this.func(req);
		}

		native php {
			return $this->func($req);
		}
	}
}

class Websom.CollectionInterfaceRead {
	<Websom.Transformer>array transformers = new <Websom.Transformer>array();
	string field = "";

	void @construct(string field) {
		this.field = field;
	}
}

class Websom.CollectionInterfaceWrite {
	<Websom.Restriction>array restrictions = new <Websom.Restriction>array();
	<Websom.Mutator>array mutators = new <Websom.Mutator>array();
	string field = "";
	primitive defaultValue = null;
	string type = "";

	void @construct(string field, primitive defaultValue) {
		this.field = field;
		this.defaultValue = defaultValue;
	}

	map exposeToClient() {
		let mp = new map();

		mp["type"] = this.type;
		mp["field"] = this.field;
		mp["default"] = this.defaultValue;

		let restrictions = new <map>array();

		for (let int i in this.restrictions) {
			let restriction = this.restrictions[i];

			restrictions.push(restriction.exposeToClient());
		}

		mp["restrictions"] = restrictions;

		return mp;
	}
}

class Websom.CollectionInterfaceWriteSet {
	string field = "";
	primitive value = null;

	void @construct(string field, primitive value) {
		this.field = field;
		this.value = value;
	}
}

class Websom.CollectionInterfaceWriteSetComputed {
	string field = "";
	<primitive, Websom.Request>function computer = null;

	void @construct(string field, <primitive, Websom.Request>function func) {
		this.field = field;
		this.computer = func;
	}

	[ForceAsync]
	primitive compute(Websom.Request req) {
		native javascript {
			return await this.computer(req);
		}

		native php {
			return $this->computer($req);
		}
	}
}

class Websom.CollectionInterfaceFieldSet {
	string name = "";
	string operator = "";
	primitive value = null;

	void @construct(string name, string operator, primitive value) {
		this.name = name;
		this.operator = operator;
		this.value = value;
	}
}

class Websom.CollectionInterfaceFieldSetComputed {
	string name = "";
	string operator = "";
	<primitive, Websom.Request>function handler = null;

	void @construct(string name, string operator, <primitive, Websom.Request>function func) {
		this.name = name;
		this.operator = operator;
		this.handler = func;
	}
}

class Websom.CollectionInterfaceFilter {
	<Websom.CollectionInterfaceFieldSet>array fields = new <Websom.CollectionInterfaceFieldSet>array();
	<Websom.CollectionInterfaceFieldSetComputed>array computed = new <Websom.CollectionInterfaceFieldSetComputed>array();
	<Websom.CollectionInterfaceFieldSet>array forces = new <Websom.CollectionInterfaceFieldSet>array();
	<Websom.CollectionInterfaceFieldSet>array orders = new <Websom.CollectionInterfaceFieldSet>array();

	string name = "";

	<int>array limits = new <int>array();

	bool paginate = true;

	<void, Websom.Request, Websom.Adapters.Database.SelectQuery>function handler = null;

	void @construct(string name) {
		this.limits.push(25);

		this.name = name;
	}
}