class Websom.SelectHandler inherits Websom.EndpointHandler {
	override void fulfill(Websom.CollectionInterfaceRoute cir, Websom.Request req) {
		let filterName = req.body["filter"];
		if (filterName.typeAsString() != "string") {
			filterName = "default";
		}

		let filter = cir.findFilter(filterName);
		
		if (filter == null) {
			req.endWithError("Unknown filter provided");

			return null;
		}

		let collection = cir.collection.collection;
		let query = collection.select();

		let out = this.buildQuery(cir, filter, req, query);

		if (out == null)
			return null;

		this.executeQuery(cir, filter, req, query);
	}

	override Websom.Adapters.Database.SelectQuery buildQuery(Websom.CollectionInterfaceRoute cir, Websom.CollectionInterfaceFilter filter, Websom.Request req, Websom.Adapters.Database.SelectQuery query) {
		let collection = cir.collection.collection;

		let limit = filter.limits[0];

		if ("limit" in req.body) {
			let reqLimit = req.body["limit"];

			for (let int i in filter.limits) {
				let l = filter.limits[i];

				if (reqLimit == l)
					limit = l;
			}
		}

		let offset = 0;

		if ("page" in req.body) {
			let page = req.body["page"];
			if (page.typeAsString() == "float") {
				let float pageAsFloat = page;
				if (pageAsFloat.isInteger())
					offset = pageAsFloat * limit;
			}
		}

		query.startOffset(offset);
		query.limit(limit);

		for (let int i in filter.forces) {
			let force = filter.forces[i];

			query.where(force.name, force.operator, force.value);
		}

		for (let int i in filter.orders) {
			let order = filter.orders[i];

			let ordered = false;

			if ("order" in req.body) {
				let map clientOrder = req.body["order"];

				if (clientOrder.typeAsString() == "map") {
					let string orderField = clientOrder["field"];
					let string orderDirection = clientOrder["direction"];

					if (orderField.typeAsString() == "string") {
						let allowed = false;

						let schema = collection.appliedSchema;

						if (order.name == "*") {
							for (let int f in schema.fields) {
								let schemaField = schema.fields[f];

								if (schemaField.name == orderField)
									allowed = true;
							}
						}else if (order.name == orderField) {
							allowed = true;
						}
						
						if (orderDirection != "dsc" and orderDirection != "asc")
							allowed = false;

						if (allowed) {
							query.orderBy(orderField, orderDirection);
							ordered = true;
						}
					}
				}
			}
			
			if (ordered == false) {
				if (order.name == "*")
					query.orderBy("id", order.operator);
				else
					query.orderBy(order.name, order.operator);
			}
		}

		let map clientQuery = req.body["query"];

		if (clientQuery.typeAsString() != "map") {
			req.endWithError("Query must be an object. ( e.g. { name: Hello } )");
			return null;
		}

		for (let int i in filter.fields) {
			let field = filter.fields[i];

			if (field.name in clientQuery) {
				query.where(field.name, field.operator, clientQuery[field.name]);
			}else{
				req.endWithError("No query for field '" + field.name + "' was provided.");
				return null;
			}
		}

		for (let int i in filter.computed) {
			let field = filter.computed[i];
			let primitive value = null;
			
			native javascript {
				value = await field.handler(req);
			}
			
			native php {
				$value = $field->handler($req);
			}

			if (req.sent)
				return null;

			query.where(field.name, field.operator, value);
		}

		if (filter.handler != null) {
			native javascript {
				await filter.handler(req, query);
			}

			native php {
				$filter->handler($req, $query);
			}
		}

		if (req.sent) {
			return null;
		}

		return query;
	}

	void executeQuery(Websom.CollectionInterfaceRoute cir, Websom.CollectionInterfaceFilter filter, Websom.Request req, Websom.Adapters.Database.SelectQuery query) {
		let collection = cir.collection.collection;

		let res = new map();

		res["status"] = "success";
		res["message"] = "Query successful!";
		let output = new <map>array();

		let results = query.get();

		let returnFields = req.body["fields"];

		if (returnFields.typeAsString() != "map") {
			req.endWithError("No fields object provided. See the api request docs.");
			return null;
		}

		for (let int i in results.documents) {
			let doc = results.documents[i];
			let mp = new map();

			if (cir.reads.length > 0) {
				if (cir.reads[0].field == "*") {
					if (collection.appliedSchema == null) {
						req.endWithError("This collection has no schema applied");
						return null;
					}

					let schema = collection.appliedSchema;

					for (let int f in schema.fields) {
						let field = schema.fields[f];
						mp[field.name] = doc.get(field.name);
					}
				}
			}

			for (let int j in cir.reads) {
				let read = cir.reads[j];

				if (read.field in returnFields or "*" in returnFields) {
					let val = doc.get(read.field);

					for (let int t in read.transformers) {
						let transformer = read.transformers[t];

						val = transformer.transform(req, doc, read.field, val);
					}

					mp[read.field] = val;
				}
			}

			if ("*" in returnFields) {
				mp["id"] = doc.get("id");
			}

			output.push(mp);
		}

		res["documents"] = output;

		cir.trigger("success", req, results.documents);

		req.header("Content-Type", "application/json");
		//req.header("Access-Control-Allow-Origin", "*");
		req.end(Websom.Json.encode(res));
	}
}