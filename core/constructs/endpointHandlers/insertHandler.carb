class Websom.InsertHandler inherits Websom.EndpointHandler {
	override void fulfill(Websom.CollectionInterfaceRoute cir, Websom.Request req) {
		let collection = cir.collection.collection;

		if (collection.appliedSchema == null) {
			req.endWithError("This collection has no schema applied");
			return null;
		}

		if (req.body.hasKey("document") == false) {
			req.endWithError("No document provided");
			return null;
		}

		let map clientValues = req.body["document"];

		if (clientValues.typeAsString() != "map") {
			req.endWithError("Document must be an object");
			return null;
		}

		let query = collection.insert();

		for (let int i in cir.sets) {
			let set = cir.sets[i];

			query.set(set.field, set.value);
		}

		for (let int i in cir.computedSets) {
			let set = cir.computedSets[i];

			query.set(set.field, set.compute(req));
		}

		// Wildcard write
		if (cir.writes.length == 1 and cir.writes[0].field == "*") {
			for (let string k in clientValues) {
				let clientValue = clientValues[k];
					
				let schemaField = collection.appliedSchema.getField(k);

				if (schemaField == null) {
					req.endWithError("Field '" + k + "' has no schema type");
					return null;
				}

				if (this.typeCheck(clientValue, schemaField)) {
					query.set(k, clientValue);
				}
			}
		}else{
			for (let int i in cir.writes) {
				let write = cir.writes[i];

				if (clientValues.hasKey(write.field) == false) {
					req.endWithError("Field '" + write.field + "' must not be null");
					return null;
				}

				if (clientValues[write.field] == null) {
					req.endWithError("Field '" + write.field + "' must not be null");
					return null;
				}

				let clientValue = clientValues[write.field];

				let schemaField = collection.appliedSchema.getField(write.field);

				if (schemaField == null) {
					req.endWithError("Field '" + write.field + "' has no schema type");
					return null;
				}

				if (this.typeCheck(clientValue, schemaField)) {
					for (let int r in write.restrictions) {
						let restriction = write.restrictions[r];
						try {
							if (restriction.testServer(collection, schemaField, clientValue) == false) {
								req.endWithError(restriction.message(schemaField.name, clientValue));
								return null;
							}
						} catch (Exception e) {
							req.endWithError("Exception in restriction");
							return null;
						}
					}

					for (let int m in write.mutators) {
						let mutator = write.mutators[m];
						try {
							clientValue = mutator.mutate(collection, req, clientValue);
						} catch (Exception e) {
							req.endWithError("Exception in mutation");
							return null;
						}
					}
					
					query.set(write.field, clientValue);
				}else{
					req.endWithError("'" + write.field + "' is of an invalid type");
					return null;
				}
			}
		}

		let ctx = new Websom.APIContext(req);
		ctx.type = "insert";
		ctx.insertQuery = query;
		ctx.inputs = clientValues;

		if (cir.beforeWriteHandler != null) {
			native javascript {
				await cir.beforeWriteHandler(ctx);
			}

			native php {
				$cir->beforeWriteHandler($ctx);
			}
		}

		let qResponse = query.run();

		let res = new map();

		cir.trigger("success", req, new <Websom.Adapters.Database.Document>array());

		res["status"] = "success";
		res["message"] = "Document inserted";
		res["newId"] = qResponse.id;

		req.header("Content-Type", "application/json");
		req.header("Access-Control-Allow-Origin", "*");
		req.end(Websom.Json.encode(res));
	}

	bool typeCheck(primitive value, Websom.Adapters.Database.Field schemaField) {
		return this.server.security.typeCheck(value, schemaField.type);
	}
}