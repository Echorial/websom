header class Websom.Entity {
	map rawFields = null;
	Websom.Adapters.Database.Collection collection = null;
	string id = "";
	
	void @construct() {

	}

	override void load() {
		let doc = this.collection.document(this.id);

		this.loadFromMap(doc.data());
	}

	override void loadEntityArray(<Websom.Entity>array arr) {
		if (arr.length > 0) {
			let collection = arr[0].collection;

			let ids = new <string>array();

			for (let int i in arr)
				ids.push(arr[i].id);

			let docs = collection.getAll(ids);

			for (let int i in docs) {
				let doc = docs[i];
				let entity = arr.find(bool (Websom.Entity ent) => { return ent.id == doc.id; });

				entity.loadFromMap(doc.data());
			}
		}
	}

	// This is implemented in the build script below.
	// Websom.Adapters.Database.Schema getSchema(Websom.Adapters.Database.Collection collection);

	override trust fixed Websom.Adapters.Database.Schema applySchema(Websom.Adapters.Database.Collection collection) {
		this.linkToCollection(collection);

		native javascript {
			return this.getSchema(collection);
		}

		native php {
			return self::getSchema($collection);
		}
	}

	override trust fixed void linkToCollection(Websom.Adapters.Database.Collection collection) {
		native javascript {
			collection.entityTemplate = this;
		}

		native php {
			$collection->entityTemplate = __CLASS__;
		}
	}

	primitive getFieldValue(string field) {
		native javascript {
			return this[field];
		}

		native php {
			return $this->$field;
		}
	}

	<Websom.Adapters.Database.Field>array getFieldsChanged() {
		let fieldsChanged = new <Websom.Adapters.Database.Field>array();

		for (let int i in this.collection.appliedSchema.fields) {
			let field = this.collection.appliedSchema.fields[i];

			let primitive realValue = null;
			let myValue = this.getFieldValue(field.name);
			let rawValue = this.rawFields[field.name];

			let isDifferent = false;

			if (field.type == "time") {
				let Websom.Time cast = myValue;
				
				if (cast == null) {
					realValue = null;
				}else{
					realValue = cast.timestamp;
				}

				isDifferent = realValue != rawValue;
			}else if (field.type == "reference") { 
				let Websom.Entity cast = myValue;

				if (cast != null) {
					realValue = cast.id;
				}

				isDifferent = realValue != rawValue;
			}else if (field.type == "array") {
				native javascript {
					isDifferent = JSON.stringify(myValue) != JSON.stringify(rawValue);
				}

				native php {
					$isDifferent = count(array_diff($myValue, $rawValue)) > 0;
				}
			}else {
				realValue = myValue;
				isDifferent = realValue != rawValue;
			}

			if (isDifferent)
				fieldsChanged.push(field);
		}

		return fieldsChanged;
	}

	[ForceAsync]
	Websom.Adapters.Database.UpdateQueryResult saveToCollection() {
		let fields = this.getFieldsChanged();

		let update = this.collection.update()
			.where("id", "==", this.id);

		for (let int i in fields) {
			let field = fields[i];

			update.set(field.name, this.getFieldValue(field.name));
		}

		return update.run();
	}

	[ForceAsync]
	override void loadFromMap(map data) {
		this.rawFields = data;

		native javascript {
			for (let k in data) {
				if (data.hasOwnProperty(k) && this.hasOwnProperty(k)) {
					let camel = k[0].toUpperCase() + k.substr(1, k.length);

					if (this["load" + camel]) {
						await this["load" + camel](data[k]);
					}else{
						this[k] = data[k];
					}
				}
			}
		}

		native php {
			foreach ($data as $k => $v) {
				if (isset($this->$k)) {
					$camel = ucfirst($k);
					
					if (method_exists($this, "load" . $camel)) {
						$this->{"load" . $camel}($data[$k]);
					}else{
						$this->{$k} = $data[$k];
					}
				}
			}
		}
	}
}

#script Carbon

let buildFieldForMember = void (Carbon.Class cls, Carbon.Property prop) => {
	let rawType = "string";
	let isPrimitive = prop.output.reference.descendantOf(Carbon.findClass("primitive"));

	if (isPrimitive == true) {
		if (prop.output.reference.route == "string") {
			rawType = "string";
		}
		if (prop.output.reference.route == "float") {
			rawType = "float";
		}
		if (prop.output.reference.route == "int") {
			rawType = "integer";
		}
		if (prop.output.reference.route == "array") {
			rawType = "array";
		}
		if (prop.output.reference.route == "map") {
			rawType = "string";
		}
		if (prop.output.reference.route == "bool") {
			rawType = "boolean";
		}
	}

	if (isPrimitive == false) {
		let isTime = prop.output.reference.route == "Websom.Time";

		if (isTime == true) {
			rawType = "time";
			
			let first = prop.name.substr(0, 1);
			first = first.toUpper();

			let last = prop.name.substr(1, prop.name.length);

			let camel = first + last;

			Carbon.Method.eval("void load" + camel + "(primitive value) {this." + prop.name + " = new Websom.Time(); this." + prop.name + ".timestamp = value;}", cls);
		}

		if (isTime == false) {
			rawType = "reference";
		}
	}

	return '.field("' + prop.name + '", "' + rawType + '")';
};

let entities = [];

Carbon.on("inherits.Websom.Entity", void (Carbon.Class base, Carbon.Class cls) => {
	if (Carbon.platform != "header") {
		entities.push(cls);
	}
});

Carbon.on("classes.end", void () => {
	for (let int i = 0; i < entities.length; i += 1) {
		let entity = entities.index(i);
		let members = entity.members;

		let fields = [];
		let int m = 0;
		for (let int m = 0; m < members.length; m += 1) {
			let member = members.index(m);
	
			if (member.hasFlag("field")) {
				fields.push(buildFieldForMember(entity, member));
			}
		}

		let method = "trust override fixed Websom.Adapters.Database.Schema getSchema(Websom.Adapters.Database.Collection collection) {return collection.schema()" + fields.join("") + ";}";
		
		Carbon.Method.eval(method, entity);
	}
});


#end script