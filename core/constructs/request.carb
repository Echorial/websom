class Websom.Request {
	Websom.Server server = null;
	Websom.Client client = null;
	bool sent = false;
	string path = "";
	map query = new map();
	map headers = new map();
	map cookies = new map();

	map body = new map();

	Websom.Standard.UserSystem.User userCache = null;

	bool external = false;

	`Stored for javascript context, and php response codes`
	Websom.Response response = null;

	void jsRequest = null;

	Websom.Session session = null;

	void @construct(Websom.Server server, Websom.Client client) {
		this.server = server;
		this.client = client;
		this.response = new Websom.Response();
		this.session = new Websom.Session(this);
	}

	void header(string name, primitive value) {
		if (this.external) {
			this.response.headers[name] = value;
		}else{
			native javascript {
				this.response.jsResponse.setHeader(name, value);
			}

			native php {
				header($name . ": " . $value);
			}
		}
	}

	Websom.Cookie& cookie(string name, string value) {
		let cookie = new Websom.Cookie(name, value);
		this.response.cookies.push(cookie);

		return cookie;
	}

	`Sets the response code`
	void code(int code) {
		this.response.code = code;

		if (this.external == false) {
			native javascript {
				this.response.jsResponse.status(code);
			}

			native php {
				http_response_code($code);
			}
		}
	}

	void end(string content) {
		if (this.sent)
			return null; //TODO: Setup throw
		
		this.sent = true;

		this.server.session.beforeSend(this);

		this.response.bakeCookies();

		if (this.external) {
			this.response.body = content;
			this.server.sendResponse(this.response);
		}else{
			native javascript {
				for (let header in this.response.headers) {
					this.response.jsResponse.header(header, this.response.headers[header]);
				}

				this.response.jsResponse.send(content);
			}

			native php {
				echo $content;
			}
		}
	}

	void flush() {
		native javascript {
			this.response.jsResponse.flush();
		}
	}

	void write(string content) {
		native javascript {
			this.response.jsResponse.write(content);
		}

		native php {
			echo $content;
		}
	}

	`Sends the content over to the client.
	@warning LEGACY! This is a legacy method, use end instead.`
	void send(string content) {
		if (this.sent)
			return null; //TODO: Setup throw
		
		this.sent = true;

		native javascript {
			this.response.jsResponse.send(content);
		}

		native php {
			echo $content;
		}
	}

	void redirect(string route) {
		native javascript {
			this.response.jsResponse.redirect(route);
		}

		native php {
			header("Location: " . $route);
		}
	}

	void download(string name, string path, string type) {
		native javascript {
			const fs = require("fs");
			this.response.jsResponse.type(type);
			this.response.jsResponse.setHeader("Content-disposition", "attachment; filename=" + name);
			fs.createReadStream(path).pipe(this.response.jsResponse);
		}

		native php {
			header('Content-Type: application/pdf');
			header("Content-Disposition: attachment; filename=" . $name);
			header("Content-Length: " . filesize($path));

			readfile($path);
		}
	}

	void getUser(<void, Websom.Standard.UserSystem.User>function callback) {
		if (this.server.userSystem != null) {
			this.server.userSystem.getLoggedIn(this, callback);
		}else{
			callback(null);
		}
	}
}

class Websom.Session {
	map data = new map();
	bool changed = false;
	bool loaded = false;
	string id = "";

	Websom.Request request = null;

	void @construct(Websom.Request req) {
		this.request = req;
	}

	void set(string key, primitive value) {
		if (this.request.server.config.legacy) {
			native javascript {
				this.request.jsRequest.session[key] = value;
				if (this.request.jsRequest.method == "POST") {
					this.request.jsRequest.session.save();
				}
			}

			native php {
				if (!isset($_SESSION)) session_start();
				$_SESSION[$key] = $value;
			}
		}else{
			this.changed = true;
			this.data[key] = value;
		}
	}

	void delete(string key) {
		if (this.request.server.config.legacy) {
			native javascript {
				delete this.request.jsRequest.session[key];
			}

			native php {
				if (!isset($_SESSION)) session_start();
				unset($_SESSION[$key]);
			}
		}else{
			this.changed = true;
			this.data[key] = null;
		}
	}

	primitive getLegacy(string key) {
		native javascript {
			return this.request.jsRequest.session[key] || null;
		}

		native php {
			if (!isset($_SESSION)) session_start();
			if (isset($_SESSION[$key]))
				return $_SESSION[$key];
			else
				return NULL;
		}
	}

	primitive get(string key) {
		if (this.request.server.config.legacy) {
			native javascript {
				return this.request.jsRequest.session[key] || null;
			}

			native php {
				if (!isset($_SESSION)) session_start();
				if (isset($_SESSION[$key]))
					return $_SESSION[$key];
				else
					return NULL;
			}
		}else{
			if (this.loaded == false) {
				this.loaded = true;
				this.request.server.session.loadRequest(this.request);
			}
			
			return this.data[key];
		}
	}
}