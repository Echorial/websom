class Websom.Services.API inherits Websom.Service {
	string baseRoute = "/api/v1";

	<Websom.CollectionInterface>array collections = new <Websom.CollectionInterface>array();
	<Websom.PlainInterface>array interfaces = new <Websom.PlainInterface>array();
	<Websom.PlainInterface>array getInterfaces = new <Websom.PlainInterface>array();
	<Websom.APIChain>array chains = new <Websom.APIChain>array();
	<Websom.APIChain>array getChains = new <Websom.APIChain>array();

	<Websom.EndpointHandler>map handlers = new <Websom.EndpointHandler>map();

	override Websom.Status start() {
		this.registerEndpointHandler("select", new Websom.SelectHandler(this.server));
		this.registerEndpointHandler("insert", new Websom.InsertHandler(this.server));
		this.registerEndpointHandler("delete", new Websom.DeleteHandler(this.server));
		this.registerEndpointHandler("search", new Websom.SearchHandler(this.server));
		this.registerEndpointHandler("update", new Websom.UpdateHandler(this.server));
	}

	void registerEndpointHandler(string key, Websom.EndpointHandler handler) {
		this.handlers[key] = handler;
	}

	Websom.CollectionInterfaceRoute resolveEndpoint(string path) {
		let splits = path.split("/");
		
		for (let int i in this.collections) {
			let collection = this.collections[i];
			let basePathSplit = collection.baseRoute.split("/");

			if (splits.length < basePathSplit.length)
				continue;

			let pass = true;
			for (let int j in basePathSplit)
				if (basePathSplit[j] != splits[j])
					pass = false;

			if (pass) {
				for (let int k in collection.routes) {
					let route = collection.routes[k];
					let endpointSplits = route.route.split("/");

					let eBase = 1;
					let bpBase = splits.length - 1;

					let finalPass = true;

					for (let int bp in endpointSplits) {
						if (bp + eBase >= endpointSplits.length)
							break;
							
						if (endpointSplits[bp + eBase] != splits[bp + bpBase])
							finalPass = false;
					}
					
					if (finalPass) {
						return route;
					}
				}
			}
		}

		return null;
	}

	async map hit(Websom.Request identity, string route, map body) {
		native javascript {
			let sink = new Websom.SinkRequest(this.server, identity.client, (raw) => {
				let body = JSON.parse(raw);
				@return(body);
			});

			sink.copyIdentity(identity);

			sink.path = route;
			sink.body = body;

			this.request(sink);
		}
	}

	async map hit(string route, map body) {
		native javascript {
			let sink = new Websom.SinkRequest(this.server, new Websom.Client("::1", ""), (raw) => {
				let body = JSON.parse(raw);
				@return(body);
			});

			sink.path = route;
			sink.body = body;

			this.request(sink);
		}
	}

	bool compareRoute(string base, string request) {
		let splits = base.split("/");
		let reqSplits = request.split("/");

		for (let int i in splits) {
			if (splits[i].length == 0)
				continue;

			if (reqSplits.length < i)
				return false;
			
			if (splits[i] == "*")
				return true;

			if (splits[i][0] != ":")
				if (splits[i] != reqSplits[i])
					return false;
		}

		return true;
	}

	bool getRequest(Websom.Request req) {
		for (let int i in this.getInterfaces) {
			let interface = this.getInterfaces[i];

			if (this.compareRoute(interface.route, req.path)) {
				interface.handler(req);
				return true;
			}
		}

		for (let int i in this.getChains) {
			let chain = this.getChains[i];

			if (this.compareRoute(chain.route, req.path)) {
				chain.handle(req);
				return true;
			}
		}
		
		return false;
	}

	bool request(Websom.Request req) {
		for (let int i in this.interfaces) {
			let interface = this.interfaces[i];

			if (this.compareRoute(interface.route, req.path)) {
				interface.handler(req);
				return true;
			}
		}

		for (let int i in this.chains) {
			let chain = this.chains[i];

			if (this.compareRoute(chain.route, req.path)) {
				chain.handle(req);
				return true;
			}
		}

		let route = this.resolveEndpoint(req.path);
		
		if (route == null)
			return false;

		let collection = route.collection;

		this.handleRequest(collection, route, req);

		return true;
	}

	void handleRequest(Websom.CollectionInterface ci, Websom.CollectionInterfaceRoute cir, Websom.Request req) {
		if (this.handlers.hasKey(cir.executes)) {
			let Websom.EndpointHandler handler = this.handlers[cir.executes];
			handler.fulfill(cir, req);
		}else{
			req.endWithError("Non existent endpoint handler " + cir.executes);
		}
	}

	trust Websom.CollectionInterface generateAdminEndpoints(Websom.Adapters.Database.Collection collection, string baseRoute, Websom.Permission perm) {
		let cacheHandler = void (Websom.APIContext ctx) => {
			let <string>array tags = ctx.get("tags");
			let tagNames = new <string>array();
			if (tags != null) {
				let docs = this.server.coreModule.tags.getAll(tags);

				for (let int i in docs) {
					if (docs[i] != null)
						tagNames.push(docs[i].get("name"));
				}

				if (ctx.type == "update") {
					ctx.updateQuery.set("tagsCache", tagNames);
				}else if (ctx.type == "insert") {
					ctx.insertQuery.set("tagsCache", tagNames);
				}
			}

			let <string>array categories = ctx.get("categories");
			let categoryNames = new <string>array();
			if (categories != null) {
				let docs = this.server.coreModule.categories.getAll(categories);

				for (let int i in docs) {
					if (docs[i] != null)
						categoryNames.push(docs[i].get("name"));
				}

				if (ctx.type == "update") {
					ctx.updateQuery.set("categoriesCache", categoryNames);
				}else if (ctx.type == "insert") {
					ctx.insertQuery.set("categoriesCache", categoryNames);
				}
			}
		};

		return this.interface(collection, baseRoute)
			.route("/create")
				.auth(perm)
				.executes("insert")
					.write("*")
					.setComputed("created", uint64 (Websom.Request req) => {
						return Websom.Time.now();
					})
					.setComputed("modified", uint64 (Websom.Request req) => {
						return Websom.Time.now();
					})
					.beforeWrite(cacheHandler)
			.route("/edit")
				.auth(perm)
				.executes("update")
					.write("*")
					.setComputed("modified", uint64 (Websom.Request req) => {
						return Websom.Time.now();
					})
					.beforeUpdate(void (Websom.Request req, Websom.Adapters.Database.UpdateQuery query) => {
						query.increment("revisions", 1);
					})
					.beforeWrite(cacheHandler)
					.filter("default")
						.field("id", "==")
			.route("/get")
				.auth(perm)
				.executes("select")
					.read("*")
					.filter("default")
						.field("id", "==")
			.route("/list")
				.auth(perm)
				.executes("select")
					.read("*")
					.filter("default")
						.order("*", "dsc");
	}

	trust Websom.CollectionInterface interface(Websom.Adapters.Database.Collection collection, string baseRoute) {
		let ci = new Websom.CollectionInterface(collection, baseRoute);
		this.collections.push(ci);
		return ci;
	}

	void route(string route, <void, Websom.Request>function handler) {
		this.interfaces.push(new Websom.PlainInterface(route, handler));
	}

	void get(string route, <void, Websom.Request>function handler) {
		this.getInterfaces.push(new Websom.PlainInterface(route, handler));
	}

	Websom.APIChain route(string route) {
		let chain = new Websom.APIChain(this.server, route);
		this.chains.push(chain);
		return chain;
	}

	Websom.APIChain get(string route) {
		let chain = new Websom.APIChain(this.server, route);
		this.getChains.push(chain);
		return chain;
	}

	map gatherEndpoints(Websom.Request req) {
		let mp = new map();

		for (let int i in this.collections) {
			let collection = this.collections[i];

			if (req != null and collection.exposeSchema and collection.collection.appliedSchema != null) {
				if (this.server.security.authenticateRequest(req, collection.exposedTo)) {
					let cm = new map();
					let schema = new map();
					
					for (let int f in collection.collection.appliedSchema.fields) {
						let field = collection.collection.appliedSchema.fields[f];
						schema[field.name] = field.type;
					}

					cm["schema"] = schema;
					mp[collection.collection.name] = cm;
				}
			}

			for (let int r in collection.routes) {
				let route = collection.routes[r];

				let key = collection.baseRoute + route.route;

				let writes = new map();

				for (let int w in route.writes) {
					let write = route.writes[w];
					writes[write.field] = write.exposeToClient();
				}

				mp[key] = new map();
				mp[key]["writes"] = writes;
			}
		}

		return mp;
	}
}

class Websom.APIContext {
	Websom.Request request = null;
	map inputs = new map();

	string type = "";

	Websom.Adapters.Database.UpdateQuery updateQuery = null;
	Websom.Adapters.Database.InsertQuery insertQuery = null;
	Websom.Adapters.Database.Document subject = null;


	void @construct(Websom.Request req) {
		this.request = req;
	}

	primitive get(string key) {
		return this.inputs[key];
	}

	void set(string key, primitive value) {
		this.inputs[key] = value;
	}
}

class Websom.APIChain {
	<Websom.Authenticator>array authenticators = new <Websom.Authenticator>array();
	<Websom.CollectionInterfaceWrite>array inputs = new <Websom.CollectionInterfaceWrite>array();
	string route = "";

	<void, Websom.APIContext>function handler = null;

	Websom.Server server = null;

	void @construct(Websom.Server server, string route) {
		this.server = server;
		this.route = route;
	}

	Websom.APIChain auth(Websom.Permission permission) {
		let perm = new Websom.PermissionAuthenticator(permission);
		perm.server = this.server;
		this.authenticators.push(perm);
		return this;
	}

	Websom.APIChain auth(<bool, Websom.Request>function func) {
		let auth = new Websom.FunctionAuthenticator(func);
		auth.server = this.server;
		this.authenticators.push(auth);
		return this;
	}

	Websom.APIChain input(string field) {
		this.inputs.push(new Websom.CollectionInterfaceWrite(field, null));
		return this;
	}

	Websom.APIChain input(string field, primitive defaultValue) {
		this.inputs.push(new Websom.CollectionInterfaceWrite(field, defaultValue));
		return this;
	}

	Websom.APIChain type(string type) {
		this.inputs[this.inputs.length - 1].type = type;
		return this;
	}

	Websom.APIChain limit(int min, int max) {
		return this.restrict(new Websom.Restrictions.Limit(min, max));
	}

	Websom.APIChain format(string format) {
		return this.restrict(new Websom.Restrictions.Format(format));
	}

	Websom.APIChain regexTest(string reg) {
		return this.restrict(new Websom.Restrictions.Regex(reg));
	}

	Websom.APIChain restrict(Websom.Restriction restriction) {
		this.inputs[this.inputs.length - 1].restrictions.push(restriction);
		return this;
	}

	Websom.APIChain restrict(<bool, Websom.Adapters.Database.Collection, Websom.Adapters.Database.Field, primitive>function func) {
		return this.restrict(new Websom.Restrictions.Function(func));
	}

	void executes(<void, Websom.APIContext>function func) {
		this.handler = func;
	}

	void handle(Websom.Request req) {
		for (let int i in this.authenticators) {
			let auth = this.authenticators[i];

			if (auth.authenticate(req) == false) {
				req.endWithError(auth.errorMessage(req));
				return null;
			}
		}

		let ctx = new Websom.APIContext(req);

		for (let int i in this.inputs) {
			let input = this.inputs[i];

			if (req.body.hasKey(input.field) == false) {
				if (input.defaultValue == null) {
					req.endWithError(input.field + " is required");
					return null;
				}else{
					ctx.set(input.field, input.defaultValue);
					continue;
				}
			}

			let value = req.body[input.field];

			if (this.server.security.typeCheck(value, input.type) == false) {
				if (value.typeAsString() == "float" and input.type == "string") {
					let float val = value;
					value = val.toString();
				}else{
					req.endWithError("Invalid type on field " + input.field);
					return null;
				}
			}

			for (let int r in input.restrictions) {
				let restriction = input.restrictions[r];

				try {
					let field = new Websom.Adapters.Database.Field(input.field, input.type);

					if (restriction.testServer(null, field, value) == false) {
						req.endWithError(restriction.message(input.field, value));
						return null;
					}
				} catch (Exception e) {
					this.server.logException(e);
					req.endWithError("Exception in restriction");
					return null;
				}
			}

			ctx.set(input.field, value);
		}
		
		try {
			this.handler(ctx);
		} catch (Exception e) {
			this.server.logException(e);
			req.endWithError("Server exception");
		}
	}
}