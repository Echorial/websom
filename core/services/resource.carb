class Websom.Services.Resource inherits Websom.Service {
	<string>array globalScripts = new <string>array();
	<string>array globalStyles = new <string>array();

	map deployConfig = null;

	bool assetFontAwesome = false;

	<Websom.DeployHandler>array deployHandlers = new <Websom.DeployHandler>array();

	override Websom.Status start() {
		this.deployHandlers.push(new Websom.FtpHandler(this.server));
		this.deployHandlers.push(new Websom.LocalHandler(this.server));
	}

	void loadDeployConfig() {
		if (this.deployConfig == null) {
			var path = this.server.config.root + "/deploy.json";
			if (FileSystem.exists(path) == false) {
				FileSystem.writeSync(path, '{\n	"deploys": []\n}');
			}

			this.deployConfig = Websom.Json.parse(FileSystem.readSync(path, "utf8"));
		}
	}

	void deploy(string name, <void>function callback) {
		this.deploy(name, void (string msg) => {
				Console.log(msg);
			}, callback);
	}

	Websom.DeployHandler findHandler(string name) {
		for (var int i in this.deployHandlers)
			if (this.deployHandlers[i].name == name)
				return this.deployHandlers[i];

		return null;
	}

	map findDeploy(string name) {
		var <map>array cast = this.deployConfig["deploys"];

		for (var int i in cast)
			if (cast[i]["name"] == name)
				return cast[i];

		return null;
	}

	void deploy(string name, <void, string>function progress, <void>function callback) {
		this.loadDeployConfig();

		progress("Searching for deploy " + name);

		var deploy = this.findDeploy(name);

		if (deploy == null) {
			progress("Unknown deploy " + name);
			callback();
			return null;
		}

		var handler = this.findHandler(deploy["handler"]);

		if (handler == null) {
			progress("Unknown handler " + name);
			callback();
			return null;
		}

		handler.execute(deploy, progress, callback);
	}

	string buildViews(bool saveToFiles) { //TODO: Clean up
		var viewStr = "";
		for (var int i in this.server.module.modules) {
			var module = this.server.module.modules[i];

			var bridges = module.bridges;
			for (var int b in bridges) {
				var bridge = bridges[b];
				var methods = new <string>array();
				native javascript {
					var client = bridge.clientMethods();
					var server = bridge.serverMethods();
					for (var c in client) {
						methods.push(c + ": " + client[c]);
					}
					for (var s in server) {
						methods.push(server[s] + ": function () {return new Promise((done) => {Websom.sendBridge('" + bridge.getName() + "', '" + server[s] + "', arguments, done);})}");
					}
				}
				native php {
					$client = $bridge->clientMethods();
					$server = $bridge->serverMethods();
					foreach ($client as $c => $val) {
						$methods[] = ($c . ": " . $client[$c]);
					}

					foreach ($server as $s => $val) {
						$methods[] = ($server[$s] . ": function () {return new Promise((done) ="."> {Websom.sendBridge('" . $bridge->name . "', '" . $server[$s] . "', arguments, done);})}");
					}
				}
				
				viewStr += bridge.getName() + " = {" + methods.join(", ") + "};";
			}

			if ("resources" in module.baseConfig) {
				var <map>array raw = module.baseConfig["resources"];

				for (var int r in raw) { //WARN: TODO: Add safety checks for valid resource structure
					var res = raw[r];
					var string type = "";
					var string path = res["path"];

					if (("type" in res) == false) {
						var realPath = FileSystem.resolve(module.root + "/" + path);
						if (FileSystem.isDir(realPath)) {
							var files = FileSystem.readDirSync(realPath);
							for (var int f in files) {
								var file = files[f];
								var splits = file.split(".");
								if (splits.length > 1)
									if (splits[splits.length - 1] == "view") {
										var view = new Websom.View(this.server);
										var viewErr = view.loadFromFile(realPath + "/" + file);
										/*if (viewErr != null)
											return viewErr;*/
										
										view.hasLocalExport = true;

										viewStr += view.buildDev();
									}
							}
						}
					}else{
						type = res["type"];
						if (type == "view") {
							var view = new Websom.View(this.server);
							var viewErr = view.loadFromFile(FileSystem.resolve(module.root + "/" + path));
							/*if (viewErr != null)
								return viewErr;*/
							
							view.hasLocalExport = true;

							viewStr += view.buildDev();
						}
					}
				}
			}

			if (saveToFiles) {
				FileSystem.writeSync(this.server.config.resources + "/module-view-" + module.name + ".js", viewStr);
				viewStr = "";
			}
		}

		if (saveToFiles == false)
			return viewStr;
	}

	`Minifies and writes all website css, and js to the folder path under the names css.css and js.js`
	void exportToFolder(string path, <void, bool, string>function callback) {
		var that = this;

		FileSystem.writeSync(path + "/client.js", FileSystem.readSync(this.server.config.resources + "/client.js", null));
		FileSystem.writeSync(path + "/jquery.min.js", FileSystem.readSync(this.server.config.resources + "/jquery.min.js", null));

		if (FileSystem.exists(this.server.config.resources + "/text.js"))
			FileSystem.writeSync(path + "/text.js", FileSystem.readSync(this.server.config.resources + "/text.js", null));

		var resources = this.collect();
		var unbuilt = resources.length + this.server.theme.themes.length;

		var error = false;
		var errMsg = "";

		var totalJs = this.buildViews(false);
		var totalCss = "";

		for (var int i in this.server.view.pages) {
			var page = this.server.view.pages[i];
			totalJs += page.buildDev();
		}

		for (var int i in this.server.view.views) {
			var view = this.server.view.views[i];
			totalJs += view.buildDev();
		}

		var finish = void () => {
			var closureCompiler = void (string content, <void, string>function compiledBack) => {
				native javascript {
					require("request").post({url: "https://closure-compiler.appspot.com/compile", form: {js_code: content, compilation_level: "SIMPLE_OPTIMIZATIONS", output_info: "compiled_code", language_out: "ECMASCRIPT5", output_format: "text"}}, (err, res, body) => {
						compiledBack(body);
					});
				}
			};

			var writeOut = void (string vue) => {
				closureCompiler(FileSystem.readSync(that.server.config.resources + "/jquery.min.js", "utf8") + "\n" + vue + "\n" + FileSystem.readSync(that.server.config.resources + "/client.js", "utf8") + "\n" + totalJs, void (string compiled) => {
					FileSystem.writeSync(path + "/js.js", compiled);
					FileSystem.writeSync(path + "/css.css", totalCss);

					callback(error, errMsg);
				});
			};

			native javascript {
				require("request")("https://vuejs.org/js/vue.min.js", (err, res, body) => {writeOut(body);});
			}
		};

		for (var int i in this.server.theme.themes) {
			var theme = this.server.theme.themes[i];

			theme.build(void (string err, string js, string css) => {
				totalJs += js;
				totalCss += css;
				unbuilt--;
				if (unbuilt <= 0)
					finish();
			});
		}

		var builtJs = void (bool hadError, string content) => {
			if (hadError) {
				error = true;
				errMsg = content;
			}

			unbuilt--;
			totalJs += content + "\n\n";

			if (unbuilt <= 0) {
				finish();
			}
		};

		var builtCss = void (bool hadError, string content) => {
			if (hadError) {
				error = true;
				errMsg = content;
			}

			unbuilt--;
			totalCss += content;

			if (unbuilt <= 0) {
				finish();
			}
		};

		var files = this.collect();
		for (var int i in files) {
			var file = files[i];

			if (file.type == "file") {
				var base = FileSystem.basename(files[i].file);
				var bpath = base;
				if (files[i].raw != null)
					if ("toPath" in files[i].raw) {
						var toPath = files[i].raw["toPath"];
						bpath = toPath + "/" + base;
						if (FileSystem.exists(path + "/" + toPath) == false)
							FileSystem.makeDir(path + "/" + toPath);
					}

				files[i].buildToFile(path + "/" + bpath);
			}
		}

		for (var int i in resources) {
			var resource = resources[i];
			if (resource.type == "less" or resource.type == "css") {
				resource.build(builtCss);
			}else if(resource.type == "javascript") {
				resource.build(builtJs);
			}else{
				unbuilt--;
				if (unbuilt <= 0) {
					finish();
				}
			}
		}
	}

	`Builds an array of Websom.Resource objects from theme, module and server configs.`
	<Websom.Resource>array collect() {
		var that = this;
		var output = new <Websom.Resource>array();

		var buildPackage = void (string typeStr, string name, string root, <map>array raw) => {
			for (var int r in raw) { //WARN: TODO: Add safety checks for valid resource structure
				var res = raw[r];
				var string type = "";
				var string path = res["path"];

				if (("type" in res) == false) {
					var realPath = FileSystem.resolve(root + "/" + path);
					if (FileSystem.isDir(realPath)) {
						var files = FileSystem.readDirSync(realPath);
						for (var int f in files) {
							var file = files[f];
							var splits = file.split(".");
							if (splits.length > 1)
								if (splits[splits.length - 1] == "view")
									output.push(Websom.Resource.make(that.server, "view", typeStr + "-" + name, realPath + "/" + file));
						}
					}
				}else{
					type = res["type"];
					var realPath = FileSystem.resolve(root + "/" + path);
					if (FileSystem.isDir(realPath)) {
						var files = FileSystem.readDirSync(realPath);
						for (var int f in files) {
							var file = files[f];
							output.push(Websom.Resource.make(that.server, type, typeStr + "-" + name, realPath + "/" + file));
							output[output.length - 1].raw = res;
						}
					}else{
						var resource = Websom.Resource.make(that.server, type, typeStr + "-" + name, realPath);

						if ("loadOrder" in res) {
							var int cast = res["loadOrder"];
							resource.order = cast;
						}

						output.push(resource); //TODO: Maybe add relative load ordering with unshift
					}
				}
			}
		};

		for (var int i in this.server.module.modules) {
			var module = this.server.module.modules[i];

			if ("resources" in module.baseConfig) {
				var <map>array raw = module.baseConfig["resources"];

				buildPackage("module", module.name, module.root, raw);
			}
		}

		/*for (var int i in this.server.theme.themes) {
			var theme = this.server.theme.themes[i];

			if ("resources" in theme.config) {
				var <map>array raw = theme.config["resources"];

				buildPackage("theme", theme.name, theme.root, raw);
			}
		}*/
		
		return output;
	}

	`Builds all of the core resources for the server.`
	Websom.Status build(bool dev `If false each file will be concatenated into one output.`) {
		if (FileSystem.exists(this.server.config.resources) == false)
			FileSystem.makeDir(this.server.config.resources);

		var files = this.collect();
		var err = this.buildViews(true);

		if (err != null)
			return Websom.Status.singleError("View", err);

		if (dev) {
			if (FileSystem.exists(this.server.config.resources + "/jquery.min.js") == false) {
				FileSystem.writeSync(this.server.config.resources + "/jquery.min.js", FileSystem.readSync(this.server.websomRoot + "/client/javascript/jquery.min.js", "utf8"));
			}

			var client = new Websom.Resources.Javascript(this.server, "Websom.Core", this.server.websomRoot + "/client/javascript/client.js");
			var input = new Websom.Resources.Javascript(this.server, "Websom.Core", this.server.websomRoot + "/client/javascript/input.js");
			var theme = new Websom.Resources.Javascript(this.server, "Websom.Core", this.server.websomRoot + "/client/javascript/theme.js");
			FileSystem.writeSync(this.server.config.resources + "/client.js", client.read() + theme.read() + input.read());

			for (var int i in files) {
				var base = FileSystem.basename(files[i].file);
				if (files[i].type == "less")
					base = base.regularReplace("\\.[^\\.]+$", "") + ".css";
				
				var path = files[i].owner + "-" + base;
				if (files[i].raw != null)
					if ("toPath" in files[i].raw) {
						var toPath = files[i].raw["toPath"];
						path = toPath + "/" + base;
						if (FileSystem.exists(this.server.config.resources + "/" + toPath) == false)
							FileSystem.makeDir(this.server.config.resources + "/" + toPath);
					}

				files[i].buildToFile(this.server.config.resources + "/" + path); //WARN: No slash at end + duplicate file names override
			}
		}
	}

	`Builds an html string that includes all of the resources for the current dev environment`
	string include(bool dev) {
		var output = "";

		if (dev) {
			output += '<script src="' + this.server.config.clientResources + '/jquery.min.js"></script>';
			var files = this.collect();

			for (var int i in files) {
				output += files[i].toHtmlInclude() + "\n";
			}

			for (var int i in this.server.module.modules)
				output += "<script src='" + this.server.config.clientResources + "/module-view-" + this.server.module.modules[i].name + ".js'></script>";
		}

		if (this.assetFontAwesome)
			output += '<link rel="stylesheet" href="https:/' + '/use.fontawesome.com/releases/v5.3.1/css/all.css" integrity="sha384-mzrmE5qonljUremFsqc01SB46JvROS7bZs3IO2EmfFsd15uHvIt+Y8vEf7N7fWAU" crossorigin="anonymous">';

		return output;
	}

	`Makes an array of Websom.Resource based on a resource <map>array. Example [{"type": "javascript", "path": "./somePath.js"}]`
	<Websom.Resource>array compile(string owner, string basePath, <map>array resources) {
		var <Websom.Resource>array output = new <Websom.Resource>array();
		
		for (var int i in resources) {
			var raw = resources[i];
			if ("type" in raw and "path" in raw) {
				var realPath = FileSystem.resolve(basePath + "/" + raw["path"]);
				if (FileSystem.exists(realPath)) {
					if (FileSystem.isDir(realPath)) {
						var files = FileSystem.readDirSync(realPath);
						for (var int f in files) {
							var file = files[f];
							output.push(Websom.Resource.make(this.server, raw["type"], owner, realPath + "/" + file)); //TODO: Rewrite resource system
							output[output.length - 1].raw = raw;
						}
					}else
						output.push(Websom.Resource.make(this.server, raw["type"], owner, realPath));
				}else
					output.push(Websom.Resource.invalid(this.server, owner, realPath));
			}else if ("path" in raw) {
				var realPath = FileSystem.resolve(basePath + "/" + raw["path"]);
				if (FileSystem.exists(realPath) and FileSystem.isDir(realPath)) {
					var files = FileSystem.readDirSync(realPath);
					for (var int f in files) {
						var file = files[f];
						var splits = file.split(".");
						if (splits.length > 1)
							if (splits[splits.length - 1] == "view")
								output.push(Websom.Resource.make(this.server, "view", owner, realPath + "/" + file));
					}
				}
			}else{
				output.push(Websom.Resource.invalid(this.server, owner, "Unknown")); //Bad error reporting
			}
		}

		return output;
	}
}

class Websom.DeployHandler {
	string name = "";
	Websom.Server server = null;
	
	void @construct(Websom.Server server) {
		this.server = server;
	}

	void execute(map config, <void, string>function progress, <void>function finish);

	void getFiles(<void, <string>array>function callback) {
		native javascript {
			const path = require("fs");
			const fs = require("fs");
			let outFiles = [];

			function scanDir(base, abs, files) {
				for (let file of files) {
					if (file.name != ".git")
					if (file.isDirectory() || (file.isSymbolicLink() && fs.statSync(abs + file.name).isDirectory())) {
						let rp = fs.realpathSync(abs + file.name);
						scanDir(base + file.name + "/", rp + "/", fs.readdirSync(rp, {withFileTypes: true}));
					}else{
						outFiles.push(base + file.name);
					}
				}
			}

			scanDir("", this.server.config.root + "/", fs.readdirSync(this.server.config.root, {withFileTypes: true}));

			callback(outFiles);
		}
	}
}

class Websom.FtpHandler inherits Websom.DeployHandler {
	override string name = "ftp";

	void execute(map config, <void, string>function progress, <void>function finish) {
		native javascript {
			const ftp = require("ftp");

			let client = new ftp();

			progress("Connecting to " + config.host);

			client.connect({
				host: config.host,
				user: config.user,
				password: config.password,
				port: config.port || 21
			});

			client.on("error", (err) => {
				progress(err.toString());
			});

			client.on("ready", () => {
				progress("Connected");
			});

		}
	}
}

class Websom.LocalHandler inherits Websom.DeployHandler {
	override string name = "local";

	void execute(map config, <void, string>function progress, <void>function finish) {
		native javascript {
			let that = this;

			const fs = require("fs");
			const path = require("path");

			progress("Checking local location");

			if (!fs.existsSync(config.location)) {
				progress(config.location + " does not exist");
				finish();
				return;
			}

			let root = this.server.config.root;
			let to = config.location;

			function mkdir(dir) {
				let upDir = path.resolve(dir + "/../");
				if (!fs.existsSync(upDir))
					mkdir(upDir);
				
				fs.mkdirSync(dir);
			}

			
			if (!fs.existsSync(to + "/resources")) {
				mkdir(to + "/resources");
			}

			if (!fs.existsSync(to + "/website")) {
				mkdir(to + "/website");
			}

			if (!fs.existsSync(to + "/websom")) {
				mkdir(to + "/websom");
				mkdir(to + "/websom/native/php");
				mkdir(to + "/websom/native/javascript");
				mkdir(to + "/websom/dashboard");
				mkdir(to + "/websom/coreModule");
			}

			fs.copyFileSync(this.server.websomRoot + "/coreModule/module.js", to + "/websom/coreModule/module.js");
			fs.copyFileSync(this.server.websomRoot + "/coreModule/module.php", to + "/websom/coreModule/module.php");
			fs.copyFileSync(this.server.websomRoot + "/coreModule/coreModule.json", to + "/websom/coreModule/coreModule.json");

			fs.copyFileSync(this.server.websomRoot + "/dashboard/module.js", to + "/websom/dashboard/module.js");
			fs.copyFileSync(this.server.websomRoot + "/dashboard/module.php", to + "/websom/dashboard/module.php");
			fs.copyFileSync(this.server.websomRoot + "/dashboard/dashboard.json", to + "/websom/dashboard/dashboard.json");

			fs.copyFileSync(this.server.websomRoot + "/native/php/websom.php", to + "/websom/native/php/websom.php");
			fs.copyFileSync(this.server.websomRoot + "/native/javascript/websom.js", to + "/websom/native/javascript/websom.js");

			this.server.resource.exportToFolder(to + "/resources", (err) => {
				if (config.gzip) {
					const zlib = require("zlib");

					function gzip(file) {
						let fileContents = fs.createReadStream(file);
						let writeStream = fs.createWriteStream(file + ".gz");
						let zip = zlib.createGzip();

						fileContents.pipe(zip).pipe(writeStream).on('finish', (err) => {
							if (err) console.log(err);
						});
					}

					gzip(to + "/resources/js.js");
					gzip(to + "/resources/css.css");
				}


				that.getFiles((files) => {
					files = files.sort((a, b) => {return a.length - b.length});
					let remaining = files.length;

					for (let file of files) {
						if (!fs.existsSync(path.dirname(to + "/website/" + file)))
							mkdir(path.dirname(to + "/website/" + file));
						
						fs.copyFile(root + "/" + file, to + "/website/" + file, () => { if (--remaining == 0) finish(); });
						//fs.createReadStream(root + "/" + file).pipe(fs.createWriteStream(to + "/" + file));
					}
				});
			});

			if (config.index) {
				fs.writeFileSync(to + "/index.php", "<?php \n\ninclude('websom/native/php/websom.php'); \nWebsom_PHP::load(); \n$server = new Websom_Server(Websom_Config::load('website/config.ini')); \n$route = ''; \nif (isset($_GET['route'])) \n\t$route = $_GET['route']; \n\n$server->run('/' . $route); \n\n?>");
			}

			if (config[".htaccess"]) {
				fs.writeFileSync(to + "/websom/.htaccess", "Deny from all");
				fs.writeFileSync(to + "/website/.htaccess", "Deny from all");

				fs.writeFileSync(to + "/.htaccess", `RewriteEngine On
RewriteBase /
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteCond $1 !^(index\.php|public|css|js|robots\.txt)
RewriteRule ^(.*)$ index.php?route=$1 [L,QSA]

ErrorDocument 404 /index.php`);
			}

			if (config.platform == "php" && config.gzip) {
				fs.writeFileSync(to + "/resources/.htaccess", `AddEncoding gzip .gz

RewriteCond %{HTTP:Accept-encoding} gzip
RewriteCond %{REQUEST_FILENAME}\.gz -s
RewriteRule ^(.*)\.css $1\.css\.gz [QSA]

RewriteCond %{HTTP:Accept-encoding} gzip
RewriteCond %{REQUEST_FILENAME}\.gz -s
RewriteRule ^(.*)\.js $1\.js\.gz [QSA]

RewriteRule \.css\.gz$ - [T=text/css,E=no-gzip:1]
RewriteRule \.js\.gz$ - [T=text/javascript,E=no-gzip:1]`);
			}
		}
	}
}

class Websom.Resource {
	Websom.Server server = null;
	string owner = "";
	string file = "";
	string type = "resource";
	int order = 0;
	bool isInvalid = false;
	string reference = "";

	string bundle = "";

	map raw = null;

	void @construct(Websom.Server server, string owner, string file) {
		this.owner = owner;
		this.file = file;
		this.server = server;
	}

	fixed Websom.Resource make(Websom.Server server, string type, string owner, string file) {
		if (type == "javascript") {
			return new Websom.Resources.Javascript(server, owner, file);
		}else if (type == "css") {
			return new Websom.Resources.Css(server, owner, file);
		}else if (type == "less") {
			return new Websom.Resources.Less(server, owner, file);
		}else if (type == "view") {
			return new Websom.Resources.View(server, owner, file);
		}else if (type == "file") {
			return new Websom.Resources.File(server, owner, file);
		}else{
			var invalid = new Websom.Resource(server, owner, file);
			invalid.isInvalid = true;
			return invalid;
		}
	}

	fixed Websom.Resource invalid(Websom.Server server, string owner, string path) {
		var invalid = new Websom.Resource(server, owner, path);
		invalid.isInvalid = true;
		return invalid;
	}

	string read() {
		return FileSystem.readSync(this.file, "utf8");
	}

	string rawRead() { // This should return Memory.Buffer
		return FileSystem.readSync(this.file, null); // Hack for node/php
	}

	abstract string toHtmlInclude();

	abstract Websom.Status buildToFile(string absolutePath);

	`callback(bool hadError, string result "result will contain the error message if hadError = true")`
	abstract void build(<void, bool, string>function callback);
}

namespace Websom.Resources {}

class Websom.Resources.Javascript inherits Websom.Resource {
	override string type = "javascript";

	Websom.Status buildToFile(string path) {
		FileSystem.writeSync(path, this.read());
	}

	string toHtmlInclude() {
		return '<script src="' + this.server.config.clientResources + '/' + this.owner + '-' + FileSystem.basename(this.file) + '"></script>';
	}

	void build(<void, bool, string>function callback) {
		callback(false, this.read());
	}
}

class Websom.Resources.File inherits Websom.Resource {
	override string type = "file";

	Websom.Status buildToFile(string path) {
		FileSystem.writeSync(path, this.rawRead());
	}

	string toHtmlInclude() {
		return '';
	}

	void build(<void, bool, string>function callback) {
		callback(false, this.read());
	}
}

`Implemented as a tracker for theme/module views`
class Websom.Resources.View inherits Websom.Resource {
	override string type = "view";

	Websom.Status buildToFile(string path) {
		
	}

	string toHtmlInclude() {
		return "";
	}

	void build(<void, bool, string>function callback) {
		var view = new Websom.View(this.server);
		view.loadFromFile(this.file);
		callback(false, view.buildDev());
	}
}

class Websom.Resources.Css inherits Websom.Resource {
	override string type = "css";

	Websom.Status buildToFile(string path) {
		FileSystem.writeSync(path, this.read());
	}

	string toHtmlInclude() {
		return '<link rel="stylesheet" href="' + this.server.config.clientResources + '/' + this.owner + '-' + FileSystem.basename(this.file) + '"/>';
	}

	void build(<void, bool, string>function callback) {
		callback(false, this.read());
	}
}

class Websom.Resources.Less inherits Websom.Resource {
	override string type = "less";

	Websom.Status buildToFile(string path) {
		this.build(void (bool err, string content) => {
			FileSystem.writeSync(path, content);
		});
	}

	string toHtmlInclude() {
		var basename = FileSystem.basename(this.file);
		return '<link rel="stylesheet" href="' + this.server.config.clientResources + '/' + this.owner + '-' + basename.regularReplace("\\.[^\\.]+$", "") + '.css"/>';
	}

	void build(<void, bool, string>function callback) {
		native javascript {
			var lessBuilder = require("../../core/util/native/less.js"); //Output in native/javascript
			
			lessBuilder.compileLess(this.reference, this.file, callback);
		}

		native php {
			$path = realpath(dirname(__FILE__) . "/../../core/util/native/less.php");
			$lessBuilder = require($path);

			$func = $lessBuilder["compileLess"];
			$func($this->file, $callback);
		}
	}
}