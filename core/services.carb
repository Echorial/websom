namespace Websom.Adapters {}

class Websom.Service {
	Websom.Server server = null;

	void @construct(Websom.Server server) {
		this.server = server;

		this.preStart();
	}

	`Called just after construction.`
	void preStart() {
		
	}

	`Called at the start of the websom server(php for each page load)`
	Websom.Status start() {

	}

	`Called when the server stops(Only node)`
	Websom.Status stop() {

	}

	`Called at the end of a page load(Only php)`
	Websom.Status end() {

	}
}

namespace Websom.Services {}

#script Carbon
	let num = 0;

	Carbon.on("inherits.Websom.Service", bool (Carbon.Class base, Carbon.Class cls) => {
		num += 1;
	});

	Carbon.on("classes.end", void () => {
		print("");
		print("--------------- WEBSOM ---------------");
		print("");
		print("    " + num.toString() + " services included in build");
		print("");
		print("--------------------------------------");
		print("");
	});
	
#end script

#include "services"
#include "constructs"
#include "constructs/render"
#include "constructs/controls"
#include "util"
#include "databases"
#include "constructs/adapters/database"
#include "constructs/adapters/notification"
#include "constructs/adapters/confirmation"
#include "constructs/adapters/captcha"
#include "constructs/adapters/bucket"
#include "constructs/endpointHandlers"
#include "standard/standard.carb"