class Websom.Http {
	fixed void postJson(Websom.Server server, string url, map data, <void, map>function callback) {
		native javascript {
			const request = require('request'); // Move to global define

			request.post(url, data, (err, res) => {
				if (err)
					console.log(err);
				else
					callback(res.body);
			});
		}

		native php {
			try {
				$ch = curl_init($url);
				$str = json_encode($data["body"]);

				if (!$server->config->sslVerifyPeer)
					curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
				
				curl_setopt($ch, CURLOPT_POST, 1);
				curl_setopt($ch, CURLOPT_POSTFIELDS, $str);
				curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
				curl_setopt($ch, CURLOPT_USERPWD, $data["auth"]["user"] . ":" . $data["auth"]["pass"]);
				curl_setopt($ch, CURLOPT_HTTPHEADER, [
					"Content-Type: application/json",
					"Content-Length: " . strlen($str)
				]);

				$response = curl_exec($ch);
				
				if ($response === false) {
					throw new Exception(curl_error($ch), curl_errno($ch));
				}

				curl_close($ch);

				$callback(json_decode($response, true));
			} catch(Exception $e) {
				if ($server->config->dev)
					throw $e;
				
				return $e;
			}
		}
	}

	fixed void get(string url, map data, <void, map>function callback) {

	}
}

class Websom.Result {
	string error = "";
	bool hadError = false;

	int status = 200;

	primitive data = null;

	void @construct(string error, primitive data) {
		this.error = error;
		
		if (error != null and error.length > 0)
			this.hadError = true;

		this.data = data;
	}
}

class Websom.RequestChain {
	Websom.Server server = null;

	string url = "";
	bool urlencode = false;
	bool jsonencode = false;

	map data = new map();

	bool doAuth = false;
	string user = null;
	string pass = null;
	string bearer = null;

	bool doParse = false;

	map _headers = new map();

	void @construct(Websom.Server server, string url) {
		this.server = server;
		this.url = url;
	}

	Websom.RequestChain auth(string user, string pass) {
		this.doAuth = true;
		this.user = user;
		this.pass = pass;
		return this;
	}

	Websom.RequestChain auth(string bearer) {
		this.doAuth = true;
		this.bearer = bearer;
		return this;
	}

	Websom.RequestChain parseJson() {
		this.doParse = true;
		return this;
	}

	Websom.RequestChain json(map data) {
		this.jsonencode = true;
		this.data = data;
	}

	Websom.RequestChain form(map data) {
		this.urlencode = true;
		this.data = data;
		return this;
	}

	Websom.RequestChain form(string key, primitive value) {
		this.urlencode = true;
		this.data[key] = value;
		return this;
	}

	Websom.RequestChain header(string key, primitive value) {
		this._headers[key] = value;
		return this;
	}

	Websom.RequestChain headers(map headers) {
		this._headers = headers;
		return this;
	}

	void makeRequest(string method, <void, Websom.Result>function callback) {
		native php {
			$ch = curl_init($url);
			$data = "";
			if ($this->urlencode) {
				$data = http_build_query($this->data);
				$this->header("Content-Type", "application/x-www-form-urlencoded");
			}else if ($this->jsonencode) {
				$data = json_encode($this->data);
				$this->header("Content-Type", "application/json");
			}
			$this->header("Content-Length", strlen($data));

			if (!$this->server->config->sslVerifyPeer)
				curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
			
			if ($method == "POST") {
				curl_setopt($ch, CURLOPT_POST, 1);
			}else if ($method == "GET") {
				curl_setopt($ch, CURLOPT_GET, 1);
			}

			curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
			
			if ($this->doAuth) {
				if ($this->bearer == null) {
					curl_setopt($ch, CURLOPT_USERPWD, $this->user . ":" . $this->pass);
				}else{
					$this->header("Authorization", "Bearer " . $this->bearer);
				}
			}

			$headers = [];
			
			for ($this->_headers as $key => $val) {
				$headers[] = $key . ": " . $val;
			}

			curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

			$response = curl_exec($ch);
			$error = null;
			
			if ($response === false) {
				$error = curl_error($ch);
			}else{
				if ($this->doParse)
					$response = json_decode($response, true);
			}

			$res = new Websom_Result($error, $response);
			$res->status = curl_getinfo($ch, CURLINFO_HTTP_CODE);
			curl_close($ch);

			$callback($res);
		}

		native javascript {
			const request = require("request");
			let data = {};

			data.method = method;

			if (this.urlencode) {
				data.form = this.data;
			}else{
				data.body = this.data;
				data.json = true;
			}

			data.headers = this._headers;
			data.url = this.url;

			if (this.doAuth) {
				if (this.bearer == null) {
					data.auth = {user: this.user, pass: this.pass};
				}else{
					data.headers["Authorization"] = "Bearer " + this.bearer;
				}
			}

			request(data, (err, res) => {
				let body = res.body;

				if (this.doParse) {
					body = JSON.parse(body);
				}
				
				let wres = new Websom.Result(err, body);
				wres.status = res.statusCode;

				callback(wres);
			});
		}
	}

	Websom.RequestChain delete(<void, Websom.Result>function callback) {
		this.makeRequest("DELETE", callback);
		return this;
	}

	Websom.RequestChain put(<void, Websom.Result>function callback) {
		this.makeRequest("PUT", callback);
		return this;
	}

	Websom.RequestChain get(<void, Websom.Result>function callback) {
		this.makeRequest("GET", callback);
		return this;
	}

	Websom.RequestChain post(<void, Websom.Result>function callback) {
		this.makeRequest("POST", callback);
		return this;
	}
}