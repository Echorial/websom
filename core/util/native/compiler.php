<?php
namespace WebsomCarbonite {
//Relative Carbon
//Relative Context
//Relative Error
class FileSystem {

function __construct(...$arguments) {


}

}class FileSystem_File {
public $fileDescriptor;

public $location;

function __construct(...$arguments) {
$this->fileDescriptor = 0;
$this->location = 0;


}

}class FileSystem_Stat {
public $dev;

public $ino;

public $mode;

public $nlink;

public $uid;

public $gid;

public $rdev;

public $size;

public $blksize;

public $blocks;

public $atime;

public $mtime;

public $ctime;

public $birthtime;

function __construct(...$arguments) {
$this->dev = 0;
$this->ino = 0;
$this->mode = 0;
$this->nlink = 0;
$this->uid = 0;
$this->gid = 0;
$this->rdev = 0;
$this->size = 0;
$this->blksize = 0;
$this->blocks = 0;
$this->atime = 0;
$this->mtime = 0;
$this->ctime = 0;
$this->birthtime = 0;


}

}class Memory {

function __construct(...$arguments) {


}

}class Memory_Buffer {

function __construct(...$arguments) {


}

}//Relative primitive
//Relative object
//Relative array
class _c_lib__arrUtils {

function __construct(...$arguments) {


}
static function &readIndex(&$args, $key) {$nll = null; if (isset($args[$key])) return $args[$key]; else return $nll;}
}//Relative bool
//Relative byte
//Relative Console
//Relative everything
//Relative Exception
//Relative float
//Relative function
//Relative int
//Relative uint
//Relative uint8
//Relative int8
//Relative uint16
//Relative int16
//Relative uint32
//Relative int32
//Relative uint64
//Relative int64
//Relative map
class _c_lib__mapUtils {

function __construct(...$arguments) {


}
static function &readIndex(&$args, $key) {$nll = null; if (isset($args[$key])) return $args[$key]; else return $nll;}
}//Relative null
//Relative empty
//Relative void
class cbonStringShiv {

function __construct(...$arguments) {


}
static function &match(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL')) {
$data = $arguments[0];
$reg = $arguments[1];
$matches = [];
preg_match($reg, $data, $matches);
return $matches;
}
}


}//Relative string
class Carbonite {

function __construct(...$arguments) {


}

}class Carbonite_Pre {

function __construct(...$arguments) {


}

}class Carbonite_Pre_Statements {

function __construct(...$arguments) {


}

}class Carbonite_Pre_Values {

function __construct(...$arguments) {


}

}class Carbonite_Pre_Expressions {

function __construct(...$arguments) {


}

}class Carbonite_Members {

function __construct(...$arguments) {


}

}class Carbonite_Statements {

function __construct(...$arguments) {


}

}class Carbonite_Terms {

function __construct(...$arguments) {


}

}class Carbonite_Natives {

function __construct(...$arguments) {


}

}class Carbonite_Parts {

function __construct(...$arguments) {


}

}class Carbonite_Assemblers {

function __construct(...$arguments) {


}

}class Carbonite_Platforms {

function __construct(...$arguments) {


}

}//Relative nativeCarboniteParsers
class Carbonite_Parsers {

function __construct(...$arguments) {


}
static function PreParse(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$input = $arguments[0];
return CarbonitePreprocessor::parse($input);
}
}

static function CarbonParse(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$input = $arguments[0];
return CarboniteCarbonParser::parse($input);
}
}


}class Carbonite_ParserLocation {
public $offset;

public $line;

public $column;

function __construct(...$arguments) {
$this->offset = 0;
$this->line = 1;
$this->column = 0;

if (count($arguments) == 3 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'integer' or gettype($arguments[2]) == 'NULL')) {
$offset = $arguments[0];
$line = $arguments[1];
$column = $arguments[2];
$this->offset = $offset;
$this->line = $line;
$this->column = $column;
}

}

}class Carbonite_ParserError {
public $code;

public $found;

public $expected;

public $vested;

public $offset;

public $line;

public $column;

function __construct(...$arguments) {
$this->code = 0;
$this->found = "";
$this->expected = "";
$this->vested = 0;
$this->offset = 0;
$this->line = 1;
$this->column = 0;

if (count($arguments) == 3 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'integer' or gettype($arguments[2]) == 'NULL')) {
$offset = $arguments[0];
$line = $arguments[1];
$column = $arguments[2];
$this->offset = $offset;
$this->line = $line;
$this->column = $column;
}

}

}class Carbonite_ParserOutput {
public $error;

public $hadError;

public $data;

function __construct(...$arguments) {
$this->error = null;
$this->hadError = false;
$this->data = ['_c__mapC' => true];

if (count($arguments) == 3 and (gettype($arguments[0]) == 'boolean' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_ParserError') or gettype($arguments[1]) == 'NULL') and ((gettype($arguments[2]) == 'array' and isset($arguments[2]['_c__mapC'])) or gettype($arguments[2]) == 'NULL')) {
$hadError = $arguments[0];
$error = $arguments[1];
$data = $arguments[2];
$this->hadError = $hadError;
$this->error = $error;
$this->data = $data;
}

}

}class Carbonite_Location {
public $line;

public $column;

public $offset;

function __construct(...$arguments) {
$this->line = 0;
$this->column = 0;
$this->offset = 0;

if (count($arguments) == 3 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'integer' or gettype($arguments[2]) == 'NULL')) {
$line = $arguments[0];
$column = $arguments[1];
$offset = $arguments[2];
$this->line = $line;
$this->column = $column;
$this->offset = $offset;
}

}

}class Carbonite_Status {
public $hadError;

public $errorCount;

public $firstError;

public $notices;

function __construct(...$arguments) {
$this->hadError = false;
$this->errorCount = 0;
$this->firstError = null;
$this->notices = [];

if (count($arguments) == 0) {

}

}
function stringify(...$arguments) {
if (count($arguments) == 0) {
$notices = [];
for ($i = 0; $i < count($this->notices); $i++) {
$notice = _c_lib__arrUtils::readIndex($this->notices, $i);
array_push($notices, $notice->stringify());}
if (count($notices) == 0) {
return "Ok";}else{
return implode("\n\n", $notices);}
}
}

function give(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Notice') or gettype($arguments[0]) == 'NULL')) {
$notice = $arguments[0];
array_push($this->notices, $notice);
if ($notice->level > 3) {
if ($this->hadError == false) {
$this->hadError = true;
$this->firstError = $notice;}
$this->errorCount++;}
}
}

function inherit(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Status') or gettype($arguments[0]) == 'NULL')) {
$from = $arguments[0];
for ($i = 0; $i < count($from->notices); $i++) {
$notice = _c_lib__arrUtils::readIndex($from->notices, $i);
$this->give($notice);}
}
}


}class Carbonite_Notice {
public $start;

public $end;

public $message;

public $level;

public $module;

public $found;

public $expected;

public $type;

public $source;

function __construct(...$arguments) {
$this->start = null;
$this->end = null;
$this->message = "";
$this->level = 0;
$this->module = "Carbon";
$this->found = "";
$this->expected = "";
$this->type = "Build";
$this->source = null;

if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$message = $arguments[0];
$this->message = $message;
}

}
function stringify(...$arguments) {
if (count($arguments) == 0) {
$level = "";
if ($this->level == 1) {
$level = "Info";}else if ($this->level == 2) {
$level = "Notice";}else if ($this->level == 3) {
$level = "Warning";}else if ($this->level == 4) {
$level = "Error";}
if ($this->start == null) {
$this->start = new Carbonite_Location(0, 0, 0);}
if ($this->end == null) {
$this->end = new Carbonite_Location(0, 1, 1);}
if ($this->type == "Parse") {
return $this->type . "." . $level . ": Found '" . $this->found . "' expected '" . $this->expected . "' at " . $this->source->file . ":" . $this->start->line . ":" . $this->start->column . " in " . $this->module . ".";}else{
return $this->type . "." . $level . ": " . $this->message . " at " . $this->source->file . ":" . $this->start->line . ":" . $this->start->column . " in " . $this->module . ".";}
}
}

static function fromParser(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\CarbonitePreprocessorOutput') or gettype($arguments[1]) == 'NULL')) {
$source = $arguments[0];
$po = $arguments[1];
$message = ["Expected '", $po->error->expected, "' but found '", $po->error->found, "'"];
$notice = new Carbonite_Notice(implode("", $message));
$notice->level = 4;
$notice->module = "Parser";
$notice->type = "Parse";
$notice->source = $source;
$notice->found = $po->error->found;
$notice->expected = $po->error->expected;
$notice->start = new Carbonite_Location($po->error->line, $po->error->column, $po->error->offset);
$notice->end = new Carbonite_Location($po->error->line, $po->error->column, $po->error->offset + 1);
return $notice;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\CarboniteCarbonParserOutput') or gettype($arguments[1]) == 'NULL')) {
$source = $arguments[0];
$po = $arguments[1];
$message = ["Expected '", $po->error->expected, "' but found '", $po->error->found, "'"];
$notice = new Carbonite_Notice(implode("", $message));
$notice->level = 4;
$notice->module = "Parser";
$notice->type = "Parse";
$notice->source = $source;
$notice->found = $po->error->found;
$notice->expected = $po->error->expected;
$notice->start = new Carbonite_Location($po->error->line, $po->error->column, $po->error->offset);
$notice->end = new Carbonite_Location($po->error->line, $po->error->column, $po->error->offset + 1);
return $notice;
}
}


}class Carbonite_Range {
public $startOffset;

public $endOffset;

public $source;

function __construct(...$arguments) {
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;


}
function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Source {
public $parent;

public $name;

public $file;

public $data;

public $alreadyBuilt;

public $built;

public $raw;

public $index;

public $pre;

public $status;

public $pipeline;

public $doc;

public $doCache;

public $mtime;

function __construct(...$arguments) {
$this->parent = null;
$this->name = "";
$this->file = "";
$this->data = "";
$this->alreadyBuilt = false;
$this->built = "";
$this->raw = null;
$this->index = 0;
$this->pre = null;
$this->status = null;
$this->pipeline = false;
$this->doc = false;
$this->doCache = false;
$this->mtime = 0;

if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$data = $arguments[1];
$this->name = $name;
$this->data = $data;
$this->pre = new Carbonite_Pre_Processor($this);
$this->status = $this->pre->status;
}

}
function process(...$arguments) {
if (count($arguments) == 0) {
$this->pre->build();
$this->parent->status->inherit($this->status);
if ($this->pipeline) {
$this->build();}
}
}

function build(...$arguments) {
if (count($arguments) == 0) {
$this->pre->run();
if ($this->pipeline) {
$po = PipelineParser::parse($this->built);
if ($po->hadError) {
}else{
$rules = &_c_lib__mapUtils::readIndex($po->data, "rules");
for ($i = 0; $i < count($rules); $i++) {
$this->parent->pipe(_c_lib__arrUtils::readIndex($rules, $i));}}}else{
if ($this->raw == null) {
$po = Carbonite_Parsers::CarbonParse($this->built);
if ($po->hadError) {
$this->status->give(Carbonite_Notice::fromParser($this, $po));}else{
$this->raw = _c_lib__mapUtils::readIndex($po->data, "document")["roots"];
$this->bake();}}else{
$this->bake();}}
return $this->status;
}
}

function findClass(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Range' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Named' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Class')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Doc') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_NamedHack') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Member' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Members_Method' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Members_Operator')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Members_Property')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Template') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Define') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statement' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_If') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_Return') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_Define') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_For') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_ForIn') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_While') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_Continue') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_Break') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_Native') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_Expression')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_IfAlternative') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Argument') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Expression') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Term' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Literal') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Expression') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Sequence') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Prefix') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Function')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Implements') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Native' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Natives_Integer') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Natives_Float') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Natives_Boolean') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Natives_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Natives_Array')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Natives_ArrayItem')) or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$req = $arguments[1];
return $this->parent->findClass($name, $req);
}
}

function bake(...$arguments) {
if (count($arguments) == 0) {
$temp = [];
for ($i = 0; $i < count($this->raw); $i++) {
$rawClass = &_c_lib__arrUtils::readIndex($this->raw, $i);
$type = _c_lib__mapUtils::readIndex($rawClass, "type");
if ($type == "implements") {
$imp = new Carbonite_Implements($rawClass);
$imp->loadLocation($this, $rawClass);
array_push($this->parent->_c__implements, $imp);}else{
$cls = new Carbonite_Class();
$cls->loadFromRaw($rawClass);
$cls->source = $this;
array_push($this->parent->roots, $cls);
array_push($temp, $cls);}}
$this->parent->router->bake($this, $temp);
}
}

function error(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Range' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Named' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class')) or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Doc') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_NamedHack') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Member' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Method' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Operator')) or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Property')) or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Template') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Define') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Body') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statement' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_If') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_Return') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_Define') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_For') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_ForIn') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_While') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_Continue') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_Break') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_Native') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_Expression')) or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_IfAlternative') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Argument') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Term' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Terms_Literal') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Terms_Expression') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Terms_Sequence') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Terms_Prefix') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Terms_Function')) or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Implements') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Native' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Natives_Integer') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Natives_Float') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Natives_Boolean') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Natives_String') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Natives_Array')) or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Natives_ArrayItem')) or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL')) {
$range = $arguments[0];
$message = $arguments[1];
$notice = new Carbonite_Notice($message);
$notice->level = 4;
$notice->module = "Builder";
$notice->type = "Build";
$notice->source = $this;
$notice->start = $this->pre->getRealLocation($range->startOffset);
$notice->end = $this->pre->getRealLocation($range->endOffset);
$this->status->give($notice);
}
}


}class Carbonite_Context {
public $instance;

public $arguments;

public $templates;

function __construct(...$arguments) {
$this->instance = "";
$this->arguments = [];
$this->templates = [];

if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((gettype($arguments[2]) == 'array' and !isset($arguments[2]['_c__mapC'])) or gettype($arguments[2]) == 'NULL')) {
$instance = $arguments[0];
$args = $arguments[1];
$templates = $arguments[2];
$this->instance = $instance;
$this->arguments = $args;
$this->templates = $templates;
}

}

}class Carbonite_Compiler {
public $scope;

public $functionScope;

public $rawOutput;

public $router;

public $sources;

public $roots;

public $operatorOrders;

public $virtualEvents;

public $buildScript;

public $scripts;

public $status;

public $pipeReference;

public $pipeConfig;

public $autoCache;

public $sourceCaches;

public $implemented;

public $_c__implements;

public $currentLevel;

public $sourceIndex;
public static $version = "1.0.0";

function __construct(...$arguments) {
$this->scope = null;
$this->functionScope = [];
$this->rawOutput = "";
$this->router = null;
$this->sources = [];
$this->roots = [];
$this->operatorOrders = ['_c__mapC' => true];
$this->virtualEvents = null;
$this->buildScript = null;
$this->scripts = [];
$this->status = new Carbonite_Status();
$this->pipeReference = ['_c__mapC' => true];
$this->pipeConfig = ['_c__mapC' => true];
$this->autoCache = false;
$this->sourceCaches = null;
$this->implemented = false;
$this->_c__implements = [];
$this->currentLevel = 0;
$this->sourceIndex = 0;

if (count($arguments) == 0) {
$emp = null;
$this->scope = new Carbonite_Pre_Scope($emp);
$this->router = new Carbonite_Router($this);
$this->buildScript = new Carbide_Virtual_Processor(null);
$this->virtualEvents = new VirtualEventSystem($this->buildScript);
$this->buildScript->setVar("print", function ($args) {var_dump(_c_lib__arrUtils::readIndex($args, 0)->value);});
$compiler = Carbide_Virtual_Values_Map::create(['_c__mapC' => true]);
$that = $this;
$compiler->value["on"] = Carbide_Virtual_Values_Function::create(function ($args) {if (count($args) == 2) {
$cast = _c_lib__arrUtils::readIndex($args, 0);
$that->virtualEvents->on($cast->value, _c_lib__arrUtils::readIndex($args, 1));}});
$compiler->value["emit"] = Carbide_Virtual_Values_Function::create(function ($args) {if (count($args) == 2) {
$cast = _c_lib__arrUtils::readIndex($args, 0);
$argsCast = _c_lib__arrUtils::readIndex($args, 1);
$that->virtualEvents->emit($cast->value, $argsCast->value);}});
$compiler->value["findClass"] = Carbide_Virtual_Values_Function::create(function ($args) {if (count($args) == 1) {
$cast = _c_lib__arrUtils::readIndex($args, 0);
$rtn = $that->getClass($cast->value);
if ($rtn != null) {
return VirtualClass::create($rtn);}}});
$compiler->value["Method"] = Carbide_Virtual_Values_Map::create(['_c__mapC' => true]);
$method = _c_lib__mapUtils::readIndex($compiler->value, "Method");
$method->value["eval"] = Carbide_Virtual_Values_Function::create(function ($args) {if (count($args) == 2) {
$raw = _c_lib__arrUtils::readIndex($args, 0)->value;
$cls = _c_lib__arrUtils::readIndex($args, 1)->value;
return VirtualMember::create(Carbonite_Members_Method::evaluate($raw, $cls));}});
$compiler->value["Property"] = Carbide_Virtual_Values_Map::create(['_c__mapC' => true]);
$property = _c_lib__mapUtils::readIndex($compiler->value, "Property");
$property->value["eval"] = Carbide_Virtual_Values_Function::create(function ($args) {if (count($args) == 2) {
$raw = _c_lib__arrUtils::readIndex($args, 0)->value;
$cls = _c_lib__arrUtils::readIndex($args, 1)->value;
return VirtualMember::create(Carbonite_Members_Property::evaluate($raw, $cls));}});
$compiler->value["Class"] = Carbide_Virtual_Values_Map::create(['_c__mapC' => true]);
$cls = _c_lib__mapUtils::readIndex($compiler->value, "Class");
$cls->value["eval"] = Carbide_Virtual_Values_Function::create(function ($args) {if (count($args) == 1) {
$raw = _c_lib__arrUtils::readIndex($args, 0)->value;
return VirtualClass::create(Carbonite_Class::evaluate($raw, _c_lib__arrUtils::readIndex($that->sources, 0)));}});
$this->buildScript->setValue("Carbon", $compiler);
}

}
function buildTo(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$platformPath = $arguments[0];
$options = $arguments[1];
$platform = Carbonite_Platform::make($this, $platformPath, $options);
$platform->build();
}
}

function getClass(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
for ($i = 0; $i < count($this->roots); $i++) {
$root = _c_lib__arrUtils::readIndex($this->roots, $i);
if ($root->route == $name) {
if ($root->base != "extend") {
return $root;}}}
$emp = null;
return $emp;
}
}

function findClass(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Range' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Named' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Class')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Doc') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_NamedHack') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Member' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Members_Method' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Members_Operator')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Members_Property')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Template') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Define') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statement' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_If') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_Return') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_Define') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_For') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_ForIn') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_While') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_Continue') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_Break') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_Native') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_Expression')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_IfAlternative') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Argument') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Expression') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Term' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Literal') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Expression') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Sequence') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Prefix') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Function')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Implements') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Native' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Natives_Integer') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Natives_Float') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Natives_Boolean') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Natives_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Natives_Array')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Natives_ArrayItem')) or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$req = $arguments[1];
for ($i = 0; $i < count($this->roots); $i++) {
$root = _c_lib__arrUtils::readIndex($this->roots, $i);

if ($root->route == $name) {
if ($root->base != "extend") {
return $root;}}}
$req->source->error($req, "Unable to find class '" . $name . "'");
throw new \Exception("Build error");
}
}

function getPipeReference(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
if (isset($this->pipeReference[$name])) {
return _c_lib__mapUtils::readIndex($this->pipeReference, $name);}
return "";
}
}

function pipe(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$type = _c_lib__mapUtils::readIndex($raw, "type");
if ($type == "rule") {
$value = null;
if (_c_lib__mapUtils::readIndex($raw, "value")["type"] == "literal") {
$value = _c_lib__mapUtils::readIndex($raw, "value")["value"];}else if (_c_lib__mapUtils::readIndex($raw, "value")["type"] == "reference") {
$value = $this->getPipeReference(_c_lib__mapUtils::readIndex($raw, "value")["name"]);}
$ruleName = _c_lib__mapUtils::readIndex($raw, "name");
if ($ruleName[0] == "\$") {
if (strlen($ruleName) > 1) {
$this->pipeReference[substr($ruleName, 1,strlen($ruleName) - 1)] = $value;}}else{
$this->pipeConfig[$ruleName] = $value;}}else if ($type == "call") {
}
}
}

function loadHeader(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$data = $arguments[0];
$roots = &_c_lib__mapUtils::readIndex($data, "roots");
$scripts = &_c_lib__mapUtils::readIndex($data, "scripts");
$heads = [];
for ($i = 0; $i < count($roots); $i++) {
$cls = Carbonite_Class::fromHeader($this, _c_lib__arrUtils::readIndex($roots, $i));
array_push($this->roots, $cls);
array_push($heads, $cls);}
$this->router->bake(null, $heads);
for ($i = 0; $i < count($scripts); $i++) {
$script = &_c_lib__arrUtils::readIndex($scripts, $i);
$block = Carbide_Languages_Carbon::virtualizeIntoProcessor("Header embedded carbon script", _c_lib__mapUtils::readIndex($script, "content")[0]["content"], $this->buildScript);
$block->run($this->buildScript->scope);}
}
}

function addSource(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$code = $arguments[1];
$source = new Carbonite_Source($name, $code);
$source->parent = $this;
$source->index = $this->sourceIndex;
$this->sourceIndex++;
array_push($this->sources, $source);
return $source;
}
}

function build(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$platformRoute = $arguments[0];
$options = $arguments[1];
$platform = Carbonite_Platform::make($this, $platformRoute, $options);
$platforms = ['_c__mapC' => true];
$shivPlatforms = ["javascript", "cpp", "documentation", "php", "header"];
for ($i = 0; $i < count($shivPlatforms); $i++) {
$shivPlatform = _c_lib__arrUtils::readIndex($shivPlatforms, $i);
if ($platform->platform == $shivPlatform) {
$platforms[$shivPlatform] = true;}else{
$platforms[$shivPlatform] = false;}}
$varName = "platform";
$platformInfo = new Carbonite_Pre_Variable($varName, Carbonite_Pre_Values_Map::create($platforms));
$this->scope->addVariable($platformInfo);
for ($i = 0; $i < count($this->sources); $i++) {
$source = _c_lib__arrUtils::readIndex($this->sources, $i);
if ($source->alreadyBuilt == false) {
$source->build();
$this->status->inherit($source->status);
if ($source->status->hadError) {
return $source->status;}
$source->status = $this->status;
$source->alreadyBuilt = true;}}
try {
for ($i = 0; $i < count($this->roots); $i++) {
$root = _c_lib__arrUtils::readIndex($this->roots, $i);
if ($root->alreadyBuilt == false) {
$root->compiler = $this;
if ($root->isFromHeader) {
$root->fillFromHeader();}else{
$root->buildTemplates();}}}
if ($this->implemented == false) {
$this->implemented = true;
for ($i = 0; $i < count($this->_c__implements); $i++) {
$imp = _c_lib__arrUtils::readIndex($this->_c__implements, $i);
$base = $this->findClass($imp->_c__implements, $imp);
$real = $this->findClass($imp->implementer, $imp);
$base->link = $real;}}
$this->currentLevel = 1;
for ($i = count($this->roots) - 1;$i >= 0;$i--) {
$root = _c_lib__arrUtils::readIndex($this->roots, $i);
if ($root->alreadyBuilt == false and $root->raw != null) {
$root->buildDefaultTemplates();}}
$this->currentLevel = 2;
for ($i = count($this->roots) - 1;$i >= 0;$i--) {
$root = _c_lib__arrUtils::readIndex($this->roots, $i);
if ($root->alreadyBuilt == false and $root->raw != null) {
$root->buildMembers();
if ($root->base == "extend") {
$this->findClass($root->route, $root)->extend($root);
array_splice($this->roots, $i, 1);}}}
$this->currentLevel = 3;
for ($i = 0; $i < count($this->roots); $i++) {
$root = _c_lib__arrUtils::readIndex($this->roots, $i);
if ($root->alreadyBuilt == false and $root->raw != null) {
$root->executeInherits();}}
$this->virtualEvents->emit("classes.end", []);
for ($i = 0; $i < count($this->roots); $i++) {
$root = _c_lib__arrUtils::readIndex($this->roots, $i);
if ($root->alreadyBuilt == false) {
$root->buildCode();
$root->alreadyBuilt = true;}}
$this->currentLevel = 4;
} catch(\Exception $err) {};
if ($this->status->hadError == false) {
$platform->build();}
for ($i = 0; $i < count($this->sources); $i++) {
$source = _c_lib__arrUtils::readIndex($this->sources, $i);
if ($source->doCache) {
$source->parent->setCache($source->file, $source->mtime, $source->raw);}}
return $this->status;
}
}

function buildClassToCurrentLevel(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$root = $arguments[0];
$i = $arguments[1];
try {;
if ($this->currentLevel >= 0) {
if ($root->alreadyBuilt == false) {
$root->compiler = $this;
$root->buildTemplates();}}
if ($this->currentLevel >= 1) {
if ($root->alreadyBuilt == false) {
$root->buildDefaultTemplates();}}
if ($this->currentLevel >= 2) {
if ($root->alreadyBuilt == false) {
$root->buildMembers();
if ($root->base == "extend") {
$this->findClass($root->route, $root)->extend($root);
array_splice($this->roots, $i, 1);}}}
if ($this->currentLevel >= 3) {
if ($root->alreadyBuilt == false) {
$root->buildCode();
$root->alreadyBuilt = true;}}
} catch(Exception $err) {};
}
}

function loadCache(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
for ($i = 0; $i < count($raw); $i++) {
$parsed = &_c_lib__mapUtils::readIndex(_c_lib__arrUtils::readIndex($raw, $i), "parsed");
$path = _c_lib__mapUtils::readIndex(_c_lib__arrUtils::readIndex($raw, $i), "path");
$timeStamp = _c_lib__mapUtils::readIndex(_c_lib__arrUtils::readIndex($raw, $i), "timeStamp");
$this->setCache(Oxygen_FileSystem::normalize($path), $timeStamp, $parsed);}
}
}

function getCache(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\uint64') or gettype($arguments[1]) == 'NULL')) {
$path = $arguments[0];
$timeStamp = $arguments[1];
if ($this->sourceCaches == null) {
return null;}
for ($i = 0; $i < count($this->sourceCaches); $i++) {
$iCache = _c_lib__arrUtils::readIndex($this->sourceCaches, $i);
if ($iCache->path == $path) {
if ($iCache->timeStamp < $timeStamp) {
return null;}
return $iCache;}}
}
}

function setCache(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\uint64') or gettype($arguments[1]) == 'NULL') and ((gettype($arguments[2]) == 'array' and !isset($arguments[2]['_c__mapC'])) or gettype($arguments[2]) == 'NULL')) {
$path = $arguments[0];
$timeStamp = $arguments[1];
$raw = $arguments[2];
if ($this->sourceCaches == null) {
$this->sourceCaches = [];}
for ($i = 0; $i < count($this->sourceCaches); $i++) {
$iCache = _c_lib__arrUtils::readIndex($this->sourceCaches, $i);
if ($iCache->path == $path) {
$iCache->update($timeStamp, $raw);
return null;}}
$sCache = new Carbonite_SourceCache($path, $timeStamp, $raw);
array_push($this->sourceCaches, $sCache);
}
}

function getPipelineSource(...$arguments) {
if (count($arguments) == 0) {
for ($i = 0; $i < count($this->sources); $i++) {
if (_c_lib__arrUtils::readIndex($this->sources, $i)->pipeline) {
return _c_lib__arrUtils::readIndex($this->sources, $i);}}
return null;
}
}


}class Carbonite_Level {
public $names;

public $level;

function __construct(...$arguments) {
$this->names = [];
$this->level = 0;

if (count($arguments) == 1 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL')) {
$lvl = $arguments[0];
$this->level = $lvl;
}

}

}class Carbonite_Router {
public $cacheMap;

public $levelMap;

public $parent;

function __construct(...$arguments) {
$this->cacheMap = ['_c__mapC' => true];
$this->levelMap = [];
$this->parent = null;

if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Compiler') or gettype($arguments[0]) == 'NULL')) {
$parent = $arguments[0];
$this->parent = $parent;
}

}
function getLevel(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL')) {
$level = $arguments[0];
$lvlCast = &$this->levelMap;
for ($i = 0; $i < count($this->levelMap); $i++) {
$lvl = _c_lib__arrUtils::readIndex($lvlCast, $i);
if ($lvl->level == $level) {
return $lvl;}}
$emp = null;
return $emp;
}
}

function addToLevel(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Named' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class')) or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$nme = $arguments[0];
$level = $arguments[1];
$lvlCast = &$this->levelMap;
for ($i = 0; $i < count($this->levelMap); $i++) {
$lvl = _c_lib__arrUtils::readIndex($lvlCast, $i);
if ($lvl->level == $level) {
array_push($lvl->names, $nme);
return true;}}
$nl = new Carbonite_Level($level);
array_push($nl->names, $nme);
array_push($this->levelMap, $nl);
return true;
}
}

function getNamedAtLevel(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$route = $arguments[0];
$level = $arguments[1];
$lvl = $this->getLevel($level);
if ($lvl != null) {
$names = &$lvl->names;
for ($i = 0; $i < count($lvl->names); $i++) {
$nme = _c_lib__arrUtils::readIndex($names, $i);
if ($nme->route == $route) {
return $nme;}}}
$emp = null;
return $emp;
}
}

function getOwnName(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Named' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class')) or gettype($arguments[0]) == 'NULL')) {
$nme = $arguments[0];
$splits = explode(".", $nme->route);
$lst = count($splits) - 1;
$rtn = _c_lib__arrUtils::readIndex($splits, $lst);
return $rtn;
}
}

function getParentString(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Named' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class')) or gettype($arguments[0]) == 'NULL')) {
$nme = $arguments[0];
$splits = explode(".", $nme->route);
$lst = array_pop($splits);
$rtn = implode(".", $splits);
return $rtn;
}
}

function bake(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$container = $arguments[0];
$names = $arguments[1];
$high = 1;
for ($i = 0; $i < count($names); $i++) {
$nme = _c_lib__arrUtils::readIndex($names, $i);
$nme->name = $this->getOwnName($nme);
$splits = explode(".", $nme->route);
$level = count($splits);
$this->addToLevel($nme, $level);
if ($level > $high) {
$high = $level;}}
for ($i = 1;$i <= $high;$i++) {
$lvl = $this->getLevel($i);
if ($lvl != null) {
if ($i == 1) {
}else{
$nmes = &$lvl->names;
for ($j = 0;$j < count($lvl->names);$j++) {
$nme = _c_lib__arrUtils::readIndex($nmes, $j);
$parent = $this->getNamedAtLevel($this->getParentString($nme), $i - 1);
if ($nme->leveled == false) {
if ($parent != null) {
if ($parent->hasChild($nme->name) == false) {
array_push($parent->children, $nme);
$nme->parent = $parent;
$nme->leveled = true;}else{
$nmeCast = $nme;
if ($nmeCast->base == "extend") {
$cls = $parent->getChild($nme->name);
$cls->extend($nme);}else{
$container->error($nme, "Use extend on class '" . $nme->route . "' to add to an already existing class");}}}else{
$container->error($nme, "Unable to put " . $nme->name . " into a non namespace <" . $nme->route . "> " . $this->getParentString($nme));}}}}}else{
}}
}
}


}class Carbonite_Class {
public $raw;

public $headerData;

public $isFromHeader;

public $members;

public $inherits;

public $templates;

public $descendants;

public $attributes;

public $reroute;

public $propertyContext;

public $link;

public $alreadyBuilt;

public $codeBuilt;

public $inherited;

public $doc;

public $base;

public $flags;

public $route;

public $name;

public $leveled;

public $compiler;

public $children;

public $parent;

public $startOffset;

public $endOffset;

public $source;

function __construct(...$arguments) {
$this->raw = null;
$this->headerData = null;
$this->isFromHeader = false;
$this->members = [];
$this->inherits = [];
$this->templates = [];
$this->descendants = [];
$this->attributes = null;
$this->reroute = "";
$this->propertyContext = null;
$this->link = null;
$this->alreadyBuilt = false;
$this->codeBuilt = false;
$this->inherited = false;
$this->doc = null;
$this->base = "";
$this->flags = null;
$this->route = "";
$this->name = "";
$this->leveled = false;
$this->compiler = null;
$this->children = [];
$this->parent = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 0) {
$hackMap = ['_c__mapC' => true];
$emp = null;
$hack = new Carbonite_Member($this, $emp);
$hack->name = "propertyContext";
$this->propertyContext = new Carbonite_Body($hack, $hackMap);
}

}
static function evaluate(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[1]) == 'NULL')) {
$raw = $arguments[0];
$parent = $arguments[1];
$output = CarboniteCarbonParser::parse("Root", $raw);
if ($output->hadError) {
$parent->parent->status->give(Carbonite_Notice::fromParser($parent, $output));}else{
$cls = new Carbonite_Class();
$cls->loadFromRaw(_c_lib__mapUtils::readIndex($output->data, "data"));
$cls->source = $parent;
array_push($parent->parent->roots, $cls);
$temp = [];
array_push($temp, $cls);
$parent->parent->router->bake($parent, $temp);
$parent->parent->buildClassToCurrentLevel($cls, count($parent->parent->roots) - 1);
return $cls;}
}
}

function getRoute(...$arguments) {
if (count($arguments) == 0) {
if ($this->reroute != "") {
return $this->reroute;}
return $this->route;
}
}

function descendantOf(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL')) {
$of = $arguments[0];
for ($i = 0; $i < count($this->inherits); $i++) {
$inh = _c_lib__arrUtils::readIndex($this->inherits, $i);
if ($of->route == $inh->route) {
return true;}else if ($inh->descendantOf($of)) {
return true;}}
if ($of->parent != null) {
$parent = $of->parent;
return $this->descendantOf($parent);}
return false;
}
}

function dotMember(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Range' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Named' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Class')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Doc') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_NamedHack') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Member' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Members_Method' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Members_Operator')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Members_Property')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Template') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Define') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statement' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_If') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_Return') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_Define') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_For') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_ForIn') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_While') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_Continue') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_Break') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_Native') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_Expression')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Statements_IfAlternative') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Argument') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Expression') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Term' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Literal') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Expression') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Sequence') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Prefix') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Function')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Implements') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Native' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Natives_Integer') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Natives_Float') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Natives_Boolean') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Natives_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Natives_Array')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Natives_ArrayItem')) or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$req = $arguments[1];
$this->executeInherits();
for ($i = 0; $i < count($this->members); $i++) {
$member = _c_lib__arrUtils::readIndex($this->members, $i);
if ($member->name == $name) {
return $member;}}
$dots = &$this->getMethods("@dot");
if (count($dots) > 0) {
$dot = _c_lib__arrUtils::readIndex($dots, 0);
return $dot;}
$req->source->error($req, "No member named '" . $name . "' in class '" . $this->name . "'");
throw new Exception("Build error");
}
}

function &getMethods(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
$rtn = [];
for ($i = 0; $i < count($this->members); $i++) {
$member = _c_lib__arrUtils::readIndex($this->members, $i);
if ($member->name == $name) {
if ($member->type != "property") {
array_push($rtn, $member);}}}
return $rtn;
}
}

function makeArgumentsPretty(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$___arguments = $arguments[1];
$types = [];
for ($i = 0; $i < count($___arguments); $i++) {
$arg = _c_lib__arrUtils::readIndex($___arguments, $i);
array_push($types, $arg->lookPretty());}
return "Unable to overload for method or operator " . $this->route . "." . $name . "(" . implode(", ", $types) . ")";
}
}

function overload(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Range' or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Named' or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Class')) or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Doc') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_NamedHack') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Member' or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Members_Method' or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Members_Operator')) or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Members_Property')) or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Template') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Define') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Body') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Statement' or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Statements_If') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Statements_Return') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Statements_Define') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Statements_For') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Statements_ForIn') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Statements_While') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Statements_Continue') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Statements_Break') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Statements_Native') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Statements_Expression')) or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Statements_IfAlternative') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Argument') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Expression') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Term' or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Terms_Literal') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Terms_Expression') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Terms_Sequence') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Terms_Prefix') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Terms_Function')) or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Implements') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Native' or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Natives_Integer') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Natives_Float') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Natives_Boolean') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Natives_String') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Natives_Array')) or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Natives_ArrayItem')) or gettype($arguments[2]) == 'NULL')) {
$name = $arguments[0];
$___arguments = $arguments[1];
$req = $arguments[2];
$this->executeInherits();
$methods = &$this->getMethods($name);
for ($i = 0; $i < count($methods); $i++) {
$method = _c_lib__arrUtils::readIndex($methods, $i);
if ($method->check($___arguments)) {
return $method;}}
$req->source->error($req, $this->makeArgumentsPretty($name, $___arguments));
throw new Exception("Build error");
}
}

function overloadWithContext(...$arguments) {
if (count($arguments) == 4 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or gettype($arguments[2]) == 'NULL') and ((get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Range' or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Named' or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Class')) or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Doc') or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_NamedHack') or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Member' or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Members_Method' or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Members_Operator')) or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Members_Property')) or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Template') or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Define') or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Body') or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Statement' or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Statements_If') or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Statements_Return') or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Statements_Define') or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Statements_For') or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Statements_ForIn') or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Statements_While') or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Statements_Continue') or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Statements_Break') or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Statements_Native') or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Statements_Expression')) or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Statements_IfAlternative') or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Argument') or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Expression') or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Term' or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Terms_Literal') or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Terms_Expression') or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Terms_Sequence') or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Terms_Prefix') or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Terms_Function')) or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Implements') or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Native' or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Natives_Integer') or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Natives_Float') or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Natives_Boolean') or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Natives_String') or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Natives_Array')) or (get_class($arguments[3]) == 'WebsomCarbonite\Carbonite_Natives_ArrayItem')) or gettype($arguments[3]) == 'NULL')) {
$name = $arguments[0];
$___arguments = $arguments[1];
$context = $arguments[2];
$req = $arguments[3];
$methods = &$this->getMethods($name);
for ($i = 0; $i < count($methods); $i++) {
$method = _c_lib__arrUtils::readIndex($methods, $i);
if ($method->checkWithContext($___arguments, $context)) {
return $method;}}
$req->source->error($req, $this->makeArgumentsPretty($name, $___arguments));
throw new Exception("Build error");
}
}

function loadFromRaw(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
$this->route = _c_lib__mapUtils::readIndex($this->raw, "name");
$this->base = _c_lib__mapUtils::readIndex($this->raw, "type");
$this->flags = _c_lib__mapUtils::readIndex($this->raw, "flags");
$this->startOffset = _c_lib__mapUtils::readIndex($this->raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($this->raw, "end");
$this->attributes = _c_lib__mapUtils::readIndex($raw, "attribute");
if ($this->attributes == null) {
$this->attributes = [];}
$this->doc = new Carbonite_Doc(_c_lib__mapUtils::readIndex($this->raw, "doc"));
}
}

function &getAttribute(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL')) {
$attrs = $arguments[0];
$name = $arguments[1];
for ($i = 0; $i < count($attrs); $i++) {
$a = &_c_lib__arrUtils::readIndex($attrs, $i);
if (_c_lib__mapUtils::readIndex($a, "key") == $name) {
return $a;}}
$emp = null;
return $emp;
}
}

function hasFlag(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
for ($i = 0; $i < count($this->flags); $i++) {
if (_c_lib__arrUtils::readIndex($this->flags, $i) == $name) {
return true;}}
return false;
}
}

function findParent(...$arguments) {
if (count($arguments) == 0) {
$splits = explode(".", $this->route);
if (count($splits) > 1) {
array_pop($splits);
$parentRoute = implode(".", $splits);
$parent = $this->compiler->findClass($parentRoute, $this);
$this->parent = $parent;
array_push($this->parent->children, $this);}
}
}

function executeInherits(...$arguments) {
if (count($arguments) == 0) {
if ($this->inherited) {
}else{
if ($this->route != "everything") {
array_push($this->inherits, $this->compiler->findClass("everything", $this));}
for ($i = 0; $i < count($this->inherits); $i++) {
$cls = _c_lib__arrUtils::readIndex($this->inherits, $i);
$cls->executeInherits();
$this->inherit($cls);
array_push($cls->descendants, $this);}
$this->inherited = true;}
}
}

function buildCode(...$arguments) {
if (count($arguments) == 0) {
$this->executeInherits();
for ($i = 0; $i < count($this->members); $i++) {
$member = _c_lib__arrUtils::readIndex($this->members, $i);
if ($member->raw == null) {
continue;}
if ($member->type != "property") {
$method = $member;
$method->buildBody();}else{
$property = $member;
$property->buildDefault();}}
}
}

function makeMember(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$mem = $arguments[0];
if (_c_lib__mapUtils::readIndex($mem, "attribute") != null) {
$cst = &_c_lib__mapUtils::readIndex($mem, "attribute");
$attr = &$this->getAttribute($cst, "operator");
if ($attr != null) {
$member = new Carbonite_Members_Operator($this, $mem);
$op = &$member->getAttributes("operator");
$cAttr = &_c_lib__arrUtils::readIndex($op, 0);
$member->operator = _c_lib__mapUtils::readIndex($cAttr, "value");
$member->realName = $member->name;
$member->name = $member->operator;
$order = &$member->getAttributes("order");
if (count($order) > 0) {
$mainOrder = &_c_lib__arrUtils::readIndex($order, 0);
$member->order = _c_lib__mapUtils::readIndex($mainOrder, "value");}
return $member;}else{
return Carbonite_Member::make($this, $mem);}}else{
return Carbonite_Member::make($this, $mem);}
}
}

function buildMembers(...$arguments) {
if (count($arguments) == 0) {
$members = &_c_lib__mapUtils::readIndex($this->raw, "members");
for ($i = count($members) - 1;$i >= 0;$i--) {
$mem = &_c_lib__arrUtils::readIndex($members, $i);
if (_c_lib__mapUtils::readIndex($mem, "attribute") != null) {
$cst = &_c_lib__mapUtils::readIndex($mem, "attribute");
$attr = &$this->getAttribute($cst, "operator");
if ($attr != null) {
$member = new Carbonite_Members_Operator($this, $mem);
$op = &$member->getAttributes("operator");
$cAttr = &_c_lib__arrUtils::readIndex($op, 0);
$member->operator = _c_lib__mapUtils::readIndex($cAttr, "value");
$member->realName = $member->name;
$member->name = $member->operator;
$order = &$member->getAttributes("order");
if (count($order) > 0) {
$mainOrder = &_c_lib__arrUtils::readIndex($order, 0);
$member->order = _c_lib__mapUtils::readIndex($mainOrder, "value");}
$this->compiler->operatorOrders[$member->operator] = $member->order;
array_push($this->members, $member);}}}
for ($i = 0; $i < count($members); $i++) {
$mem = &_c_lib__arrUtils::readIndex($members, $i);
$cst = &_c_lib__mapUtils::readIndex($mem, "attribute");
$attr = null;
if ($cst != null) {
$this->getAttribute($cst, "operator");}
if ($attr == null) {
$member = Carbonite_Member::make($this, _c_lib__arrUtils::readIndex($members, $i));
array_push($this->members, $member);}}
$arr = [];
array_push($arr, VirtualClass::create($this));
$this->compiler->virtualEvents->emit("members.end", $arr);
}
}

function buildTemplates(...$arguments) {
if (count($arguments) == 0) {
$temp = &_c_lib__mapUtils::readIndex($this->raw, "templates");
if (count($temp) != 0) {
$templates = &_c_lib__mapUtils::readIndex($this->raw, "templates")[0]["templates"];
for ($i = 0; $i < count($templates); $i++) {
$template = new Carbonite_Template($this);
$template->index = $i;
$template->loadFromRaw(_c_lib__arrUtils::readIndex($templates, $i));
array_push($this->templates, $template);}}
}
}

function buildInheritance(...$arguments) {
if (count($arguments) == 0) {
if (_c_lib__mapUtils::readIndex($this->raw, "inherits") != null) {
$inherits = &_c_lib__mapUtils::readIndex($this->raw, "inherits")["types"];
for ($i = 0; $i < count($inherits); $i++) {
$inherit = &_c_lib__arrUtils::readIndex($inherits, $i);
$name = _c_lib__mapUtils::readIndex($inherit, "name");
$cls = $this->compiler->findClass($name, $this);
array_push($this->inherits, $cls);}}
}
}

function getMember(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
for ($i = 0; $i < count($this->members); $i++) {
$member = _c_lib__arrUtils::readIndex($this->members, $i);
if ($member->name == $name) {
return $member;}}
$emp = null;
return $emp;
}
}

function inherit(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL')) {
$from = $arguments[0];
if ($from->isFromHeader) {
if ($from->raw == null) {
$this->buildError("Class '" . $this->route . "' is not allowed to inherit a non exported header class '" . $from->route . "'");}}
if ($from->hasFlag("header")) {
array_push($this->flags, "header");}
$arr = [];
array_push($arr, VirtualClass::create($from));
array_push($arr, VirtualClass::create($this));
$this->compiler->virtualEvents->emit("inherits." . $from->route, $arr);
for ($i = 0; $i < count($from->members); $i++) {
$mem = _c_lib__arrUtils::readIndex($from->members, $i);
$notImplemented = true;
$check = $this->getMember($mem->name);
if ($check != null) {
if ($check->hasFlag("override") or $mem->_c__abstract) {
$notImplemented = false;}}
if ($notImplemented) {
if ($mem->_c__abstract) {
$this->buildError("Class '" . $this->route . "' must implement the abstract member '" . $mem->name . "'");}else{
$member = $this->makeMember($mem->raw);
$member->inheritedFrom = $from;
if ($from->route == "everything") {
$castMethod = $member;
$castMethod->simpleNative = true;}
array_push($this->members, $member);}}else{
if ($mem->_c__abstract) {
if ($mem->type != $check->type) {
$this->buildError("Abstract " . $check->type . " '" . $check->name . "' must be a " . $mem->type . " in class '" . $this->route . "'");}
if ($mem->output->check($check->output) == false) {
$this->buildError("Invalid output type for abstract member '" . $check->name . "' in class '" . $this->route . "'");}
if ($mem->type == "method") {
$memCast = $mem;
$checkCast = $check;
$checks = [];
for ($c = 0; $c < count($checkCast->arguments); $c++) {
array_push($checks, _c_lib__arrUtils::readIndex($checkCast->arguments, $c)->type);}
if ($memCast->check($checks) == false) {
$this->buildError("Invalid argument type(s) for abstract method '" . $check->name . "' in class '" . $this->route . "'");}}}}}
}
}

function buildDefaultTemplates(...$arguments) {
if (count($arguments) == 0) {
for ($i = 0; $i < count($this->templates); $i++) {
$template = _c_lib__arrUtils::readIndex($this->templates, $i);
$template->build();}
$this->buildInheritance();
}
}

function extend(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL')) {
$from = $arguments[0];
$this->inherit($from);
}
}

function hasTemplate(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
for ($i = 0; $i < count($this->templates); $i++) {
$template = _c_lib__arrUtils::readIndex($this->templates, $i);
if ($template->name == $name) {
return true;}}
return false;
}
}

function getTemplate(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
for ($i = 0; $i < count($this->templates); $i++) {
$template = _c_lib__arrUtils::readIndex($this->templates, $i);
if ($template->name == $name) {
return $template;}}
$emp = null;
return $emp;
}
}

function getChild(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
$cast = $this;
for ($i = 0; $i < count($cast->children); $i++) {
$child = _c_lib__arrUtils::readIndex($cast->children, $i);
if ($child->name == $name) {
return $child;}}
$emp = null;
return $emp;
}
}

function hasChild(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
$cast = $this;
for ($i = 0; $i < count($cast->children); $i++) {
$child = _c_lib__arrUtils::readIndex($cast->children, $i);
if ($child->name == $name) {
return true;}}
return false;
}
}

function docDynamic(...$arguments) {
if (count($arguments) == 0) {
$inherits = [];
for ($i = 0; $i < count($this->inherits); $i++) {
array_push($inherits, "\"" . _c_lib__arrUtils::readIndex($this->inherits, $i)->route . "\"");}
$members = [];
for ($i = 0; $i < count($this->members); $i++) {
array_push($members, _c_lib__arrUtils::readIndex($this->members, $i)->docDynamic());}
$output = "{\"type\": \"class\", route: \"" . $this->route . "\", name: \"" . $this->name . "\", \"doc\": \"" . $this->doc->docDynamic() . "\", \"inherits\": [" . implode(",", $inherits) . "], \"members\": [" . implode(",", $members) . "]}";
return $output;
}
}

function canCast(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL')) {
$to = $arguments[0];
for ($i = 0; $i < count($this->members); $i++) {
if (_c_lib__arrUtils::readIndex($this->members, $i)->name == "@cast") {
if (_c_lib__arrUtils::readIndex($this->members, $i)->output->reference->route == $to->route) {
return true;}}}
return false;
}
}

function fillFromHeader(...$arguments) {
if (count($arguments) == 0) {
if (isset($this->headerData["raw"])) {
return null;}
$members = &_c_lib__mapUtils::readIndex($this->headerData, "members");
$inherits = &_c_lib__mapUtils::readIndex($this->headerData, "inherits");
for ($i = 0; $i < count($members); $i++) {
array_push($this->members, Carbonite_Member::fromHeader($this, _c_lib__arrUtils::readIndex($members, $i)));}
for ($i = 0; $i < count($inherits); $i++) {
$inheritClass = $this->compiler->getClass(_c_lib__arrUtils::readIndex($inherits, $i));
if ($inheritClass->isFromHeader == false) {
array_push($this->inherits, $inheritClass);}}
}
}

static function fromHeader(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Compiler') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$compiler = $arguments[0];
$data = $arguments[1];
$cls = new Carbonite_Class();
$templates = &_c_lib__mapUtils::readIndex($data, "templates");
$cls->flags = _c_lib__mapUtils::readIndex($data, "flags");
array_push($cls->flags, "relative");
$cls->base = _c_lib__mapUtils::readIndex($data, "base");
$cls->route = _c_lib__mapUtils::readIndex($data, "route");
$cls->name = _c_lib__mapUtils::readIndex($data, "name");
if (isset($data["raw"])) {
$cls->loadFromRaw(_c_lib__mapUtils::readIndex($data, "raw"));
$cls->isFromHeader = true;
$cls->headerData = $data;
$cls->compiler = $compiler;}else{
$cls->headerData = $data;
$cls->compiler = $compiler;
$cls->isFromHeader = true;}
return $cls;
}
}

function toHeader(...$arguments) {
if (count($arguments) == 0) {
$inherits = [];
for ($i = 0; $i < count($this->inherits); $i++) {
array_push($inherits, "\"" . _c_lib__arrUtils::readIndex($this->inherits, $i)->route . "\"");}
$members = [];
for ($i = 0; $i < count($this->members); $i++) {
if (_c_lib__arrUtils::readIndex($this->members, $i)->inheritedFrom != null) {
if (_c_lib__arrUtils::readIndex($this->members, $i)->inheritedFrom->route == "everything") {
continue;}}
array_push($members, _c_lib__arrUtils::readIndex($this->members, $i)->toHeader());}
$raw = "";
if ($this->hasFlag("header")) {
$raw = ", \"raw\": " . json_encode($this->raw);}
$flags = [];
for ($i = 0; $i < count($this->flags); $i++) {
array_push($flags, "\"" . _c_lib__arrUtils::readIndex($this->flags, $i) . "\"");}
$temps = [];
for ($i = 0; $i < count($this->templates); $i++) {
$def = "";
if (_c_lib__arrUtils::readIndex($this->templates, $i)->_c__default != null) {
$temp = _c_lib__arrUtils::readIndex($this->templates, $i);
$def = ", \"default\": " . $temp->_c__default->toHeader();}
array_push($temps, "{\"name\": \"" . _c_lib__arrUtils::readIndex($this->templates, $i)->name . "\"" . $def . "}");}
return "{\"type\": \"class\", \"base\": \"" . $this->base . "\", \"flags\": [" . implode(",", $flags) . "], \"templates\": [" . implode(",", $temps) . "], \"route\": \"" . $this->route . "\", \"name\": \"" . $this->name . "\", \"inherits\": [" . implode(",", $inherits) . "], \"members\": [" . implode(",", $members) . "]" . $raw . "}";
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Doc {
public $raw;

public $startOffset;

public $endOffset;

public $source;

function __construct(...$arguments) {
$this->raw = [];
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
if ($raw != null) {
for ($i = 0; $i < count($raw); $i++) {
array_push($this->raw, _c_lib__arrUtils::readIndex($raw, $i));}}
}

}
function docDynamic(...$arguments) {
if (count($arguments) == 0) {
$output = "";
for ($i = 0; $i < count($this->raw); $i++) {
$output .= addcslashes(_c_lib__arrUtils::readIndex($this->raw, $i), '"
\\');}
return $output;
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_NamedHack {
public $startOffset;

public $endOffset;

public $source;

function __construct(...$arguments) {
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;


}
function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Named {
public $route;

public $name;

public $leveled;

public $compiler;

public $children;

public $parent;

public $startOffset;

public $endOffset;

public $source;

function __construct(...$arguments) {
$this->route = "";
$this->name = "";
$this->leveled = false;
$this->compiler = null;
$this->children = [];
$this->parent = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;


}
function getChild(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
$cast = $this;
for ($i = 0; $i < count($cast->children); $i++) {
$child = _c_lib__arrUtils::readIndex($cast->children, $i);
if ($child->name == $name) {
return $child;}}
$emp = null;
return $emp;
}
}

function hasChild(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
$cast = $this;
for ($i = 0; $i < count($cast->children); $i++) {
$child = _c_lib__arrUtils::readIndex($cast->children, $i);
if ($child->name == $name) {
return true;}}
return false;
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Member {
public $binding;

public $visibility;

public $inheritedFrom;

public $doc;

public $name;

public $output;

public $flags;

public $attributes;

public $parent;

public $_c__abstract;

public $type;

public $raw;

public $startOffset;

public $endOffset;

public $source;

function __construct(...$arguments) {
$this->binding = "bound";
$this->visibility = "public";
$this->inheritedFrom = null;
$this->doc = null;
$this->name = "";
$this->output = null;
$this->flags = [];
$this->attributes = null;
$this->parent = null;
$this->_c__abstract = false;
$this->type = "";
$this->raw = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->parent = $parent;
if ($raw == null) {
}else{
$this->raw = $raw;
$this->doc = new Carbonite_Doc(_c_lib__mapUtils::readIndex($this->raw, "doc"));
$this->attributes = _c_lib__mapUtils::readIndex($raw, "attribute");
if ($this->attributes == null) {
$this->attributes = [];}
$this->loadLocation($this->parent, $this->raw);
$this->name = _c_lib__mapUtils::readIndex($this->raw, "name");
$this->output = new Carbonite_Type($parent->compiler, $parent);
$rawOutput = &_c_lib__mapUtils::readIndex($this->raw, "output");
if (_c_lib__mapUtils::readIndex($rawOutput, "name") == "function") {
if (_c_lib__mapUtils::readIndex($raw, "type") == "method") {
$rawOutput = _c_lib__mapUtils::readIndex($rawOutput, "template")[0];}}else if (_c_lib__mapUtils::readIndex($rawOutput, "name") == null) {
$this->buildError("No output type provided for member '" . _c_lib__mapUtils::readIndex($raw, "flags")[0] . "' in class '" . $parent->route . "'");}
$this->output->loadFromRaw($rawOutput);
$flags = &_c_lib__mapUtils::readIndex($raw, "flags");
for ($i = count($flags) - 1;$i >= 0;$i--) {
$flag = _c_lib__arrUtils::readIndex($flags, $i);
if ($flag == "fixed") {
$this->binding = "fixed";}else if ($flag == "private") {
$this->visibility = "private";}else if ($flag == "protected") {
$this->visibility = "protected";}else if ($flag != "bound" and $flag != "public") {
array_push($this->flags, $flag);}}
$this->build();}
}

}
function &getAttributes(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$key = $arguments[0];
$found = [];
for ($i = 0; $i < count($this->attributes); $i++) {
$a = &_c_lib__arrUtils::readIndex($this->attributes, $i);
if (_c_lib__mapUtils::readIndex($a, "key") == $key) {
array_push($found, $a);}}
return $found;
}
}

static function makeReference(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Member' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Members_Method' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Members_Operator')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Members_Property')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or gettype($arguments[2]) == 'NULL')) {
$parent = $arguments[0];
$mem = $arguments[1];
$ctx = $arguments[2];
$rtn = null;
if ($mem->type == "property") {
$rtn = new Carbonite_Members_ReferenceProperty($mem, $ctx);}else{
$rtn = new Carbonite_Members_ReferenceMethod($mem, $ctx);}
return $rtn;
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$type = _c_lib__mapUtils::readIndex($raw, "type");
$rtn = null;
if ($type == "method") {
$rtn = new Carbonite_Members_Method($parent, $raw);
$rtn->type = "method";}else if ($type == "property") {
$rtn = new Carbonite_Members_Property($parent, $raw);
$rtn->type = "property";}else if ($type == "operator") {
$rtn = new Carbonite_Members_Operator($parent, $raw);
$rtn->type = "operator";
$cast = $rtn;
$parent->compiler->operatorOrders[$cast->operator] = $cast->order;}
return $rtn;
}
}

function build(...$arguments) {
if (count($arguments) == 0) {

}
}

function hasFlag(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$flag = $arguments[0];
for ($i = 0; $i < count($this->flags); $i++) {
$cur = _c_lib__arrUtils::readIndex($this->flags, $i);
if ($cur == $flag) {
return true;}}
return false;
}
}

function extraDocDynamic(...$arguments) {
if (count($arguments) == 0) {

}
}

function docDynamic(...$arguments) {
if (count($arguments) == 0) {
$extra = $this->extraDocDynamic();
if ($extra != null) {
$extra = ", " . $extra;}else{
$extra = "";}
return "{\"type\": \"" . $this->type . "\", \"name\": \"" . $this->name . "\", \"doc\": \"" . $this->doc->docDynamic() . "\", \"output\": \"" . $this->output->lookPretty() . "\"" . $extra . "}";
}
}

static function fromHeader(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$data = $arguments[1];
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "method") {
return Carbonite_Members_Method::fromHeader($parent, $data);}else if ($type == "property") {
return Carbonite_Members_Property::fromHeader($parent, $data);}
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_ReferenceMember {
public $type;

public $output;

function __construct(...$arguments) {
$this->type = "";
$this->output = null;


}

}class Carbonite_Members_Method {
public $body;

public $arguments;

public $variatic;

public $simpleNative;

public $binding;

public $visibility;

public $inheritedFrom;

public $doc;

public $name;

public $output;

public $flags;

public $attributes;

public $parent;

public $_c__abstract;

public $type;

public $raw;

public $startOffset;

public $endOffset;

public $source;

function __construct(...$arguments) {
$this->body = null;
$this->arguments = [];
$this->variatic = false;
$this->simpleNative = false;
$this->binding = "bound";
$this->visibility = "public";
$this->inheritedFrom = null;
$this->doc = null;
$this->name = "";
$this->output = null;
$this->flags = [];
$this->attributes = null;
$this->parent = null;
$this->_c__abstract = false;
$this->type = "";
$this->raw = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->parent = $parent;
if ($raw == null) {
}else{
$this->raw = $raw;
$this->doc = new Carbonite_Doc(_c_lib__mapUtils::readIndex($this->raw, "doc"));
$this->attributes = _c_lib__mapUtils::readIndex($raw, "attribute");
if ($this->attributes == null) {
$this->attributes = [];}
$this->loadLocation($this->parent, $this->raw);
$this->name = _c_lib__mapUtils::readIndex($this->raw, "name");
$this->output = new Carbonite_Type($parent->compiler, $parent);
$rawOutput = &_c_lib__mapUtils::readIndex($this->raw, "output");
if (_c_lib__mapUtils::readIndex($rawOutput, "name") == "function") {
if (_c_lib__mapUtils::readIndex($raw, "type") == "method") {
$rawOutput = _c_lib__mapUtils::readIndex($rawOutput, "template")[0];}}else if (_c_lib__mapUtils::readIndex($rawOutput, "name") == null) {
$this->buildError("No output type provided for member '" . _c_lib__mapUtils::readIndex($raw, "flags")[0] . "' in class '" . $parent->route . "'");}
$this->output->loadFromRaw($rawOutput);
$flags = &_c_lib__mapUtils::readIndex($raw, "flags");
for ($i = count($flags) - 1;$i >= 0;$i--) {
$flag = _c_lib__arrUtils::readIndex($flags, $i);
if ($flag == "fixed") {
$this->binding = "fixed";}else if ($flag == "private") {
$this->visibility = "private";}else if ($flag == "protected") {
$this->visibility = "protected";}else if ($flag != "bound" and $flag != "public") {
array_push($this->flags, $flag);}}
$this->build();}
}

}
function getReference(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

static function evaluate(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[1]) == 'NULL')) {
$raw = $arguments[0];
$parent = $arguments[1];
$output = CarboniteCarbonParser::parse("Any_Member", $raw);
if ($output->hadError) {
$parent->compiler->status->give(Carbonite_Notice::fromParser($parent->source, $output));}else{
$method = Carbonite_Member::make($parent, _c_lib__mapUtils::readIndex($output->data, "data"));
array_push($parent->members, $method);
return $method;}
}
}

function checkExpressions(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$parameters = $arguments[0];
if ($this->variatic == false) {
if (count($parameters) > count($this->arguments)) {
return false;}}
for ($i = 0; $i < count($this->arguments); $i++) {
$argument = _c_lib__arrUtils::readIndex($this->arguments, $i);
$parameter = _c_lib__arrUtils::readIndex($parameters, $i);
if ($argument->type->check($parameter->output) == false) {
return false;}}
return true;
}
}

function check(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$parameters = $arguments[0];
if ($this->variatic == false) {
if (count($parameters) > count($this->arguments)) {
return false;}
if (count($this->arguments) > count($parameters)) {
return false;}}
for ($i = 0; $i < count($this->arguments); $i++) {
$argument = _c_lib__arrUtils::readIndex($this->arguments, $i);
$parameter = _c_lib__arrUtils::readIndex($parameters, $i);
if ($argument->type->check($parameter) == false) {
return false;}}
return true;
}
}

function checkWithContext(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or gettype($arguments[1]) == 'NULL')) {
$parameters = $arguments[0];
$context = $arguments[1];
if ($this->variatic == false) {
if (count($parameters) > count($this->arguments)) {
return false;}
if (count($this->arguments) > count($parameters)) {
return false;}}
for ($i = 0; $i < count($this->arguments); $i++) {
$argument = _c_lib__arrUtils::readIndex($this->arguments, $i);
$parameter = _c_lib__arrUtils::readIndex($parameters, $i);
if ($argument->type->checkWithContext($context, $parameter) == false) {
return false;}}
return true;
}
}

function buildBody(...$arguments) {
if (count($arguments) == 0) {
if ($this->_c__abstract) {
return null;}
$this->body->build();
if ($this->hasFlag("native")) {
if (count($this->body->statements) == 1) {
$state = _c_lib__arrUtils::readIndex($this->body->statements, 0);
if ($state::$type == "return") {
$this->simpleNative = true;}}}
}
}

function build(...$arguments) {
if (count($arguments) == 0) {
$type = _c_lib__mapUtils::readIndex($this->raw, "value")["body"]["type"];
if ($type == "interface") {
$this->_c__abstract = true;}else{
$this->body = new Carbonite_Body($this, _c_lib__mapUtils::readIndex($this->raw, "value")["body"]);
$ownType = new Carbonite_Type($this->parent->compiler, $this->parent);
$ownType->loadFromName($this->parent->route, $this->raw);
$thisName = "this";
$defThis = new Carbonite_Define($thisName, $ownType);
if ($this->binding == "fixed" and $this->name != "@construct") {
$defThis->isConstantReference = true;}
$this->body->scope->add($defThis);
if ($this->hasFlag("native")) {
$cc = new Carbonite_Type($this->parent->compiler, $this->parent);
$cc->loadFromName("Carbon.Context", $this->raw);
$cStr = "context";
$context = new Carbonite_Define($cStr, $cc);
$this->body->scope->add($context);}
if ($this->name == "@index") {
$attrs = &$this->getAttributes("name");
if (count($attrs) == 0) {
$nameAttr = ['_c__mapC' => true];
$nameAttr["key"] = "name";
$nameAttr["value"] = "atIndex";
array_push($this->attributes, $nameAttr);}}}
$___arguments = &_c_lib__mapUtils::readIndex($this->raw, "value")["parameters"];
for ($i = 0; $i < count($___arguments); $i++) {
$argument = &_c_lib__arrUtils::readIndex($___arguments, $i);
array_push($this->arguments, new Carbonite_Argument($this->parent->compiler, $this->parent, $this->body, $argument));}
}
}

function stringify(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Context') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Term' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Literal') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Expression') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Sequence') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Prefix') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Function')) or gettype($arguments[1]) == 'NULL')) {
$ctx = $arguments[0];
$term = $arguments[1];
if ($term->type == "expression") {
$exp = $term;
return $this->concat($ctx, $exp->expression->first, $exp->expression->last);}else if ($term->type == "literal") {
$lit = $term;
$native = $lit->native;
return $native->value;}else if ($term->type == "sequence") {
$seq = $term;
$level = 0;
for ($i = 0; $i < count($seq->parts); $i++) {
$part = _c_lib__arrUtils::readIndex($seq->parts, $i);
if ($part->type == "reference") {
$c = $part;
if ($c->reference->name == "context") {
$level = 1;}}else if ($part->type == "dot") {
$dot = $part;
if ($level == 1) {
if ($dot->text == "instance") {
return $ctx->instance;}else if ($dot->text == "arguments") {
$level = 2;}else if ($dot->text == "templates") {
$level = 3;}}}else if ($part->type == "index") {
if ($level == 3) {
$idx = $part;
$lit = $idx->argument->first;
$it = $lit->native;
$str = _c_lib__arrUtils::readIndex($ctx->templates, $it->value);
return $str;}else{
$idx = $part;
$lit = $idx->argument->first;
$it = $lit->native;
$str = _c_lib__arrUtils::readIndex($ctx->arguments, $it->value);
return $str;}}}}
}
}

function concat(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Context') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Term' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Literal') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Expression') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Sequence') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Prefix') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Function')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Term' or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Terms_Literal') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Terms_Expression') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Terms_Sequence') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Terms_Prefix') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Terms_Function')) or gettype($arguments[2]) == 'NULL')) {
$ctx = $arguments[0];
$head = $arguments[1];
$tail = $arguments[2];
$last = "";
if ($tail != null) {
$last = $this->stringify($ctx, $tail);}
return $this->stringify($ctx, $head) . $last;
}
}

function generate(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Context') or gettype($arguments[0]) == 'NULL')) {
$ctx = $arguments[0];
if ($this->simpleNative) {
$ret = _c_lib__arrUtils::readIndex($this->body->statements, 0);
return $this->concat($ctx, $ret->expression->first, $ret->expression->last);}
}
}

function getRealName(...$arguments) {
if (count($arguments) == 0) {
if ($this->name == "@index") {
$attrs = &$this->getAttributes("name");
$key = &_c_lib__arrUtils::readIndex($attrs, 0);
$attr = _c_lib__mapUtils::readIndex($key, "value");
return $attr;}
return $this->name;
}
}

function docDynamic(...$arguments) {
if (count($arguments) == 0) {
$args = [];
for ($i = 0; $i < count($this->arguments); $i++) {
$arg = _c_lib__arrUtils::readIndex($this->arguments, $i);
array_push($args, $arg->docDynamic());}
return "{\"type\": \"method\", \"name\": \"" . $this->name . "\", \"doc\": \"" . $this->doc->docDynamic() . "\", \"output\": \"" . $this->output->lookPretty() . "\", \"arguments\": [" . implode(",", $args) . "]}";
}
}

static function fromHeader(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$data = $arguments[1];
$method = new Carbonite_Members_Method($parent, null);
$method->name = _c_lib__mapUtils::readIndex($data, "name");
$method->output = new Carbonite_Type($parent->compiler, $parent);
$method->output->loadFromRaw(_c_lib__mapUtils::readIndex($data, "output"));
$args = &_c_lib__mapUtils::readIndex($data, "arguments");
for ($i = 0; $i < count($args); $i++) {
array_push($method->arguments, Carbonite_Argument::fromHeader($parent, _c_lib__arrUtils::readIndex($args, $i)));}
return $method;
}
}

function toHeader(...$arguments) {
if (count($arguments) == 0) {
$args = [];
for ($i = 0; $i < count($this->arguments); $i++) {
$arg = _c_lib__arrUtils::readIndex($this->arguments, $i);
array_push($args, $arg->toHeader());}
return "{\"type\": \"method\", \"name\": \"" . $this->name . "\", \"output\": " . $this->output->toHeader() . ", \"arguments\": [" . implode(",", $args) . "]}";
}
}

function &getAttributes(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$key = $arguments[0];
$found = [];
for ($i = 0; $i < count($this->attributes); $i++) {
$a = &_c_lib__arrUtils::readIndex($this->attributes, $i);
if (_c_lib__mapUtils::readIndex($a, "key") == $key) {
array_push($found, $a);}}
return $found;
}
}

static function makeReference(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Member' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Members_Method' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Members_Operator')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Members_Property')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or gettype($arguments[2]) == 'NULL')) {
$parent = $arguments[0];
$mem = $arguments[1];
$ctx = $arguments[2];
$rtn = null;
if ($mem->type == "property") {
$rtn = new Carbonite_Members_ReferenceProperty($mem, $ctx);}else{
$rtn = new Carbonite_Members_ReferenceMethod($mem, $ctx);}
return $rtn;
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$type = _c_lib__mapUtils::readIndex($raw, "type");
$rtn = null;
if ($type == "method") {
$rtn = new Carbonite_Members_Method($parent, $raw);
$rtn->type = "method";}else if ($type == "property") {
$rtn = new Carbonite_Members_Property($parent, $raw);
$rtn->type = "property";}else if ($type == "operator") {
$rtn = new Carbonite_Members_Operator($parent, $raw);
$rtn->type = "operator";
$cast = $rtn;
$parent->compiler->operatorOrders[$cast->operator] = $cast->order;}
return $rtn;
}
}

function hasFlag(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$flag = $arguments[0];
for ($i = 0; $i < count($this->flags); $i++) {
$cur = _c_lib__arrUtils::readIndex($this->flags, $i);
if ($cur == $flag) {
return true;}}
return false;
}
}

function extraDocDynamic(...$arguments) {
if (count($arguments) == 0) {

}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Members_ReferenceMethod {
public $reference;

public $context;

public $type;

public $output;

function __construct(...$arguments) {
$this->reference = null;
$this->context = null;
$this->type = "";
$this->output = null;

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Method' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Operator')) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or gettype($arguments[1]) == 'NULL')) {
$reference = $arguments[0];
$context = $arguments[1];
$this->reference = $reference;
$this->output = $this->reference->output->getWithContext($context);
$this->context = $context;
$this->type = $reference->type;
}

}
function getReference(...$arguments) {
if (count($arguments) == 0) {
return $this->reference;
}
}

function check(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$parameters = $arguments[0];
if ($this->reference->variatic == false) {
if (count($parameters) > count($this->reference->arguments)) {
return false;}}
for ($i = 0; $i < count($this->reference->arguments); $i++) {
$argument = _c_lib__arrUtils::readIndex($this->reference->arguments, $i);
$parameter = _c_lib__arrUtils::readIndex($parameters, $i);
if ($argument->type->checkWithContext($this->context, $parameter) == false) {
return false;}}
return true;
}
}


}class Carbonite_Members_Property {
public $_c__default;

public $binding;

public $visibility;

public $inheritedFrom;

public $doc;

public $name;

public $output;

public $flags;

public $attributes;

public $parent;

public $_c__abstract;

public $type;

public $raw;

public $startOffset;

public $endOffset;

public $source;

function __construct(...$arguments) {
$this->_c__default = null;
$this->binding = "bound";
$this->visibility = "public";
$this->inheritedFrom = null;
$this->doc = null;
$this->name = "";
$this->output = null;
$this->flags = [];
$this->attributes = null;
$this->parent = null;
$this->_c__abstract = false;
$this->type = "";
$this->raw = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->parent = $parent;
if ($raw == null) {
}else{
$this->raw = $raw;
$this->doc = new Carbonite_Doc(_c_lib__mapUtils::readIndex($this->raw, "doc"));
$this->attributes = _c_lib__mapUtils::readIndex($raw, "attribute");
if ($this->attributes == null) {
$this->attributes = [];}
$this->loadLocation($this->parent, $this->raw);
$this->name = _c_lib__mapUtils::readIndex($this->raw, "name");
$this->output = new Carbonite_Type($parent->compiler, $parent);
$rawOutput = &_c_lib__mapUtils::readIndex($this->raw, "output");
if (_c_lib__mapUtils::readIndex($rawOutput, "name") == "function") {
if (_c_lib__mapUtils::readIndex($raw, "type") == "method") {
$rawOutput = _c_lib__mapUtils::readIndex($rawOutput, "template")[0];}}else if (_c_lib__mapUtils::readIndex($rawOutput, "name") == null) {
$this->buildError("No output type provided for member '" . _c_lib__mapUtils::readIndex($raw, "flags")[0] . "' in class '" . $parent->route . "'");}
$this->output->loadFromRaw($rawOutput);
$flags = &_c_lib__mapUtils::readIndex($raw, "flags");
for ($i = count($flags) - 1;$i >= 0;$i--) {
$flag = _c_lib__arrUtils::readIndex($flags, $i);
if ($flag == "fixed") {
$this->binding = "fixed";}else if ($flag == "private") {
$this->visibility = "private";}else if ($flag == "protected") {
$this->visibility = "protected";}else if ($flag != "bound" and $flag != "public") {
array_push($this->flags, $flag);}}
$this->build();}
}

}
static function evaluate(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[1]) == 'NULL')) {
$raw = $arguments[0];
$parent = $arguments[1];
$output = CarboniteCarbonParser::parse("Any_Member", $raw);
if ($output->hadError) {
$parent->compiler->status->give(Carbonite_Notice::fromParser($parent->source, $output));}else{
$property = Carbonite_Member::make($parent, _c_lib__mapUtils::readIndex($output->data, "data"));
array_push($parent->members, $property);
return $property;}
}
}

function buildDefault(...$arguments) {
if (count($arguments) == 0) {
$type = _c_lib__mapUtils::readIndex($this->raw, "value")["type"];
if ($type == "interface") {
$this->_c__abstract = true;}else{
$this->_c__default = new Carbonite_Expression($this->parent, $this->parent->propertyContext);
$this->_c__default->loadFromRaw(_c_lib__mapUtils::readIndex($this->raw, "value")["value"]);}
}
}

function build(...$arguments) {
if (count($arguments) == 0) {

}
}

function docDynamic(...$arguments) {
if (count($arguments) == 0) {
return "{\"type\": \"property\", \"name\": \"" . $this->name . "\", \"doc\": \"" . $this->doc->docDynamic() . "\", \"output\": \"" . $this->output->lookPretty() . "\"}";
}
}

function toHeader(...$arguments) {
if (count($arguments) == 0) {
return "{\"type\": \"property\", \"name\": \"" . $this->name . "\", \"output\": " . $this->output->toHeader() . "}";
}
}

static function fromHeader(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$data = $arguments[1];
$property = new Carbonite_Members_Property($parent, null);
$property->name = _c_lib__mapUtils::readIndex($data, "name");
$property->output = new Carbonite_Type($parent->compiler, $parent);
$property->output->loadFromRaw(_c_lib__mapUtils::readIndex($data, "output"));
return $property;
}
}

function &getAttributes(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$key = $arguments[0];
$found = [];
for ($i = 0; $i < count($this->attributes); $i++) {
$a = &_c_lib__arrUtils::readIndex($this->attributes, $i);
if (_c_lib__mapUtils::readIndex($a, "key") == $key) {
array_push($found, $a);}}
return $found;
}
}

static function makeReference(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Member' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Members_Method' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Members_Operator')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Members_Property')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or gettype($arguments[2]) == 'NULL')) {
$parent = $arguments[0];
$mem = $arguments[1];
$ctx = $arguments[2];
$rtn = null;
if ($mem->type == "property") {
$rtn = new Carbonite_Members_ReferenceProperty($mem, $ctx);}else{
$rtn = new Carbonite_Members_ReferenceMethod($mem, $ctx);}
return $rtn;
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$type = _c_lib__mapUtils::readIndex($raw, "type");
$rtn = null;
if ($type == "method") {
$rtn = new Carbonite_Members_Method($parent, $raw);
$rtn->type = "method";}else if ($type == "property") {
$rtn = new Carbonite_Members_Property($parent, $raw);
$rtn->type = "property";}else if ($type == "operator") {
$rtn = new Carbonite_Members_Operator($parent, $raw);
$rtn->type = "operator";
$cast = $rtn;
$parent->compiler->operatorOrders[$cast->operator] = $cast->order;}
return $rtn;
}
}

function hasFlag(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$flag = $arguments[0];
for ($i = 0; $i < count($this->flags); $i++) {
$cur = _c_lib__arrUtils::readIndex($this->flags, $i);
if ($cur == $flag) {
return true;}}
return false;
}
}

function extraDocDynamic(...$arguments) {
if (count($arguments) == 0) {

}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Members_ReferenceProperty {
public $reference;

public $context;

public $type;

public $output;

function __construct(...$arguments) {
$this->reference = null;
$this->context = null;
$this->type = "";
$this->output = null;

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Property') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or gettype($arguments[1]) == 'NULL')) {
$reference = $arguments[0];
$context = $arguments[1];
$this->reference = $reference;
$this->context = $context;
$this->output = $this->reference->output->getWithContext($context);
$this->type = $reference->type;
}

}

}class Carbonite_Members_Operator {
public $prefix;

public $operator;

public $order;

public $realName;

public $body;

public $arguments;

public $variatic;

public $simpleNative;

public $binding;

public $visibility;

public $inheritedFrom;

public $doc;

public $name;

public $output;

public $flags;

public $attributes;

public $parent;

public $_c__abstract;

public $type;

public $raw;

public $startOffset;

public $endOffset;

public $source;

function __construct(...$arguments) {
$this->prefix = false;
$this->operator = "";
$this->order = 0;
$this->realName = "";
$this->body = null;
$this->arguments = [];
$this->variatic = false;
$this->simpleNative = false;
$this->binding = "bound";
$this->visibility = "public";
$this->inheritedFrom = null;
$this->doc = null;
$this->name = "";
$this->output = null;
$this->flags = [];
$this->attributes = null;
$this->parent = null;
$this->_c__abstract = false;
$this->type = "";
$this->raw = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->parent = $parent;
if ($raw == null) {
}else{
$this->raw = $raw;
$this->doc = new Carbonite_Doc(_c_lib__mapUtils::readIndex($this->raw, "doc"));
$this->attributes = _c_lib__mapUtils::readIndex($raw, "attribute");
if ($this->attributes == null) {
$this->attributes = [];}
$this->loadLocation($this->parent, $this->raw);
$this->name = _c_lib__mapUtils::readIndex($this->raw, "name");
$this->output = new Carbonite_Type($parent->compiler, $parent);
$rawOutput = &_c_lib__mapUtils::readIndex($this->raw, "output");
if (_c_lib__mapUtils::readIndex($rawOutput, "name") == "function") {
if (_c_lib__mapUtils::readIndex($raw, "type") == "method") {
$rawOutput = _c_lib__mapUtils::readIndex($rawOutput, "template")[0];}}else if (_c_lib__mapUtils::readIndex($rawOutput, "name") == null) {
$this->buildError("No output type provided for member '" . _c_lib__mapUtils::readIndex($raw, "flags")[0] . "' in class '" . $parent->route . "'");}
$this->output->loadFromRaw($rawOutput);
$flags = &_c_lib__mapUtils::readIndex($raw, "flags");
for ($i = count($flags) - 1;$i >= 0;$i--) {
$flag = _c_lib__arrUtils::readIndex($flags, $i);
if ($flag == "fixed") {
$this->binding = "fixed";}else if ($flag == "private") {
$this->visibility = "private";}else if ($flag == "protected") {
$this->visibility = "protected";}else if ($flag != "bound" and $flag != "public") {
array_push($this->flags, $flag);}}
$this->build();}
}

}
function getRealName(...$arguments) {
if (count($arguments) == 0) {
return $this->realName;
}
}

function getReference(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

static function evaluate(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[1]) == 'NULL')) {
$raw = $arguments[0];
$parent = $arguments[1];
$output = CarboniteCarbonParser::parse("Any_Member", $raw);
if ($output->hadError) {
$parent->compiler->status->give(Carbonite_Notice::fromParser($parent->source, $output));}else{
$method = Carbonite_Member::make($parent, _c_lib__mapUtils::readIndex($output->data, "data"));
array_push($parent->members, $method);
return $method;}
}
}

function checkExpressions(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$parameters = $arguments[0];
if ($this->variatic == false) {
if (count($parameters) > count($this->arguments)) {
return false;}}
for ($i = 0; $i < count($this->arguments); $i++) {
$argument = _c_lib__arrUtils::readIndex($this->arguments, $i);
$parameter = _c_lib__arrUtils::readIndex($parameters, $i);
if ($argument->type->check($parameter->output) == false) {
return false;}}
return true;
}
}

function check(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$parameters = $arguments[0];
if ($this->variatic == false) {
if (count($parameters) > count($this->arguments)) {
return false;}
if (count($this->arguments) > count($parameters)) {
return false;}}
for ($i = 0; $i < count($this->arguments); $i++) {
$argument = _c_lib__arrUtils::readIndex($this->arguments, $i);
$parameter = _c_lib__arrUtils::readIndex($parameters, $i);
if ($argument->type->check($parameter) == false) {
return false;}}
return true;
}
}

function checkWithContext(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or gettype($arguments[1]) == 'NULL')) {
$parameters = $arguments[0];
$context = $arguments[1];
if ($this->variatic == false) {
if (count($parameters) > count($this->arguments)) {
return false;}
if (count($this->arguments) > count($parameters)) {
return false;}}
for ($i = 0; $i < count($this->arguments); $i++) {
$argument = _c_lib__arrUtils::readIndex($this->arguments, $i);
$parameter = _c_lib__arrUtils::readIndex($parameters, $i);
if ($argument->type->checkWithContext($context, $parameter) == false) {
return false;}}
return true;
}
}

function buildBody(...$arguments) {
if (count($arguments) == 0) {
if ($this->_c__abstract) {
return null;}
$this->body->build();
if ($this->hasFlag("native")) {
if (count($this->body->statements) == 1) {
$state = _c_lib__arrUtils::readIndex($this->body->statements, 0);
if ($state::$type == "return") {
$this->simpleNative = true;}}}
}
}

function build(...$arguments) {
if (count($arguments) == 0) {
$type = _c_lib__mapUtils::readIndex($this->raw, "value")["body"]["type"];
if ($type == "interface") {
$this->_c__abstract = true;}else{
$this->body = new Carbonite_Body($this, _c_lib__mapUtils::readIndex($this->raw, "value")["body"]);
$ownType = new Carbonite_Type($this->parent->compiler, $this->parent);
$ownType->loadFromName($this->parent->route, $this->raw);
$thisName = "this";
$defThis = new Carbonite_Define($thisName, $ownType);
if ($this->binding == "fixed" and $this->name != "@construct") {
$defThis->isConstantReference = true;}
$this->body->scope->add($defThis);
if ($this->hasFlag("native")) {
$cc = new Carbonite_Type($this->parent->compiler, $this->parent);
$cc->loadFromName("Carbon.Context", $this->raw);
$cStr = "context";
$context = new Carbonite_Define($cStr, $cc);
$this->body->scope->add($context);}
if ($this->name == "@index") {
$attrs = &$this->getAttributes("name");
if (count($attrs) == 0) {
$nameAttr = ['_c__mapC' => true];
$nameAttr["key"] = "name";
$nameAttr["value"] = "atIndex";
array_push($this->attributes, $nameAttr);}}}
$___arguments = &_c_lib__mapUtils::readIndex($this->raw, "value")["parameters"];
for ($i = 0; $i < count($___arguments); $i++) {
$argument = &_c_lib__arrUtils::readIndex($___arguments, $i);
array_push($this->arguments, new Carbonite_Argument($this->parent->compiler, $this->parent, $this->body, $argument));}
}
}

function stringify(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Context') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Term' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Literal') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Expression') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Sequence') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Prefix') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Function')) or gettype($arguments[1]) == 'NULL')) {
$ctx = $arguments[0];
$term = $arguments[1];
if ($term->type == "expression") {
$exp = $term;
return $this->concat($ctx, $exp->expression->first, $exp->expression->last);}else if ($term->type == "literal") {
$lit = $term;
$native = $lit->native;
return $native->value;}else if ($term->type == "sequence") {
$seq = $term;
$level = 0;
for ($i = 0; $i < count($seq->parts); $i++) {
$part = _c_lib__arrUtils::readIndex($seq->parts, $i);
if ($part->type == "reference") {
$c = $part;
if ($c->reference->name == "context") {
$level = 1;}}else if ($part->type == "dot") {
$dot = $part;
if ($level == 1) {
if ($dot->text == "instance") {
return $ctx->instance;}else if ($dot->text == "arguments") {
$level = 2;}else if ($dot->text == "templates") {
$level = 3;}}}else if ($part->type == "index") {
if ($level == 3) {
$idx = $part;
$lit = $idx->argument->first;
$it = $lit->native;
$str = _c_lib__arrUtils::readIndex($ctx->templates, $it->value);
return $str;}else{
$idx = $part;
$lit = $idx->argument->first;
$it = $lit->native;
$str = _c_lib__arrUtils::readIndex($ctx->arguments, $it->value);
return $str;}}}}
}
}

function concat(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Context') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Term' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Literal') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Expression') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Sequence') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Prefix') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Function')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Term' or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Terms_Literal') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Terms_Expression') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Terms_Sequence') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Terms_Prefix') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Terms_Function')) or gettype($arguments[2]) == 'NULL')) {
$ctx = $arguments[0];
$head = $arguments[1];
$tail = $arguments[2];
$last = "";
if ($tail != null) {
$last = $this->stringify($ctx, $tail);}
return $this->stringify($ctx, $head) . $last;
}
}

function generate(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Context') or gettype($arguments[0]) == 'NULL')) {
$ctx = $arguments[0];
if ($this->simpleNative) {
$ret = _c_lib__arrUtils::readIndex($this->body->statements, 0);
return $this->concat($ctx, $ret->expression->first, $ret->expression->last);}
}
}

function docDynamic(...$arguments) {
if (count($arguments) == 0) {
$args = [];
for ($i = 0; $i < count($this->arguments); $i++) {
$arg = _c_lib__arrUtils::readIndex($this->arguments, $i);
array_push($args, $arg->docDynamic());}
return "{\"type\": \"method\", \"name\": \"" . $this->name . "\", \"doc\": \"" . $this->doc->docDynamic() . "\", \"output\": \"" . $this->output->lookPretty() . "\", \"arguments\": [" . implode(",", $args) . "]}";
}
}

static function fromHeader(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$data = $arguments[1];
$method = new Carbonite_Members_Method($parent, null);
$method->name = _c_lib__mapUtils::readIndex($data, "name");
$method->output = new Carbonite_Type($parent->compiler, $parent);
$method->output->loadFromRaw(_c_lib__mapUtils::readIndex($data, "output"));
$args = &_c_lib__mapUtils::readIndex($data, "arguments");
for ($i = 0; $i < count($args); $i++) {
array_push($method->arguments, Carbonite_Argument::fromHeader($parent, _c_lib__arrUtils::readIndex($args, $i)));}
return $method;
}
}

function toHeader(...$arguments) {
if (count($arguments) == 0) {
$args = [];
for ($i = 0; $i < count($this->arguments); $i++) {
$arg = _c_lib__arrUtils::readIndex($this->arguments, $i);
array_push($args, $arg->toHeader());}
return "{\"type\": \"method\", \"name\": \"" . $this->name . "\", \"output\": " . $this->output->toHeader() . ", \"arguments\": [" . implode(",", $args) . "]}";
}
}

function &getAttributes(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$key = $arguments[0];
$found = [];
for ($i = 0; $i < count($this->attributes); $i++) {
$a = &_c_lib__arrUtils::readIndex($this->attributes, $i);
if (_c_lib__mapUtils::readIndex($a, "key") == $key) {
array_push($found, $a);}}
return $found;
}
}

static function makeReference(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Member' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Members_Method' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Members_Operator')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Members_Property')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or gettype($arguments[2]) == 'NULL')) {
$parent = $arguments[0];
$mem = $arguments[1];
$ctx = $arguments[2];
$rtn = null;
if ($mem->type == "property") {
$rtn = new Carbonite_Members_ReferenceProperty($mem, $ctx);}else{
$rtn = new Carbonite_Members_ReferenceMethod($mem, $ctx);}
return $rtn;
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$type = _c_lib__mapUtils::readIndex($raw, "type");
$rtn = null;
if ($type == "method") {
$rtn = new Carbonite_Members_Method($parent, $raw);
$rtn->type = "method";}else if ($type == "property") {
$rtn = new Carbonite_Members_Property($parent, $raw);
$rtn->type = "property";}else if ($type == "operator") {
$rtn = new Carbonite_Members_Operator($parent, $raw);
$rtn->type = "operator";
$cast = $rtn;
$parent->compiler->operatorOrders[$cast->operator] = $cast->order;}
return $rtn;
}
}

function hasFlag(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$flag = $arguments[0];
for ($i = 0; $i < count($this->flags); $i++) {
$cur = _c_lib__arrUtils::readIndex($this->flags, $i);
if ($cur == $flag) {
return true;}}
return false;
}
}

function extraDocDynamic(...$arguments) {
if (count($arguments) == 0) {

}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Template {
public $name;

public $_c__default;

public $optional;

public $type;

public $parent;

public $raw;

public $index;

public $startOffset;

public $endOffset;

public $source;

function __construct(...$arguments) {
$this->name = "";
$this->_c__default = null;
$this->optional = false;
$this->type = "class";
$this->parent = null;
$this->raw = null;
$this->index = 0;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL')) {
$parent = $arguments[0];
$this->parent = $parent;
}

}
function loadFromRaw(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
$this->name = _c_lib__mapUtils::readIndex($raw, "name");
if (isset($raw["default"])) {
$this->optional = true;}
$this->loadLocation($this->parent, $raw);
}
}

function build(...$arguments) {
if (count($arguments) == 0) {
if ($this->optional) {
$this->_c__default = new Carbonite_Type($this->parent->compiler, $this->parent);
$this->_c__default->loadFromRaw(_c_lib__mapUtils::readIndex($this->raw, "default"));}
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Scope {
public $parent;

public $container;

public $scope;

function __construct(...$arguments) {
$this->parent = null;
$this->container = null;
$this->scope = [];

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Scope') or gettype($arguments[1]) == 'NULL')) {
$container = $arguments[0];
$parent = $arguments[1];
$this->parent = $parent;
$this->container = $container;
}

}
function add(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Define') or gettype($arguments[0]) == 'NULL')) {
$def = $arguments[0];
array_push($this->scope, $def);
}
}

function search(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
for ($i = 0; $i < count($this->scope); $i++) {
$ref = _c_lib__arrUtils::readIndex($this->scope, $i);
if ($ref->name == $name) {
return $ref;}}
if ($this->parent != null) {
return $this->parent->search($name);}
$emp = null;
return $emp;
}
}


}class Carbonite_Define {
public $name;

public $output;

public $initializer;

public $container;

public $isConstantReference;

public $startOffset;

public $endOffset;

public $source;

function __construct(...$arguments) {
$this->name = "";
$this->output = null;
$this->initializer = null;
$this->container = null;
$this->isConstantReference = false;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$output = $arguments[1];
$this->name = $name;
$this->output = $output;
}

}
static function make(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[1]) == 'NULL')) {
$raw = $arguments[0];
$container = $arguments[1];
$name = _c_lib__mapUtils::readIndex($raw, "name");
$initializer = new Carbonite_Expression($container->parent->parent, $container);
if (isset($raw["value"])) {
$initializer->loadFromRaw(_c_lib__mapUtils::readIndex($raw, "value"));}else{
$initializer = null;}
$type = new Carbonite_Type($container->parent->parent->compiler, $container->parent->parent);
$auto = _c_lib__mapUtils::readIndex($raw, "auto");
if ($auto) {
$type = $initializer->output;}else{
$type->loadFromRaw(_c_lib__mapUtils::readIndex($raw, "valueType"));}
$rtn = new Carbonite_Define($name, $type);
$rtn->initializer = $initializer;
$rtn->container = $container;
$rtn->loadLocation($container->parent->parent, $raw);
if ($container->scope->search($rtn->name) != null) {
$rtn->buildError("'" . $rtn->name . "' already defined");}
$container->scope->add($rtn);
return $rtn;
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Function {
public $parent;

public $output;

public $body;

public $raw;

public $arguments;

function __construct(...$arguments) {
$this->parent = null;
$this->output = null;
$this->body = null;
$this->raw = null;
$this->arguments = [];

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->raw = $raw;
$this->parent = $parent;
$this->body = new Carbonite_Body($this->parent->container->parent, _c_lib__mapUtils::readIndex($this->raw, "body"));
$this->body->scope->parent = $this->parent->container->scope;
$this->output = new Carbonite_Type($this->parent->parent->compiler, $this->parent->parent);
$this->output->loadFromRaw(_c_lib__mapUtils::readIndex($this->raw, "output"));
$this->body->relativeOutput = $this->output;
$___arguments = &_c_lib__mapUtils::readIndex($this->raw, "parameters");
for ($i = 0; $i < count($___arguments); $i++) {
$argument = &_c_lib__arrUtils::readIndex($___arguments, $i);
array_push($this->arguments, new Carbonite_Argument($this->parent->parent->compiler, $this->parent->parent, $this->body, $argument));}
$this->body->build();
$this->parent->output = new Carbonite_Type($this->parent->parent->compiler, $this->parent->parent);
$this->parent->output->loadFromName("function", $this->raw);
array_push($this->parent->output->templates, $this->output);
for ($i = 0; $i < count($this->arguments); $i++) {
array_push($this->parent->output->templates, _c_lib__arrUtils::readIndex($this->arguments, $i)->type);}
}

}

}class Carbonite_Attribute {
public $key;

function __construct(...$arguments) {
$this->key = "";


}

}class Carbonite_Body {
public $scope;

public $statements;

public $raw;

public $parent;

public $relativeOutput;

public $parentBody;

public $startOffset;

public $endOffset;

public $source;

function __construct(...$arguments) {
$this->scope = null;
$this->statements = [];
$this->raw = null;
$this->parent = null;
$this->relativeOutput = null;
$this->parentBody = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Member' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Method' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Operator')) or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Property')) or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->parent = $parent;
$this->raw = $raw;
$this->loadLocation($parent->parent, $raw);
$emp = null;
$this->scope = new Carbonite_Scope($this, $emp);
}

}
function build(...$arguments) {
if (count($arguments) == 0) {
$statements = &_c_lib__mapUtils::readIndex($this->raw, "code");
for ($i = 0; $i < count($statements); $i++) {
$statement = &_c_lib__arrUtils::readIndex($statements, $i);
$state = Carbonite_Statement::make($this, $statement);
$state->loadFromRaw($statement);
array_push($this->statements, $state);}
}
}

function inherit(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[0]) == 'NULL')) {
$parent = $arguments[0];
$this->scope->parent = $parent->scope;
$this->relativeOutput = $parent->relativeOutput;
$this->parentBody = $parent;
}
}

function toCarbideValue(...$arguments) {
if (count($arguments) == 0) {
return carbide_proxy_Carbonite_Body::create($this);
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Statement {
public $container;

public $raw;

public $startOffset;

public $endOffset;

public $source;
public static $type = "";

function __construct(...$arguments) {
$this->container = null;
$this->raw = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[0]) == 'NULL')) {
$container = $arguments[0];
$this->container = $container;
}

}
function loadFromRaw(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
$this->loadLocation($this->container->parent->parent, $raw);
$this->build($raw, $this->container);
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$container = $arguments[0];
$raw = $arguments[1];
$type = _c_lib__mapUtils::readIndex($raw, "type");
$rtn = null;
if ($type == "if") {
$rtn = new Carbonite_Statements_If($container);}else if ($type == "define") {
$rtn = new Carbonite_Statements_Define($container);}else if ($type == "return") {
$rtn = new Carbonite_Statements_Return($container);}else if ($type == "for") {
$forIn = _c_lib__mapUtils::readIndex($raw, "in");
if ($forIn) {
$rtn = new Carbonite_Statements_ForIn($container);}else{
$rtn = new Carbonite_Statements_For($container);}}else if ($type == "while") {
$rtn = new Carbonite_Statements_While($container);}else if ($type == "expression") {
$rtn = new Carbonite_Statements_Expression($container);}else if ($type == "continue") {
$rtn = new Carbonite_Statements_Continue($container);}else if ($type == "break") {
$rtn = new Carbonite_Statements_Break($container);}else if ($type == "native") {
$rtn = new Carbonite_Statements_Native($container);}
return $rtn;
}
}

function build(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[1]) == 'NULL')) {
$raw = $arguments[0];
$container = $arguments[1];

}
}

function toCarbideValue(...$arguments) {
if (count($arguments) == 0) {
return carbide_proxy_Carbonite_Statement::create($this);
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Statements_If {
public $check;

public $body;

public $alternatives;

public $container;

public $raw;

public $startOffset;

public $endOffset;

public $source;
public static $type = "if";

function __construct(...$arguments) {
$this->check = null;
$this->body = null;
$this->alternatives = [];
$this->container = null;
$this->raw = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[0]) == 'NULL')) {
$container = $arguments[0];
$this->container = $container;
}

}
function build(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[1]) == 'NULL')) {
$raw = $arguments[0];
$container = $arguments[1];
$this->check = new Carbonite_Expression($container->parent->parent, $container);
$this->check->loadFromRaw(_c_lib__mapUtils::readIndex($raw, "check")["expression"]);
$this->body = new Carbonite_Body($container->parent, _c_lib__mapUtils::readIndex($raw, "body"));
$this->body->inherit($container);
$this->body->build();
$alternatives = &_c_lib__mapUtils::readIndex($raw, "alternatives");
for ($i = 0; $i < count($alternatives); $i++) {
array_push($this->alternatives, new Carbonite_Statements_IfAlternative($this, _c_lib__arrUtils::readIndex($alternatives, $i)));}
}
}

function loadFromRaw(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
$this->loadLocation($this->container->parent->parent, $raw);
$this->build($raw, $this->container);
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$container = $arguments[0];
$raw = $arguments[1];
$type = _c_lib__mapUtils::readIndex($raw, "type");
$rtn = null;
if ($type == "if") {
$rtn = new Carbonite_Statements_If($container);}else if ($type == "define") {
$rtn = new Carbonite_Statements_Define($container);}else if ($type == "return") {
$rtn = new Carbonite_Statements_Return($container);}else if ($type == "for") {
$forIn = _c_lib__mapUtils::readIndex($raw, "in");
if ($forIn) {
$rtn = new Carbonite_Statements_ForIn($container);}else{
$rtn = new Carbonite_Statements_For($container);}}else if ($type == "while") {
$rtn = new Carbonite_Statements_While($container);}else if ($type == "expression") {
$rtn = new Carbonite_Statements_Expression($container);}else if ($type == "continue") {
$rtn = new Carbonite_Statements_Continue($container);}else if ($type == "break") {
$rtn = new Carbonite_Statements_Break($container);}else if ($type == "native") {
$rtn = new Carbonite_Statements_Native($container);}
return $rtn;
}
}

function toCarbideValue(...$arguments) {
if (count($arguments) == 0) {
return carbide_proxy_Carbonite_Statement::create($this);
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Statements_IfAlternative {
public $body;

public $check;

public $parent;

public $doCheck;

public $startOffset;

public $endOffset;

public $source;

function __construct(...$arguments) {
$this->body = null;
$this->check = null;
$this->parent = null;
$this->doCheck = false;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_If') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$type = _c_lib__mapUtils::readIndex($raw, "type");
$this->parent = $parent;
if ($type == "elseif") {
$this->doCheck = true;
$this->check = new Carbonite_Expression($parent->container->parent->parent, $parent->container);
$this->check->loadFromRaw(_c_lib__mapUtils::readIndex($raw, "check")["expression"]);}
$this->body = new Carbonite_Body($parent->container->parent, _c_lib__mapUtils::readIndex($raw, "body"));
$this->body->inherit($parent->container);
$this->body->build();
}

}
function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Statements_Return {
public $expression;

public $container;

public $raw;

public $startOffset;

public $endOffset;

public $source;
public static $type = "return";

function __construct(...$arguments) {
$this->expression = null;
$this->container = null;
$this->raw = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[0]) == 'NULL')) {
$container = $arguments[0];
$this->container = $container;
}

}
function build(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[1]) == 'NULL')) {
$raw = $arguments[0];
$container = $arguments[1];
$this->expression = new Carbonite_Expression($container->parent->parent, $container);
$this->expression->loadFromRaw(_c_lib__mapUtils::readIndex($raw, "expression"));
if ($container->parent != null) {
if ($container->parent->hasFlag("native") == false) {
if ($container->parent->output->late == false) {
$check = $container->parent->output;
if ($container->relativeOutput != null) {
$check = $container->relativeOutput;}
if ($check->check($this->expression->output) == false) {
$this->buildError("Invalid return type '" . $this->expression->output->reference->name . "' in statement");}}}}
}
}

function loadFromRaw(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
$this->loadLocation($this->container->parent->parent, $raw);
$this->build($raw, $this->container);
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$container = $arguments[0];
$raw = $arguments[1];
$type = _c_lib__mapUtils::readIndex($raw, "type");
$rtn = null;
if ($type == "if") {
$rtn = new Carbonite_Statements_If($container);}else if ($type == "define") {
$rtn = new Carbonite_Statements_Define($container);}else if ($type == "return") {
$rtn = new Carbonite_Statements_Return($container);}else if ($type == "for") {
$forIn = _c_lib__mapUtils::readIndex($raw, "in");
if ($forIn) {
$rtn = new Carbonite_Statements_ForIn($container);}else{
$rtn = new Carbonite_Statements_For($container);}}else if ($type == "while") {
$rtn = new Carbonite_Statements_While($container);}else if ($type == "expression") {
$rtn = new Carbonite_Statements_Expression($container);}else if ($type == "continue") {
$rtn = new Carbonite_Statements_Continue($container);}else if ($type == "break") {
$rtn = new Carbonite_Statements_Break($container);}else if ($type == "native") {
$rtn = new Carbonite_Statements_Native($container);}
return $rtn;
}
}

function toCarbideValue(...$arguments) {
if (count($arguments) == 0) {
return carbide_proxy_Carbonite_Statement::create($this);
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Statements_Define {
public $define;

public $container;

public $raw;

public $startOffset;

public $endOffset;

public $source;
public static $type = "define";

function __construct(...$arguments) {
$this->define = null;
$this->container = null;
$this->raw = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[0]) == 'NULL')) {
$container = $arguments[0];
$this->container = $container;
}

}
function build(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[1]) == 'NULL')) {
$raw = $arguments[0];
$container = $arguments[1];
$this->define = Carbonite_Define::make($raw, $container);
}
}

function loadFromRaw(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
$this->loadLocation($this->container->parent->parent, $raw);
$this->build($raw, $this->container);
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$container = $arguments[0];
$raw = $arguments[1];
$type = _c_lib__mapUtils::readIndex($raw, "type");
$rtn = null;
if ($type == "if") {
$rtn = new Carbonite_Statements_If($container);}else if ($type == "define") {
$rtn = new Carbonite_Statements_Define($container);}else if ($type == "return") {
$rtn = new Carbonite_Statements_Return($container);}else if ($type == "for") {
$forIn = _c_lib__mapUtils::readIndex($raw, "in");
if ($forIn) {
$rtn = new Carbonite_Statements_ForIn($container);}else{
$rtn = new Carbonite_Statements_For($container);}}else if ($type == "while") {
$rtn = new Carbonite_Statements_While($container);}else if ($type == "expression") {
$rtn = new Carbonite_Statements_Expression($container);}else if ($type == "continue") {
$rtn = new Carbonite_Statements_Continue($container);}else if ($type == "break") {
$rtn = new Carbonite_Statements_Break($container);}else if ($type == "native") {
$rtn = new Carbonite_Statements_Native($container);}
return $rtn;
}
}

function toCarbideValue(...$arguments) {
if (count($arguments) == 0) {
return carbide_proxy_Carbonite_Statement::create($this);
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Statements_For {
public $check;

public $iterate;

public $define;

public $body;

public $container;

public $raw;

public $startOffset;

public $endOffset;

public $source;
public static $type = "for";

function __construct(...$arguments) {
$this->check = null;
$this->iterate = null;
$this->define = null;
$this->body = null;
$this->container = null;
$this->raw = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[0]) == 'NULL')) {
$container = $arguments[0];
$this->container = $container;
}

}
function build(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[1]) == 'NULL')) {
$raw = $arguments[0];
$container = $arguments[1];
$this->body = new Carbonite_Body($container->parent, _c_lib__mapUtils::readIndex($raw, "body"));
$this->body->inherit($container);
$this->define = Carbonite_Define::make(_c_lib__mapUtils::readIndex($raw, "define"), $this->body);
$this->check = new Carbonite_Expression($container->parent->parent, $this->body);
$this->check->loadFromRaw(_c_lib__mapUtils::readIndex($raw, "check"));
$this->iterate = new Carbonite_Expression($container->parent->parent, $this->body);
$this->iterate->loadFromRaw(_c_lib__mapUtils::readIndex($raw, "iterate"));
$this->body->build();
}
}

function loadFromRaw(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
$this->loadLocation($this->container->parent->parent, $raw);
$this->build($raw, $this->container);
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$container = $arguments[0];
$raw = $arguments[1];
$type = _c_lib__mapUtils::readIndex($raw, "type");
$rtn = null;
if ($type == "if") {
$rtn = new Carbonite_Statements_If($container);}else if ($type == "define") {
$rtn = new Carbonite_Statements_Define($container);}else if ($type == "return") {
$rtn = new Carbonite_Statements_Return($container);}else if ($type == "for") {
$forIn = _c_lib__mapUtils::readIndex($raw, "in");
if ($forIn) {
$rtn = new Carbonite_Statements_ForIn($container);}else{
$rtn = new Carbonite_Statements_For($container);}}else if ($type == "while") {
$rtn = new Carbonite_Statements_While($container);}else if ($type == "expression") {
$rtn = new Carbonite_Statements_Expression($container);}else if ($type == "continue") {
$rtn = new Carbonite_Statements_Continue($container);}else if ($type == "break") {
$rtn = new Carbonite_Statements_Break($container);}else if ($type == "native") {
$rtn = new Carbonite_Statements_Native($container);}
return $rtn;
}
}

function toCarbideValue(...$arguments) {
if (count($arguments) == 0) {
return carbide_proxy_Carbonite_Statement::create($this);
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Statements_ForIn {
public $iterate;

public $define;

public $body;

public $container;

public $raw;

public $startOffset;

public $endOffset;

public $source;
public static $type = "forin";

function __construct(...$arguments) {
$this->iterate = null;
$this->define = null;
$this->body = null;
$this->container = null;
$this->raw = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[0]) == 'NULL')) {
$container = $arguments[0];
$this->container = $container;
}

}
function build(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[1]) == 'NULL')) {
$raw = $arguments[0];
$container = $arguments[1];
$this->body = new Carbonite_Body($container->parent, _c_lib__mapUtils::readIndex($raw, "body"));
$this->body->inherit($container);
$this->define = Carbonite_Define::make(_c_lib__mapUtils::readIndex($raw, "define"), $this->body);
$this->iterate = new Carbonite_Expression($container->parent->parent, $this->body);
$this->iterate->loadFromRaw(_c_lib__mapUtils::readIndex($raw, "iterate"));
$this->body->build();
}
}

function loadFromRaw(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
$this->loadLocation($this->container->parent->parent, $raw);
$this->build($raw, $this->container);
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$container = $arguments[0];
$raw = $arguments[1];
$type = _c_lib__mapUtils::readIndex($raw, "type");
$rtn = null;
if ($type == "if") {
$rtn = new Carbonite_Statements_If($container);}else if ($type == "define") {
$rtn = new Carbonite_Statements_Define($container);}else if ($type == "return") {
$rtn = new Carbonite_Statements_Return($container);}else if ($type == "for") {
$forIn = _c_lib__mapUtils::readIndex($raw, "in");
if ($forIn) {
$rtn = new Carbonite_Statements_ForIn($container);}else{
$rtn = new Carbonite_Statements_For($container);}}else if ($type == "while") {
$rtn = new Carbonite_Statements_While($container);}else if ($type == "expression") {
$rtn = new Carbonite_Statements_Expression($container);}else if ($type == "continue") {
$rtn = new Carbonite_Statements_Continue($container);}else if ($type == "break") {
$rtn = new Carbonite_Statements_Break($container);}else if ($type == "native") {
$rtn = new Carbonite_Statements_Native($container);}
return $rtn;
}
}

function toCarbideValue(...$arguments) {
if (count($arguments) == 0) {
return carbide_proxy_Carbonite_Statement::create($this);
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Statements_While {
public $check;

public $body;

public $container;

public $raw;

public $startOffset;

public $endOffset;

public $source;
public static $type = "while";

function __construct(...$arguments) {
$this->check = null;
$this->body = null;
$this->container = null;
$this->raw = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[0]) == 'NULL')) {
$container = $arguments[0];
$this->container = $container;
}

}
function build(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[1]) == 'NULL')) {
$raw = $arguments[0];
$container = $arguments[1];
$this->body = new Carbonite_Body($container->parent, _c_lib__mapUtils::readIndex($raw, "body"));
$this->body->inherit($container);
$this->check = new Carbonite_Expression($container->parent->parent, $this->body);
$this->check->loadFromRaw(_c_lib__mapUtils::readIndex($raw, "check")["expression"]);
$this->body->build();
}
}

function loadFromRaw(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
$this->loadLocation($this->container->parent->parent, $raw);
$this->build($raw, $this->container);
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$container = $arguments[0];
$raw = $arguments[1];
$type = _c_lib__mapUtils::readIndex($raw, "type");
$rtn = null;
if ($type == "if") {
$rtn = new Carbonite_Statements_If($container);}else if ($type == "define") {
$rtn = new Carbonite_Statements_Define($container);}else if ($type == "return") {
$rtn = new Carbonite_Statements_Return($container);}else if ($type == "for") {
$forIn = _c_lib__mapUtils::readIndex($raw, "in");
if ($forIn) {
$rtn = new Carbonite_Statements_ForIn($container);}else{
$rtn = new Carbonite_Statements_For($container);}}else if ($type == "while") {
$rtn = new Carbonite_Statements_While($container);}else if ($type == "expression") {
$rtn = new Carbonite_Statements_Expression($container);}else if ($type == "continue") {
$rtn = new Carbonite_Statements_Continue($container);}else if ($type == "break") {
$rtn = new Carbonite_Statements_Break($container);}else if ($type == "native") {
$rtn = new Carbonite_Statements_Native($container);}
return $rtn;
}
}

function toCarbideValue(...$arguments) {
if (count($arguments) == 0) {
return carbide_proxy_Carbonite_Statement::create($this);
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Statements_Continue {
public $container;

public $raw;

public $startOffset;

public $endOffset;

public $source;
public static $type = "continue";

function __construct(...$arguments) {
$this->container = null;
$this->raw = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[0]) == 'NULL')) {
$container = $arguments[0];
$this->container = $container;
}

}
function loadFromRaw(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
$this->loadLocation($this->container->parent->parent, $raw);
$this->build($raw, $this->container);
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$container = $arguments[0];
$raw = $arguments[1];
$type = _c_lib__mapUtils::readIndex($raw, "type");
$rtn = null;
if ($type == "if") {
$rtn = new Carbonite_Statements_If($container);}else if ($type == "define") {
$rtn = new Carbonite_Statements_Define($container);}else if ($type == "return") {
$rtn = new Carbonite_Statements_Return($container);}else if ($type == "for") {
$forIn = _c_lib__mapUtils::readIndex($raw, "in");
if ($forIn) {
$rtn = new Carbonite_Statements_ForIn($container);}else{
$rtn = new Carbonite_Statements_For($container);}}else if ($type == "while") {
$rtn = new Carbonite_Statements_While($container);}else if ($type == "expression") {
$rtn = new Carbonite_Statements_Expression($container);}else if ($type == "continue") {
$rtn = new Carbonite_Statements_Continue($container);}else if ($type == "break") {
$rtn = new Carbonite_Statements_Break($container);}else if ($type == "native") {
$rtn = new Carbonite_Statements_Native($container);}
return $rtn;
}
}

function build(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[1]) == 'NULL')) {
$raw = $arguments[0];
$container = $arguments[1];

}
}

function toCarbideValue(...$arguments) {
if (count($arguments) == 0) {
return carbide_proxy_Carbonite_Statement::create($this);
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Statements_Break {
public $container;

public $raw;

public $startOffset;

public $endOffset;

public $source;
public static $type = "break";

function __construct(...$arguments) {
$this->container = null;
$this->raw = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[0]) == 'NULL')) {
$container = $arguments[0];
$this->container = $container;
}

}
function loadFromRaw(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
$this->loadLocation($this->container->parent->parent, $raw);
$this->build($raw, $this->container);
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$container = $arguments[0];
$raw = $arguments[1];
$type = _c_lib__mapUtils::readIndex($raw, "type");
$rtn = null;
if ($type == "if") {
$rtn = new Carbonite_Statements_If($container);}else if ($type == "define") {
$rtn = new Carbonite_Statements_Define($container);}else if ($type == "return") {
$rtn = new Carbonite_Statements_Return($container);}else if ($type == "for") {
$forIn = _c_lib__mapUtils::readIndex($raw, "in");
if ($forIn) {
$rtn = new Carbonite_Statements_ForIn($container);}else{
$rtn = new Carbonite_Statements_For($container);}}else if ($type == "while") {
$rtn = new Carbonite_Statements_While($container);}else if ($type == "expression") {
$rtn = new Carbonite_Statements_Expression($container);}else if ($type == "continue") {
$rtn = new Carbonite_Statements_Continue($container);}else if ($type == "break") {
$rtn = new Carbonite_Statements_Break($container);}else if ($type == "native") {
$rtn = new Carbonite_Statements_Native($container);}
return $rtn;
}
}

function build(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[1]) == 'NULL')) {
$raw = $arguments[0];
$container = $arguments[1];

}
}

function toCarbideValue(...$arguments) {
if (count($arguments) == 0) {
return carbide_proxy_Carbonite_Statement::create($this);
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Statements_Native {
public $platform;

public $content;

public $container;

public $raw;

public $startOffset;

public $endOffset;

public $source;
public static $type = "native";

function __construct(...$arguments) {
$this->platform = "";
$this->content = "";
$this->container = null;
$this->raw = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[0]) == 'NULL')) {
$container = $arguments[0];
$this->container = $container;
}

}
function build(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[1]) == 'NULL')) {
$raw = $arguments[0];
$container = $arguments[1];
$this->platform = _c_lib__mapUtils::readIndex($raw, "platform");
$this->content = _c_lib__mapUtils::readIndex($raw, "content");
}
}

function loadFromRaw(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
$this->loadLocation($this->container->parent->parent, $raw);
$this->build($raw, $this->container);
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$container = $arguments[0];
$raw = $arguments[1];
$type = _c_lib__mapUtils::readIndex($raw, "type");
$rtn = null;
if ($type == "if") {
$rtn = new Carbonite_Statements_If($container);}else if ($type == "define") {
$rtn = new Carbonite_Statements_Define($container);}else if ($type == "return") {
$rtn = new Carbonite_Statements_Return($container);}else if ($type == "for") {
$forIn = _c_lib__mapUtils::readIndex($raw, "in");
if ($forIn) {
$rtn = new Carbonite_Statements_ForIn($container);}else{
$rtn = new Carbonite_Statements_For($container);}}else if ($type == "while") {
$rtn = new Carbonite_Statements_While($container);}else if ($type == "expression") {
$rtn = new Carbonite_Statements_Expression($container);}else if ($type == "continue") {
$rtn = new Carbonite_Statements_Continue($container);}else if ($type == "break") {
$rtn = new Carbonite_Statements_Break($container);}else if ($type == "native") {
$rtn = new Carbonite_Statements_Native($container);}
return $rtn;
}
}

function toCarbideValue(...$arguments) {
if (count($arguments) == 0) {
return carbide_proxy_Carbonite_Statement::create($this);
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Statements_Expression {
public $expression;

public $container;

public $raw;

public $startOffset;

public $endOffset;

public $source;
public static $type = "expression";

function __construct(...$arguments) {
$this->expression = null;
$this->container = null;
$this->raw = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[0]) == 'NULL')) {
$container = $arguments[0];
$this->container = $container;
}

}
function build(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[1]) == 'NULL')) {
$raw = $arguments[0];
$container = $arguments[1];
$this->expression = new Carbonite_Expression($container->parent->parent, $container);
$this->expression->loadFromRaw($raw);
}
}

function loadFromRaw(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
$this->loadLocation($this->container->parent->parent, $raw);
$this->build($raw, $this->container);
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$container = $arguments[0];
$raw = $arguments[1];
$type = _c_lib__mapUtils::readIndex($raw, "type");
$rtn = null;
if ($type == "if") {
$rtn = new Carbonite_Statements_If($container);}else if ($type == "define") {
$rtn = new Carbonite_Statements_Define($container);}else if ($type == "return") {
$rtn = new Carbonite_Statements_Return($container);}else if ($type == "for") {
$forIn = _c_lib__mapUtils::readIndex($raw, "in");
if ($forIn) {
$rtn = new Carbonite_Statements_ForIn($container);}else{
$rtn = new Carbonite_Statements_For($container);}}else if ($type == "while") {
$rtn = new Carbonite_Statements_While($container);}else if ($type == "expression") {
$rtn = new Carbonite_Statements_Expression($container);}else if ($type == "continue") {
$rtn = new Carbonite_Statements_Continue($container);}else if ($type == "break") {
$rtn = new Carbonite_Statements_Break($container);}else if ($type == "native") {
$rtn = new Carbonite_Statements_Native($container);}
return $rtn;
}
}

function toCarbideValue(...$arguments) {
if (count($arguments) == 0) {
return carbide_proxy_Carbonite_Statement::create($this);
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Argument {
public $name;

public $type;

public $compiler;

public $parent;

public $optional;

public $_c__default;

public $container;

public $define;

public $raw;

public $doc;

public $startOffset;

public $endOffset;

public $source;

function __construct(...$arguments) {
$this->name = "";
$this->type = null;
$this->compiler = null;
$this->parent = null;
$this->optional = false;
$this->_c__default = null;
$this->container = null;
$this->define = null;
$this->raw = null;
$this->doc = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL') and ((gettype($arguments[2]) == 'array' and isset($arguments[2]['_c__mapC'])) or gettype($arguments[2]) == 'NULL')) {
$parent = $arguments[0];
$name = $arguments[1];
$type = $arguments[2];
$this->name = $name;
$this->type = new Carbonite_Type($parent->compiler, $parent);
$this->type->loadFromRaw($type);
$this->parent = $parent;
$this->compiler = $parent->compiler;
}
else if (count($arguments) == 4 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Compiler') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[2]) == 'NULL') and ((gettype($arguments[3]) == 'array' and isset($arguments[3]['_c__mapC'])) or gettype($arguments[3]) == 'NULL')) {
$compiler = $arguments[0];
$parent = $arguments[1];
$container = $arguments[2];
$raw = $arguments[3];
$this->raw = $raw;
$this->doc = new Carbonite_Doc(_c_lib__mapUtils::readIndex($this->raw, "doc"));
$this->container = $container;
$this->name = _c_lib__mapUtils::readIndex($raw, "name");
$optional = &_c_lib__mapUtils::readIndex($raw, "optional");
$this->define = new Carbonite_Define($this->name, $this->type);
if (count($optional) > 0) {
$this->_c__default = new Carbonite_Expression($parent, $container);
$this->_c__default->loadFromRaw(_c_lib__arrUtils::readIndex($optional, 0));
$this->optional = true;
$this->define->initializer = $this->_c__default;}
$this->type = new Carbonite_Type($compiler, $parent);
$this->type->loadFromRaw(_c_lib__mapUtils::readIndex($raw, "type"));
$this->define->output = $this->type;
$this->loadLocation($parent, $raw);
if ($this->container != null) {
$this->container->scope->add($this->define);}
}

}
function docDynamic(...$arguments) {
if (count($arguments) == 0) {
$opt = "false";
if ($this->optional) {
$opt = "true";}
return "{\"optional\": \"" . $opt . "\", \"name\": \"" . $this->name . "\", \"doc\": \"" . $this->doc->docDynamic() . "\", \"type\": \"" . $this->type->lookPretty() . "\"}";
}
}

function toHeader(...$arguments) {
if (count($arguments) == 0) {
$opt = "false";
if ($this->optional) {
$opt = "true";}
return "{\"optional\": \"" . $opt . "\", \"name\": \"" . $this->name . "\", \"type\": " . $this->type->toHeader() . "}";
}
}

static function fromHeader(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$argument = new Carbonite_Argument($parent, _c_lib__mapUtils::readIndex($raw, "name"), _c_lib__mapUtils::readIndex($raw, "type"));
return $argument;
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Expression {
public $output;

public $parent;

public $container;

public $compiler;

public $grouped;

public $relativeParent;

public $terms;

public $first;

public $last;

public $raw;

public $orders;

public $operator;

public $reference;

public $_c__function;

public $startOffset;

public $endOffset;

public $source;

function __construct(...$arguments) {
$this->output = null;
$this->parent = null;
$this->container = null;
$this->compiler = null;
$this->grouped = false;
$this->relativeParent = null;
$this->terms = [];
$this->first = null;
$this->last = null;
$this->raw = null;
$this->orders = [];
$this->operator = "";
$this->reference = null;
$this->_c__function = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$container = $arguments[1];
$this->parent = $parent;
$this->container = $container;
}

}
function spawnChild(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$terms = $arguments[0];
$exp = new Carbonite_Terms_Expression($this, $this->container);
$exp->loadFromRaw($this->raw, $this->terms, count($this->terms));
$exp->expression->loadLocation($this->parent, $this->raw);
$exp->expression->relativeParent = $this->relativeParent;
$exp->expression->raw = $this->raw;
$exp->expression->loadTerms($terms);
$exp->output = $exp->expression->output;
return $exp;
}
}

function reOrder(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$terms = $arguments[0];
$diff = 0;
$needsReOrder = false;
for ($i = 0; $i < count($this->orders); $i++) {
$order = _c_lib__arrUtils::readIndex($this->orders, $i);
if ($diff != $order) {
if ($i == 0) {
$diff = $order;}else{
$needsReOrder = true;}}}
if ($needsReOrder) {
$orders = &$this->orders;
$sorted = rsort($orders);
$first = null;
$last = null;
$len = count($sorted);
$high = _c_lib__arrUtils::readIndex($sorted, 0);
for ($i = 0; $i < count($terms); $i++) {
$term = &_c_lib__arrUtils::readIndex($terms, $i);
if ($first == null) {
$first = Carbonite_Term::make($this, $this->container, $this->getRawTerm(_c_lib__arrUtils::readIndex($terms, $i)));
$first->loadFromRaw($this->getRawTerm(_c_lib__arrUtils::readIndex($terms, $i)), $this->terms, count($this->terms));}else{
$last = Carbonite_Term::make($this, $this->container, $this->getRawTerm(_c_lib__arrUtils::readIndex($terms, $i)));
$last->loadFromRaw($this->getRawTerm(_c_lib__arrUtils::readIndex($terms, $i)), $this->terms, count($this->terms));
$arg = [];
array_push($arg, $last->output);
$temp = &_c_lib__arrUtils::readIndex($terms, $i - 1);
$literalOperator = _c_lib__mapUtils::readIndex($temp, "operator");
$op = $first->output->reference->overload($literalOperator, $arg, $this);
if ($op->order == $high) {
$this->operator = $literalOperator;
$this->reference = $op;
$splitTerms = array_slice($terms, $i);
if (count($splitTerms) == 1) {
$firstTerm = &_c_lib__arrUtils::readIndex($splitTerms, 0);
$castParam = [_c_lib__mapUtils::readIndex($firstTerm, "term")];
$this->first = $this->spawnChild($castParam);}else{
$this->first = $this->spawnChild($splitTerms);}
$this->last = $this->spawnChild(array_splice($terms, $i));}else{
$first = $last;}}}}
}
}

function loadTerms(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$realTerms = $arguments[0];
$thisIsRelativeParent = false;
if ($this->relativeParent == null) {
$this->relativeParent = $this;
$thisIsRelativeParent = true;}
$terms = array_values($realTerms);
$term = &_c_lib__arrUtils::readIndex($terms, 0);
$t = Carbonite_Term::make($this, $this->container, $this->getRawTerm($term));
$t->loadFromRaw($this->getRawTerm($term), $this->terms, count($this->terms));
$this->first = $t;
if (count($terms) > 2) {
$this->operator = _c_lib__mapUtils::readIndex($term, "operator");
$exp = new Carbonite_Terms_Expression($this, $this->container);
$exp->loadFromRaw($this->raw, $this->terms, count($this->terms));
$exp->expression->loadLocation($this->parent, $this->raw);
$exp->expression->relativeParent = $this->relativeParent;
$exp->expression->raw = $this->raw;
$exp->expression->loadTerms(array_splice($terms, 1));
$exp->output = $exp->expression->output;
$this->last = $exp;}else if (count($terms) > 1) {
$this->operator = _c_lib__mapUtils::readIndex($term, "operator");
$term2 = &_c_lib__arrUtils::readIndex($terms, 1);
$t2 = Carbonite_Term::make($this, $this->container, $this->getRawTerm($term2));
$t2->loadFromRaw($this->getRawTerm($term2), $this->terms, count($this->terms));
$this->last = $t2;}
if ($this->last == null) {
$this->output = $this->first->output;
if (isset($term["operator"])) {
$arg = [];
$literalOperator = _c_lib__mapUtils::readIndex($term, "operator");
$op = $this->first->output->reference->overload($literalOperator, $arg, $this);
$this->operator = $literalOperator;
$this->reference = $op;}}else{
$normal = true;
$castOutput = null;
if ($this->operator == "=>") {
if ($this->first->type == "sequence") {
$seq = $this->first;
$reference = _c_lib__arrUtils::readIndex($seq->parts, 0);
if ($reference->isConstant) {
$this->last->output = $seq->output;
$castOutput = $seq->output;}}}else if ($this->operator == "=") {
if ($this->first->type == "sequence") {
$seq = $this->first;
$lastPart = _c_lib__arrUtils::readIndex($seq->parts, count($seq->parts) - 1);
$prev = _c_lib__arrUtils::readIndex($seq->parts, count($seq->parts) - 2);
if ($lastPart->type == "index") {
$_c__list = &$prev->output->reference->getMethods("@setIndex");
if (count($_c__list) > 0) {
$setIndex = _c_lib__arrUtils::readIndex($_c__list, 0);
$last = $this->last;
$setExp = new Carbonite_Expression($this->parent, $this->container);
$setExp->output = $last->output;
$setExp->first = $last;
$this->last = null;
$castLast = $lastPart;
$index = $castLast->argument;
array_pop($seq->parts);
$callSetIndex = new Carbonite_Parts_Call($prev, $this->first);
$callSetIndex->reference = new Carbonite_Members_ReferenceMethod($setIndex, $prev->context);
array_push($callSetIndex->arguments, $index);
array_push($callSetIndex->arguments, $setExp);
array_push($seq->parts, $callSetIndex);
$this->output = $callSetIndex->reference->output;
$this->reference = null;
return null;}}}}
$arg = [];
array_push($arg, $this->last->output);
$this->reference = $this->first->output->reference->overload($this->operator, $arg, $this);
$this->output = $this->reference->output;
if ($normal == false) {
$this->output = $castOutput;}
if ($this->reference->hasFlag("set")) {
if ($this->first->type == "sequence") {
$seq = $this->first;
$lastPart = _c_lib__arrUtils::readIndex($seq->parts, count($seq->parts) - 1);
$prev = _c_lib__arrUtils::readIndex($seq->parts, count($seq->parts) - 2);
if ($lastPart->type == "index") {
$_c__list = &$prev->output->reference->getMethods("@actIndex");
if (count($_c__list) > 0) {
$setIndex = _c_lib__arrUtils::readIndex($_c__list, 0);
$castLast = $lastPart;
$index = $castLast->argument;
array_pop($seq->parts);
$callSetIndex = new Carbonite_Parts_Call($prev, $this->first);
$callSetIndex->reference = new Carbonite_Members_ReferenceMethod($setIndex, $prev->context);
array_push($callSetIndex->arguments, $index);
array_push($seq->parts, $callSetIndex);}}}}
array_push($this->relativeParent->orders, $this->reference->order);
if ($thisIsRelativeParent) {
$this->reOrder($realTerms);}}
}
}

function &getRawTerm(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$term = $arguments[0];
if (isset($term["operator"])) {
return _c_lib__mapUtils::readIndex($term, "term");}else{
return $term;}
}
}

function loadFromRaw(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
$terms = &_c_lib__mapUtils::readIndex($raw, "terms");
$this->loadLocation($this->parent, $raw);
$this->relativeParent = $this;
Carbonite_Expression::buildTermsIntoExpression($this, $terms, 0, count($terms) - 1);
}
}

function operate(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$operator = $arguments[0];
$arg = [];
array_push($arg, $this->last->output);
$op = $this->first->output->reference->overload($operator, $arg, $this);
$this->operator = $operator;
$this->reference = $op;
$this->output = $this->reference->output;
}
}

static function buildTermsIntoExpression(...$arguments) {
if (count($arguments) == 4 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'integer' or gettype($arguments[2]) == 'NULL') and (gettype($arguments[3]) == 'integer' or gettype($arguments[3]) == 'NULL')) {
$exp = $arguments[0];
$terms = $arguments[1];
$start = $arguments[2];
$end = $arguments[3];
$allSame = true;
$diff = "";
$high = 0 - 1;
$index = 0 - 1;
if (count($terms) == 1) {
$exp->first = Carbonite_Term::make($exp, $exp->container, $exp->getRawTerm(_c_lib__arrUtils::readIndex($terms, 0)));
$exp->first->loadFromRaw($exp->getRawTerm(_c_lib__arrUtils::readIndex($terms, 0)), $exp->terms, 0);
$exp->output = $exp->first->output;
if (_c_lib__mapUtils::readIndex(_c_lib__arrUtils::readIndex($terms, 0), "operator") != null) {
$operator = _c_lib__mapUtils::readIndex(_c_lib__arrUtils::readIndex($terms, 0), "operator");
$arg = [];
$op = $exp->first->output->reference->overload($operator, $arg, $exp);
$exp->operator = $operator;
$exp->reference = $op;
$exp->output = $exp->reference->output;}
return null;}
for ($i = $start;$i <= $end;$i++) {
$term = &_c_lib__arrUtils::readIndex($terms, $i);
if (isset($term["operator"]) and $i != $end) {
$operator = _c_lib__mapUtils::readIndex($term, "operator");

$order = _c_lib__mapUtils::readIndex($exp->parent->compiler->operatorOrders, $operator);

if ($order === null) {
$exp->buildError("Unkown operator '" . $operator . "'");}else{
if ($diff == "") {
$diff = $operator;}else if ($diff != $operator) {
$allSame = false;}
if ($high < $order) {
$high = $order;
$index = $i;}}}}
if ($allSame and $end - $start == 1) {
$first = Carbonite_Term::make($exp, $exp->container, $exp->getRawTerm(_c_lib__arrUtils::readIndex($terms, $start)));
$first->loadFromRaw($exp->getRawTerm(_c_lib__arrUtils::readIndex($terms, $start)), $exp->terms, 0);
$exp->first = $first;
$last = Carbonite_Term::make($exp, $exp->container, $exp->getRawTerm(_c_lib__arrUtils::readIndex($terms, $end)));
$last->loadFromRaw($exp->getRawTerm(_c_lib__arrUtils::readIndex($terms, $end)), $exp->terms, 0);
$exp->last = $last;
$exp->operate(_c_lib__mapUtils::readIndex(_c_lib__arrUtils::readIndex($terms, $start), "operator"));}else{
$len1 = $index - $start + 1;
$len2 = $end - $index;
if ($len1 == 1) {
$first = Carbonite_Term::make($exp, $exp->container, $exp->getRawTerm(_c_lib__arrUtils::readIndex($terms, $start)));
$first->loadFromRaw($exp->getRawTerm(_c_lib__arrUtils::readIndex($terms, $start)), $exp->terms, 0);
$exp->first = $first;}else{
$firstExpression = new Carbonite_Terms_Expression($exp, $exp->container);
$firstExpression->build($exp, $exp->container);
Carbonite_Expression::buildTermsIntoExpression($firstExpression->expression, $terms, $start, $index);
$firstExpression->output = $firstExpression->expression->output;
$exp->first = $firstExpression;}
if ($len2 == 1) {
$last = Carbonite_Term::make($exp, $exp->container, $exp->getRawTerm(_c_lib__arrUtils::readIndex($terms, $end)));
$last->loadFromRaw($exp->getRawTerm(_c_lib__arrUtils::readIndex($terms, $end)), $exp->terms, 0);
$exp->last = $last;}else{
$lastExpression = new Carbonite_Terms_Expression($exp, $exp->container);
$lastExpression->build($exp, $exp->container);
Carbonite_Expression::buildTermsIntoExpression($lastExpression->expression, $terms, $index + 1, $end);
$lastExpression->output = $lastExpression->expression->output;
$exp->last = $lastExpression;}}
if ($exp->operator == "=") {
if ($exp->first->type == "sequence") {
$seq = $exp->first;
$lastPart = _c_lib__arrUtils::readIndex($seq->parts, count($seq->parts) - 1);
$prev = _c_lib__arrUtils::readIndex($seq->parts, count($seq->parts) - 2);
if ($lastPart->type == "index") {
$_c__list = &$prev->output->reference->getMethods("@setIndex");
if (count($_c__list) > 0) {
$setIndex = _c_lib__arrUtils::readIndex($_c__list, 0);
$last = $exp->last;
$setExp = new Carbonite_Expression($exp->parent, $exp->container);
$setExp->output = $last->output;
$setExp->first = $last;
$exp->last = null;
$castLast = $lastPart;
$argIndex = $castLast->argument;
array_pop($seq->parts);
$callSetIndex = new Carbonite_Parts_Call($prev, $exp->first);
$callSetIndex->reference = new Carbonite_Members_ReferenceMethod($setIndex, $prev->context);
array_push($callSetIndex->arguments, $argIndex);
array_push($callSetIndex->arguments, $setExp);
array_push($seq->parts, $callSetIndex);
$exp->output = $callSetIndex->reference->output;
$exp->reference = null;
return null;}}}}
$exp->operate(_c_lib__mapUtils::readIndex(_c_lib__arrUtils::readIndex($terms, $index), "operator"));
if ($exp->reference->hasFlag("set")) {
if ($exp->first->type == "sequence") {
$seq = $exp->first;
$lastPart = _c_lib__arrUtils::readIndex($seq->parts, count($seq->parts) - 1);
$prev = _c_lib__arrUtils::readIndex($seq->parts, count($seq->parts) - 2);
if ($lastPart->type == "index") {
$_c__list = &$prev->output->reference->getMethods("@actIndex");
if (count($_c__list) > 0) {
$setIndex = _c_lib__arrUtils::readIndex($_c__list, 0);
$castLast = $lastPart;
$argIndex = $castLast->argument;
array_pop($seq->parts);
$callSetIndex = new Carbonite_Parts_Call($prev, $exp->first);
$callSetIndex->reference = new Carbonite_Members_ReferenceMethod($setIndex, $prev->context);
array_push($callSetIndex->arguments, $argIndex);
array_push($seq->parts, $callSetIndex);}}}}
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new \Exception("Build error");
}
}


}class Carbonite_Term {
public $output;

public $parent;

public $container;

public $context;

public $index;

public $raw;

public $type;

public $startOffset;

public $endOffset;

public $source;

function __construct(...$arguments) {
$this->output = null;
$this->parent = null;
$this->container = null;
$this->context = null;
$this->index = 0;
$this->raw = null;
$this->type = "";
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$container = $arguments[1];
$this->parent = $parent;
$this->container = $container;
}

}
function loadFromRaw(...$arguments) {
if (count($arguments) == 3 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'integer' or gettype($arguments[2]) == 'NULL')) {
$raw = $arguments[0];
$context = $arguments[1];
$index = $arguments[2];
$this->raw = $raw;
$this->context = $context;
$this->index = $index;
$this->loadLocation($this->parent->parent, $raw);
$this->build($this->parent, $this->container);
}
}

static function make(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[1]) == 'NULL') and ((gettype($arguments[2]) == 'array' and isset($arguments[2]['_c__mapC'])) or gettype($arguments[2]) == 'NULL')) {
$parent = $arguments[0];
$container = $arguments[1];
$raw = $arguments[2];
$type = _c_lib__mapUtils::readIndex($raw, "type");
$rtn = null;
if ($type == "literal") {
$rtn = new Carbonite_Terms_Literal($parent, $container);}else if ($type == "constant") {
$rtn = new Carbonite_Terms_Sequence($parent, $container);}else if ($type == "function") {
$rtn = new Carbonite_Terms_Function($parent, $container);}else if ($type == "group") {
$exp = new Carbonite_Terms_Expression($parent, $container);
$exp->expression = new Carbonite_Expression($parent->parent, $container);
$exp->expression->grouped = true;
$exp->expression->loadLocation($parent->parent, $raw);
$exp->expression->relativeParent = $parent->relativeParent;
$exp->expression->raw = _c_lib__mapUtils::readIndex($raw, "expression");
$cast = &_c_lib__mapUtils::readIndex($raw, "expression")["terms"];
$exp->expression->loadTerms($cast);
$exp->output = $exp->expression->output;
$rtn = $exp;}else if ($type == "prefix") {
$rtn = new Carbonite_Terms_Prefix($parent, $container);}
return $rtn;
}
}

function build(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$container = $arguments[1];

}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Terms_Literal {
public $native;

public $type;

public $output;

public $parent;

public $container;

public $context;

public $index;

public $raw;

public $startOffset;

public $endOffset;

public $source;

function __construct(...$arguments) {
$this->native = null;
$this->type = "literal";
$this->output = null;
$this->parent = null;
$this->container = null;
$this->context = null;
$this->index = 0;
$this->raw = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$container = $arguments[1];
$this->parent = $parent;
$this->container = $container;
}

}
function build(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$container = $arguments[1];
$this->native = Carbonite_Native::make($parent, $this->raw);
$this->output = $this->native->output;
}
}

function loadFromRaw(...$arguments) {
if (count($arguments) == 3 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'integer' or gettype($arguments[2]) == 'NULL')) {
$raw = $arguments[0];
$context = $arguments[1];
$index = $arguments[2];
$this->raw = $raw;
$this->context = $context;
$this->index = $index;
$this->loadLocation($this->parent->parent, $raw);
$this->build($this->parent, $this->container);
}
}

static function make(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[1]) == 'NULL') and ((gettype($arguments[2]) == 'array' and isset($arguments[2]['_c__mapC'])) or gettype($arguments[2]) == 'NULL')) {
$parent = $arguments[0];
$container = $arguments[1];
$raw = $arguments[2];
$type = _c_lib__mapUtils::readIndex($raw, "type");
$rtn = null;
if ($type == "literal") {
$rtn = new Carbonite_Terms_Literal($parent, $container);}else if ($type == "constant") {
$rtn = new Carbonite_Terms_Sequence($parent, $container);}else if ($type == "function") {
$rtn = new Carbonite_Terms_Function($parent, $container);}else if ($type == "group") {
$exp = new Carbonite_Terms_Expression($parent, $container);
$exp->expression = new Carbonite_Expression($parent->parent, $container);
$exp->expression->grouped = true;
$exp->expression->loadLocation($parent->parent, $raw);
$exp->expression->relativeParent = $parent->relativeParent;
$exp->expression->raw = _c_lib__mapUtils::readIndex($raw, "expression");
$cast = &_c_lib__mapUtils::readIndex($raw, "expression")["terms"];
$exp->expression->loadTerms($cast);
$exp->output = $exp->expression->output;
$rtn = $exp;}else if ($type == "prefix") {
$rtn = new Carbonite_Terms_Prefix($parent, $container);}
return $rtn;
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Terms_Expression {
public $expression;

public $parentExpression;

public $type;

public $output;

public $parent;

public $container;

public $context;

public $index;

public $raw;

public $startOffset;

public $endOffset;

public $source;

function __construct(...$arguments) {
$this->expression = null;
$this->parentExpression = null;
$this->type = "expression";
$this->output = null;
$this->parent = null;
$this->container = null;
$this->context = null;
$this->index = 0;
$this->raw = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$container = $arguments[1];
$this->parent = $parent;
$this->container = $container;
}

}
function build(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$container = $arguments[1];
if ($this->expression == null) {
$this->expression = new Carbonite_Expression($parent->parent, $container);}
$this->parentExpression = $parent;
}
}

function loadFromRaw(...$arguments) {
if (count($arguments) == 3 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'integer' or gettype($arguments[2]) == 'NULL')) {
$raw = $arguments[0];
$context = $arguments[1];
$index = $arguments[2];
$this->raw = $raw;
$this->context = $context;
$this->index = $index;
$this->loadLocation($this->parent->parent, $raw);
$this->build($this->parent, $this->container);
}
}

static function make(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[1]) == 'NULL') and ((gettype($arguments[2]) == 'array' and isset($arguments[2]['_c__mapC'])) or gettype($arguments[2]) == 'NULL')) {
$parent = $arguments[0];
$container = $arguments[1];
$raw = $arguments[2];
$type = _c_lib__mapUtils::readIndex($raw, "type");
$rtn = null;
if ($type == "literal") {
$rtn = new Carbonite_Terms_Literal($parent, $container);}else if ($type == "constant") {
$rtn = new Carbonite_Terms_Sequence($parent, $container);}else if ($type == "function") {
$rtn = new Carbonite_Terms_Function($parent, $container);}else if ($type == "group") {
$exp = new Carbonite_Terms_Expression($parent, $container);
$exp->expression = new Carbonite_Expression($parent->parent, $container);
$exp->expression->grouped = true;
$exp->expression->loadLocation($parent->parent, $raw);
$exp->expression->relativeParent = $parent->relativeParent;
$exp->expression->raw = _c_lib__mapUtils::readIndex($raw, "expression");
$cast = &_c_lib__mapUtils::readIndex($raw, "expression")["terms"];
$exp->expression->loadTerms($cast);
$exp->output = $exp->expression->output;
$rtn = $exp;}else if ($type == "prefix") {
$rtn = new Carbonite_Terms_Prefix($parent, $container);}
return $rtn;
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Terms_Sequence {
public $name;

public $parts;

public $templates;

public $type;

public $output;

public $parent;

public $container;

public $context;

public $index;

public $raw;

public $startOffset;

public $endOffset;

public $source;

function __construct(...$arguments) {
$this->name = null;
$this->parts = [];
$this->templates = [];
$this->type = "sequence";
$this->output = null;
$this->parent = null;
$this->container = null;
$this->context = null;
$this->index = 0;
$this->raw = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$container = $arguments[1];
$this->parent = $parent;
$this->container = $container;
}

}
function split(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
$isConstructor = false;
$splits = explode(".", $name);
for ($i = 0; $i < count($splits); $i++) {
if ($isConstructor == false) {
$p = _c_lib__arrUtils::readIndex($splits, $i);
if (count($this->parts) == 0) {
$ref = new Carbonite_Parts_Reference($p, $this);
array_push($this->parts, $ref);
$this->output = $ref->output;
$isConstructor = $ref->isConstructor;}else{
$last = _c_lib__arrUtils::readIndex($this->parts, count($this->parts) - 1);
$dot = new Carbonite_Parts_Dot($last, $p, $this);
array_push($this->parts, $dot);
$this->output = $dot->output;}}}
}
}

function build(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$container = $arguments[1];
$this->container = $container;
$name = _c_lib__mapUtils::readIndex($this->raw, "name");
if (isset($this->raw["template"])) {
$templates = &_c_lib__mapUtils::readIndex($this->raw, "template");
for ($i = 0; $i < count($templates); $i++) {
$type = new Carbonite_Type($parent->parent->compiler, $parent->parent);
$type->loadFromRaw(_c_lib__arrUtils::readIndex($templates, $i));
array_push($this->templates, $type);}}
$this->split($name);
$appendix = &_c_lib__mapUtils::readIndex($this->raw, "appendix");
for ($i = 0; $i < count($appendix); $i++) {
$p = &_c_lib__arrUtils::readIndex($appendix, $i);
$type = _c_lib__mapUtils::readIndex($p, "type");
$last = _c_lib__arrUtils::readIndex($this->parts, count($this->parts) - 1);
$part = null;
if ($type == "call") {
$args = &_c_lib__mapUtils::readIndex($p, "expression");
$part = new Carbonite_Parts_Call($last, $args, $this);
array_push($this->parts, $part);
$this->output = $part->output;}else if ($type == "dot") {
$this->split(_c_lib__mapUtils::readIndex($p, "name"));}else if ($type == "index") {
$part = new Carbonite_Parts_Index($last, _c_lib__mapUtils::readIndex($p, "expression"), $this);
array_push($this->parts, $part);
$this->output = $part->output;}}
}
}

function loadFromRaw(...$arguments) {
if (count($arguments) == 3 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'integer' or gettype($arguments[2]) == 'NULL')) {
$raw = $arguments[0];
$context = $arguments[1];
$index = $arguments[2];
$this->raw = $raw;
$this->context = $context;
$this->index = $index;
$this->loadLocation($this->parent->parent, $raw);
$this->build($this->parent, $this->container);
}
}

static function make(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[1]) == 'NULL') and ((gettype($arguments[2]) == 'array' and isset($arguments[2]['_c__mapC'])) or gettype($arguments[2]) == 'NULL')) {
$parent = $arguments[0];
$container = $arguments[1];
$raw = $arguments[2];
$type = _c_lib__mapUtils::readIndex($raw, "type");
$rtn = null;
if ($type == "literal") {
$rtn = new Carbonite_Terms_Literal($parent, $container);}else if ($type == "constant") {
$rtn = new Carbonite_Terms_Sequence($parent, $container);}else if ($type == "function") {
$rtn = new Carbonite_Terms_Function($parent, $container);}else if ($type == "group") {
$exp = new Carbonite_Terms_Expression($parent, $container);
$exp->expression = new Carbonite_Expression($parent->parent, $container);
$exp->expression->grouped = true;
$exp->expression->loadLocation($parent->parent, $raw);
$exp->expression->relativeParent = $parent->relativeParent;
$exp->expression->raw = _c_lib__mapUtils::readIndex($raw, "expression");
$cast = &_c_lib__mapUtils::readIndex($raw, "expression")["terms"];
$exp->expression->loadTerms($cast);
$exp->output = $exp->expression->output;
$rtn = $exp;}else if ($type == "prefix") {
$rtn = new Carbonite_Terms_Prefix($parent, $container);}
return $rtn;
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Terms_Prefix {
public $expression;

public $parentExpression;

public $prefix;

public $type;

public $output;

public $parent;

public $container;

public $context;

public $index;

public $raw;

public $startOffset;

public $endOffset;

public $source;

function __construct(...$arguments) {
$this->expression = null;
$this->parentExpression = null;
$this->prefix = "";
$this->type = "prefix";
$this->output = null;
$this->parent = null;
$this->container = null;
$this->context = null;
$this->index = 0;
$this->raw = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$container = $arguments[1];
$this->parent = $parent;
$this->container = $container;
}

}
function build(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$container = $arguments[1];
$this->expression = new Carbonite_Expression($parent->parent, $container);
$this->expression->loadFromRaw(_c_lib__mapUtils::readIndex($this->raw, "expression"));
$this->output = $this->expression->output;
$this->parentExpression = $parent;
$this->prefix = _c_lib__mapUtils::readIndex($this->raw, "prefix");
}
}

function loadFromRaw(...$arguments) {
if (count($arguments) == 3 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'integer' or gettype($arguments[2]) == 'NULL')) {
$raw = $arguments[0];
$context = $arguments[1];
$index = $arguments[2];
$this->raw = $raw;
$this->context = $context;
$this->index = $index;
$this->loadLocation($this->parent->parent, $raw);
$this->build($this->parent, $this->container);
}
}

static function make(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[1]) == 'NULL') and ((gettype($arguments[2]) == 'array' and isset($arguments[2]['_c__mapC'])) or gettype($arguments[2]) == 'NULL')) {
$parent = $arguments[0];
$container = $arguments[1];
$raw = $arguments[2];
$type = _c_lib__mapUtils::readIndex($raw, "type");
$rtn = null;
if ($type == "literal") {
$rtn = new Carbonite_Terms_Literal($parent, $container);}else if ($type == "constant") {
$rtn = new Carbonite_Terms_Sequence($parent, $container);}else if ($type == "function") {
$rtn = new Carbonite_Terms_Function($parent, $container);}else if ($type == "group") {
$exp = new Carbonite_Terms_Expression($parent, $container);
$exp->expression = new Carbonite_Expression($parent->parent, $container);
$exp->expression->grouped = true;
$exp->expression->loadLocation($parent->parent, $raw);
$exp->expression->relativeParent = $parent->relativeParent;
$exp->expression->raw = _c_lib__mapUtils::readIndex($raw, "expression");
$cast = &_c_lib__mapUtils::readIndex($raw, "expression")["terms"];
$exp->expression->loadTerms($cast);
$exp->output = $exp->expression->output;
$rtn = $exp;}else if ($type == "prefix") {
$rtn = new Carbonite_Terms_Prefix($parent, $container);}
return $rtn;
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Terms_Function {
public $_c__function;

public $parentExpression;

public $type;

public $output;

public $parent;

public $container;

public $context;

public $index;

public $raw;

public $startOffset;

public $endOffset;

public $source;

function __construct(...$arguments) {
$this->_c__function = null;
$this->parentExpression = null;
$this->type = "function";
$this->output = null;
$this->parent = null;
$this->container = null;
$this->context = null;
$this->index = 0;
$this->raw = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$container = $arguments[1];
$this->parent = $parent;
$this->container = $container;
}

}
function build(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$container = $arguments[1];
$this->_c__function = new Carbonite_Function($parent, $this->raw);
$this->parentExpression = $parent;
$this->output = $parent->output;
}
}

function loadFromRaw(...$arguments) {
if (count($arguments) == 3 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'integer' or gettype($arguments[2]) == 'NULL')) {
$raw = $arguments[0];
$context = $arguments[1];
$index = $arguments[2];
$this->raw = $raw;
$this->context = $context;
$this->index = $index;
$this->loadLocation($this->parent->parent, $raw);
$this->build($this->parent, $this->container);
}
}

static function make(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[1]) == 'NULL') and ((gettype($arguments[2]) == 'array' and isset($arguments[2]['_c__mapC'])) or gettype($arguments[2]) == 'NULL')) {
$parent = $arguments[0];
$container = $arguments[1];
$raw = $arguments[2];
$type = _c_lib__mapUtils::readIndex($raw, "type");
$rtn = null;
if ($type == "literal") {
$rtn = new Carbonite_Terms_Literal($parent, $container);}else if ($type == "constant") {
$rtn = new Carbonite_Terms_Sequence($parent, $container);}else if ($type == "function") {
$rtn = new Carbonite_Terms_Function($parent, $container);}else if ($type == "group") {
$exp = new Carbonite_Terms_Expression($parent, $container);
$exp->expression = new Carbonite_Expression($parent->parent, $container);
$exp->expression->grouped = true;
$exp->expression->loadLocation($parent->parent, $raw);
$exp->expression->relativeParent = $parent->relativeParent;
$exp->expression->raw = _c_lib__mapUtils::readIndex($raw, "expression");
$cast = &_c_lib__mapUtils::readIndex($raw, "expression")["terms"];
$exp->expression->loadTerms($cast);
$exp->output = $exp->expression->output;
$rtn = $exp;}else if ($type == "prefix") {
$rtn = new Carbonite_Terms_Prefix($parent, $container);}
return $rtn;
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Type {
public $reference;

public $late;

public $lateReference;

public $magic;

public $magicType;

public $autoCast;

public $castTo;

public $templates;

public $compiler;

public $parent;

public $raw;

public $startOffset;

public $endOffset;

public $source;

function __construct(...$arguments) {
$this->reference = null;
$this->late = false;
$this->lateReference = null;
$this->magic = false;
$this->magicType = 0;
$this->autoCast = false;
$this->castTo = null;
$this->templates = [];
$this->compiler = null;
$this->parent = null;
$this->raw = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Compiler') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[1]) == 'NULL')) {
$compiler = $arguments[0];
$parent = $arguments[1];
$this->compiler = $compiler;
$this->parent = $parent;
$this->source = $this->parent->source;
}

}
function setReference(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL')) {
$reference = $arguments[0];
$this->reference = $reference;
if ($this->reference->link != null) {
$this->setReference($this->reference->link);}
}
}

function loadFromName(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$className = $arguments[0];
$raw = $arguments[1];
$this->raw = $raw;
$this->startOffset = _c_lib__mapUtils::readIndex($this->raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($this->raw, "end");
$this->setReference($this->compiler->findClass($className, $this));
for ($i = 0; $i < count($this->reference->templates); $i++) {
$template = _c_lib__arrUtils::readIndex($this->reference->templates, $i);
if ($i >= count($this->templates)) {
if ($template->optional) {
array_push($this->templates, $template->_c__default);}else{
}}}
}
}

function loadFromRaw(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
if (isset($raw["start"])) {
$this->loadLocation($this->parent, $raw);}
$name = _c_lib__mapUtils::readIndex($this->raw, "name");
if ($name == "this") {
$name = $this->parent->route;}
if ($name[0] == "@") {
$this->magic = true;
if ($name == "@self") {
$this->magicType = 1;
$this->setReference($this->parent);}else{
$this->buildError("Illegal magic type " . $name);}}else if ($this->parent->hasTemplate($name)) {
$this->late = true;
$this->lateReference = $this->parent->getTemplate($name);}else{
$this->setReference($this->compiler->findClass(_c_lib__mapUtils::readIndex($this->raw, "name"), $this));}
if (isset($this->raw["template"])) {
$pTemp = _c_lib__mapUtils::readIndex($this->raw, "template");
if ((gettype($pTemp) == 'double' ? 'float' : (gettype($pTemp) == 'array' ? (isset($pTemp['_c__mapC']) ? 'map' : 'array') : gettype($pTemp))) != "boolean") {
$templates = &$pTemp;
for ($i = 0; $i < count($templates); $i++) {
$type = new Carbonite_Type($this->compiler, $this->parent);
$type->loadFromRaw(_c_lib__arrUtils::readIndex($templates, $i));
array_push($this->templates, $type);}}}
if ($this->late == false and $this->reference->route != "function" and $this->magicType != 1) {
for ($i = 0; $i < count($this->reference->templates); $i++) {
$template = _c_lib__arrUtils::readIndex($this->reference->templates, $i);
if ($i >= count($this->templates)) {
if ($template->optional) {
array_push($this->templates, $template->_c__default);}else{
$this->buildError("Type '" . $this->reference->name . "' requires " . count($this->reference->templates) . " templates, " . count($this->templates) . " provided");}}}}
$this->startOffset = _c_lib__mapUtils::readIndex($this->raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($this->raw, "end");
}
}

function check(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or gettype($arguments[0]) == 'NULL')) {
$what = $arguments[0];
if ($what->reference->name == "null") {
return true;}
if ($what->reference->name == "empty") {
return true;}
if ($what->reference->descendantOf($this->reference)) {
return true;}
if ($this->reference->descendantOf($what->reference)) {
return true;}
if ($what->reference->canCast($this->reference)) {
$what->autoCast = true;
$what->castTo = $this->reference;
return true;}
if ($this->reference->route != $what->reference->route) {
return false;}
if (count($this->templates) > count($what->templates)) {
return false;}
for ($i = 0; $i < count($this->templates); $i++) {
$template = _c_lib__arrUtils::readIndex($this->templates, $i);
$whatTemplate = _c_lib__arrUtils::readIndex($what->templates, $i);
if ($whatTemplate->late) {
}else{
if ($template->check($whatTemplate) == false) {
return false;}}}
return true;
}
}

function getClassParent(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL')) {
$cls = $arguments[0];
if (count($cls->inherits) > 0) {
$cast = _c_lib__arrUtils::readIndex($cls->inherits, 0);
return $cast;}else{
return $cls;}
}
}

function lookPretty(...$arguments) {
if (count($arguments) == 0) {
$beg = "";
if (count($this->templates) > 0) {
$temps = [];
for ($i = 0; $i < count($this->templates); $i++) {
$cast = _c_lib__arrUtils::readIndex($this->templates, $i);
array_push($temps, $cast->lookPretty());}
$beg = "<" . implode(", ", $temps) . ">";}
$route = "";
if ($this->late) {
$route = _c_lib__mapUtils::readIndex($this->raw, "name");}else{
$route = $this->reference->route;}
return $beg . $route;
}
}

function checkAsSibling(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or gettype($arguments[0]) == 'NULL')) {
$what = $arguments[0];
if ($what->reference->name == "null") {
return true;}
$first = $this->getClassParent($this->reference);
$against = $this->getClassParent($what->reference);
if ($first->route != $against->route) {
return false;}
if (count($this->templates) > count($what->templates)) {
return false;}
for ($i = 0; $i < count($this->templates); $i++) {
$template = _c_lib__arrUtils::readIndex($this->templates, $i);
$whatTemplate = _c_lib__arrUtils::readIndex($what->templates, $i);
if ($template->check($whatTemplate) == false) {
return false;}}
return true;
}
}

function getWithContext(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or gettype($arguments[0]) == 'NULL')) {
$context = $arguments[0];
$rtn = new Carbonite_ReferenceType($this, $context);
return $rtn;
}
}

function checkWithContext(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or gettype($arguments[1]) == 'NULL')) {
$context = $arguments[0];
$what = $arguments[1];
if ($what->reference->name == "null") {
return true;}
if ($this->late == false) {
return $this->check($what);}
$realReference = _c_lib__arrUtils::readIndex($context->templates, $this->lateReference->index);
if ($what->reference->descendantOf($realReference->reference)) {
return true;}
if ($realReference->reference->descendantOf($what->reference)) {
return true;}
if ($realReference->reference->route != $what->reference->route) {
return false;}
if (count($realReference->templates) > count($what->templates)) {
return false;}
for ($i = 0; $i < count($realReference->templates); $i++) {
$template = _c_lib__arrUtils::readIndex($realReference->templates, $i);
$whatTemplate = _c_lib__arrUtils::readIndex($what->templates, $i);
if ($template->checkWithContext($context, $whatTemplate) == false) {
return false;}}
return true;
}
}

function toHeader(...$arguments) {
if (count($arguments) == 0) {
$templates = [];
for ($i = 0; $i < count($this->templates); $i++) {
$template = _c_lib__arrUtils::readIndex($this->templates, $i);
array_push($templates, $template->toHeader());}
return "{\"name\": \"" . $this->reference->route . "\", \"templates\": [" . implode(", ", $templates) . "]}";
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_ReferenceType {
public $context;

public $typeReference;

public $reference;

public $late;

public $lateReference;

public $magic;

public $magicType;

public $autoCast;

public $castTo;

public $templates;

public $compiler;

public $parent;

public $raw;

public $startOffset;

public $endOffset;

public $source;

function __construct(...$arguments) {
$this->context = null;
$this->typeReference = null;
$this->reference = null;
$this->late = false;
$this->lateReference = null;
$this->magic = false;
$this->magicType = 0;
$this->autoCast = false;
$this->castTo = null;
$this->templates = [];
$this->compiler = null;
$this->parent = null;
$this->raw = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or gettype($arguments[1]) == 'NULL')) {
$type = $arguments[0];
$context = $arguments[1];
$this->context = $context;
$this->typeReference = $type;
if ($type->late == true) {
$cast = _c_lib__arrUtils::readIndex($context->templates, $type->lateReference->index);
$this->setReference($cast->reference);
$this->templates = $cast->templates;}else{
$this->setReference($type->reference);
$this->templates = $type->templates;}
}

}
function check(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or gettype($arguments[0]) == 'NULL')) {
$against = $arguments[0];
$this->typeReference->checkWithContext($this->context, $against);
}
}

function setReference(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL')) {
$reference = $arguments[0];
$this->reference = $reference;
if ($this->reference->link != null) {
$this->setReference($this->reference->link);}
}
}

function loadFromName(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$className = $arguments[0];
$raw = $arguments[1];
$this->raw = $raw;
$this->startOffset = _c_lib__mapUtils::readIndex($this->raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($this->raw, "end");
$this->setReference($this->compiler->findClass($className, $this));
for ($i = 0; $i < count($this->reference->templates); $i++) {
$template = _c_lib__arrUtils::readIndex($this->reference->templates, $i);
if ($i >= count($this->templates)) {
if ($template->optional) {
array_push($this->templates, $template->_c__default);}else{
}}}
}
}

function loadFromRaw(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
if (isset($raw["start"])) {
$this->loadLocation($this->parent, $raw);}
$name = _c_lib__mapUtils::readIndex($this->raw, "name");
if ($name == "this") {
$name = $this->parent->route;}
if ($name[0] == "@") {
$this->magic = true;
if ($name == "@self") {
$this->magicType = 1;
$this->setReference($this->parent);}else{
$this->buildError("Illegal magic type " . $name);}}else if ($this->parent->hasTemplate($name)) {
$this->late = true;
$this->lateReference = $this->parent->getTemplate($name);}else{
$this->setReference($this->compiler->findClass(_c_lib__mapUtils::readIndex($this->raw, "name"), $this));}
if (isset($this->raw["template"])) {
$pTemp = _c_lib__mapUtils::readIndex($this->raw, "template");
if ((gettype($pTemp) == 'double' ? 'float' : (gettype($pTemp) == 'array' ? (isset($pTemp['_c__mapC']) ? 'map' : 'array') : gettype($pTemp))) != "boolean") {
$templates = &$pTemp;
for ($i = 0; $i < count($templates); $i++) {
$type = new Carbonite_Type($this->compiler, $this->parent);
$type->loadFromRaw(_c_lib__arrUtils::readIndex($templates, $i));
array_push($this->templates, $type);}}}
if ($this->late == false and $this->reference->route != "function" and $this->magicType != 1) {
for ($i = 0; $i < count($this->reference->templates); $i++) {
$template = _c_lib__arrUtils::readIndex($this->reference->templates, $i);
if ($i >= count($this->templates)) {
if ($template->optional) {
array_push($this->templates, $template->_c__default);}else{
$this->buildError("Type '" . $this->reference->name . "' requires " . count($this->reference->templates) . " templates, " . count($this->templates) . " provided");}}}}
$this->startOffset = _c_lib__mapUtils::readIndex($this->raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($this->raw, "end");
}
}

function getClassParent(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL')) {
$cls = $arguments[0];
if (count($cls->inherits) > 0) {
$cast = _c_lib__arrUtils::readIndex($cls->inherits, 0);
return $cast;}else{
return $cls;}
}
}

function lookPretty(...$arguments) {
if (count($arguments) == 0) {
$beg = "";
if (count($this->templates) > 0) {
$temps = [];
for ($i = 0; $i < count($this->templates); $i++) {
$cast = _c_lib__arrUtils::readIndex($this->templates, $i);
array_push($temps, $cast->lookPretty());}
$beg = "<" . implode(", ", $temps) . ">";}
$route = "";
if ($this->late) {
$route = _c_lib__mapUtils::readIndex($this->raw, "name");}else{
$route = $this->reference->route;}
return $beg . $route;
}
}

function checkAsSibling(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or gettype($arguments[0]) == 'NULL')) {
$what = $arguments[0];
if ($what->reference->name == "null") {
return true;}
$first = $this->getClassParent($this->reference);
$against = $this->getClassParent($what->reference);
if ($first->route != $against->route) {
return false;}
if (count($this->templates) > count($what->templates)) {
return false;}
for ($i = 0; $i < count($this->templates); $i++) {
$template = _c_lib__arrUtils::readIndex($this->templates, $i);
$whatTemplate = _c_lib__arrUtils::readIndex($what->templates, $i);
if ($template->check($whatTemplate) == false) {
return false;}}
return true;
}
}

function getWithContext(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or gettype($arguments[0]) == 'NULL')) {
$context = $arguments[0];
$rtn = new Carbonite_ReferenceType($this, $context);
return $rtn;
}
}

function checkWithContext(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or gettype($arguments[1]) == 'NULL')) {
$context = $arguments[0];
$what = $arguments[1];
if ($what->reference->name == "null") {
return true;}
if ($this->late == false) {
return $this->check($what);}
$realReference = _c_lib__arrUtils::readIndex($context->templates, $this->lateReference->index);
if ($what->reference->descendantOf($realReference->reference)) {
return true;}
if ($realReference->reference->descendantOf($what->reference)) {
return true;}
if ($realReference->reference->route != $what->reference->route) {
return false;}
if (count($realReference->templates) > count($what->templates)) {
return false;}
for ($i = 0; $i < count($realReference->templates); $i++) {
$template = _c_lib__arrUtils::readIndex($realReference->templates, $i);
$whatTemplate = _c_lib__arrUtils::readIndex($what->templates, $i);
if ($template->checkWithContext($context, $whatTemplate) == false) {
return false;}}
return true;
}
}

function toHeader(...$arguments) {
if (count($arguments) == 0) {
$templates = [];
for ($i = 0; $i < count($this->templates); $i++) {
$template = _c_lib__arrUtils::readIndex($this->templates, $i);
array_push($templates, $template->toHeader());}
return "{\"name\": \"" . $this->reference->route . "\", \"templates\": [" . implode(", ", $templates) . "]}";
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Implements {
public $implementer;

public $_c__implements;

public $startOffset;

public $endOffset;

public $source;

function __construct(...$arguments) {
$this->implementer = "";
$this->_c__implements = "";
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$data = $arguments[0];
$this->implementer = _c_lib__mapUtils::readIndex($data, "implementer");
$this->_c__implements = _c_lib__mapUtils::readIndex($data, "implements");
}

}
function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Part {
public $output;

public $parent;

public $context;

public $root;

public $type;

public $raw;

function __construct(...$arguments) {
$this->output = null;
$this->parent = null;
$this->context = null;
$this->root = null;
$this->type = "";
$this->raw = null;


}

}class Carbonite_Parts_Reference {
public $reference;

public $constantReference;

public $isConstant;

public $isConstructor;

public $type;

public $output;

public $parent;

public $context;

public $root;

public $raw;

function __construct(...$arguments) {
$this->reference = null;
$this->constantReference = null;
$this->isConstant = false;
$this->isConstructor = false;
$this->type = "reference";
$this->output = null;
$this->parent = null;
$this->context = null;
$this->root = null;
$this->raw = null;

if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Term' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Literal') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Expression') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Sequence') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Prefix') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Function')) or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$parent = $arguments[1];
$this->parent = $parent;
if ($parent->container == null) {
$this->constantReference = new Carbonite_Type($parent->parent->parent->compiler, $parent->parent->parent);
if (isset($parent->raw["template"])) {
$template = &_c_lib__mapUtils::readIndex($parent->raw, "template");
if (isset($template["types"])) {
$parent->raw["template"] = _c_lib__mapUtils::readIndex($parent->raw, "template")["types"];}
$this->isConstructor = true;}
$rawName = _c_lib__mapUtils::readIndex($parent->raw, "name");
if ($parent->parent->parent->compiler->getClass($rawName) != null) {
$this->isConstructor = true;}
if ($this->isConstructor) {
$this->constantReference->loadFromRaw($parent->raw);}else{
$this->constantReference->loadFromName($name, $parent->raw);}
$this->output = $this->constantReference;
$this->root = null;
$this->context = $this->constantReference;
$this->isConstant = true;}else{
$this->reference = $parent->container->scope->search($name);
if ($this->reference == null) {
$this->constantReference = new Carbonite_Type($parent->parent->parent->compiler, $parent->parent->parent);
if (isset($parent->raw["template"])) {
$template = &_c_lib__mapUtils::readIndex($parent->raw, "template");
if (isset($template["types"])) {
$parent->raw["template"] = _c_lib__mapUtils::readIndex($parent->raw, "template")["types"];}
$this->isConstructor = true;}
$rawName = _c_lib__mapUtils::readIndex($parent->raw, "name");
if ($parent->parent->parent->compiler->getClass($rawName) != null) {
$this->isConstructor = true;}
if ($this->isConstructor) {
$this->constantReference->loadFromRaw($parent->raw);}else{
$this->constantReference->loadFromName($name, $parent->raw);}
$this->output = $this->constantReference;
$this->root = null;
$this->context = $this->constantReference;
$this->isConstant = true;}else{
$this->output = $this->reference->output;
$this->root = $this->reference;
$this->context = $this->reference->output;}}
}

}

}class Carbonite_Parts_Dot {
public $reference;

public $previous;

public $text;

public $type;

public $output;

public $parent;

public $context;

public $root;

public $raw;

function __construct(...$arguments) {
$this->reference = null;
$this->previous = null;
$this->text = "";
$this->type = "dot";
$this->output = null;
$this->parent = null;
$this->context = null;
$this->root = null;
$this->raw = null;

if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Part' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Parts_Reference') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Parts_Dot') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Parts_Call') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Parts_Index')) or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Term' or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Terms_Literal') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Terms_Expression') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Terms_Sequence') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Terms_Prefix') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Terms_Function')) or gettype($arguments[2]) == 'NULL')) {
$prev = $arguments[0];
$text = $arguments[1];
$parent = $arguments[2];
$this->parent = $parent;
$this->previous = $prev;
$this->text = $text;
if ($prev->output->reference->hasChild($text)) {
$this->output = new Carbonite_Type($parent->parent->parent->compiler, $parent->parent->parent);
$found = $prev->output->reference->getChild($text);
$this->output->loadFromName($found->route, $parent->raw);}else{
$this->reference = Carbonite_Member::makeReference($prev->output->reference, $prev->output->reference->dotMember($text, $parent), $prev->context);
$this->output = $this->reference->output;
if ($this->reference->type == "property") {
$cast = $this->reference;
$this->context = $cast->reference->output;}else{
$this->context = $prev->context;}}
$this->root = $prev->root;
}

}

}class Carbonite_Parts_Call {
public $previous;

public $reference;

public $arguments;

public $type;

public $output;

public $parent;

public $context;

public $root;

public $raw;

function __construct(...$arguments) {
$this->previous = null;
$this->reference = null;
$this->arguments = [];
$this->type = "call";
$this->output = null;
$this->parent = null;
$this->context = null;
$this->root = null;
$this->raw = null;

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Part' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Parts_Reference') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Parts_Dot') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Parts_Call') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Parts_Index')) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Term' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Literal') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Expression') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Sequence') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Prefix') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Terms_Function')) or gettype($arguments[1]) == 'NULL')) {
$prev = $arguments[0];
$parent = $arguments[1];
$this->previous = $prev;
$this->parent = $parent;
$this->root = $prev->root;
}
else if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Part' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Parts_Reference') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Parts_Dot') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Parts_Call') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Parts_Index')) or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Term' or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Terms_Literal') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Terms_Expression') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Terms_Sequence') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Terms_Prefix') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Terms_Function')) or gettype($arguments[2]) == 'NULL')) {
$prev = $arguments[0];
$args = $arguments[1];
$parent = $arguments[2];
$this->parent = $parent;
$this->previous = $prev;
$this->root = $prev->root;
for ($i = 0; $i < count($args); $i++) {
$arg = &_c_lib__arrUtils::readIndex($args, $i);
$exp = new Carbonite_Expression($parent->container->parent->parent, $parent->container);
$exp->loadFromRaw($arg);
array_push($this->arguments, $exp);}
if ($this->previous->type == "dot") {
$cast = $this->previous;
if ($cast->reference->type == "property") {
$refProp = $cast->reference;
if ($cast->reference->output->reference->route == "function") {
$this->functionCheck($cast->reference->output);}else{
$parent->source->error($parent, "Cannot call non function property '" . $refProp->reference->name . "' on type '" . $refProp->output->reference->name . "'");
throw new Exception("Build error");}}else{
$refMeth = $cast->reference;
if ($refMeth->reference->name == "@dot") {
$parent->source->error($parent, "TODO: Add function casting");
throw new Exception("Build error");}else{
$types = [];
for ($i = 0; $i < count($this->arguments); $i++) {
$arg = _c_lib__arrUtils::readIndex($this->arguments, $i);
array_push($types, $arg->output);}
if ($this->root == null) {
$method = $refMeth->reference->parent->overload($cast->text, $types, $parent);
$this->reference = new Carbonite_Members_ReferenceMethod($method, $this->previous->context);
$this->output = $method->output;
if ($method->binding == "bound") {
$parent->source->error($parent, "Cannot call bounded method on a fixed reference in type '" . $refMeth->reference->parent->name . "'");
throw new Exception("Build error");}}else{
$method = $refMeth->reference->parent->overloadWithContext($cast->text, $types, $prev->context, $parent);
$this->reference = Carbonite_Member::makeReference($prev->output->reference, $method, $prev->context);
$this->output = $method->output->getWithContext($prev->context);}}}}else{
$cast = $this->previous;
if ($cast->isConstant) {
$types = [];
for ($i = 0; $i < count($this->arguments); $i++) {
$arg = _c_lib__arrUtils::readIndex($this->arguments, $i);
array_push($types, $arg->output);}
$this->reference = new Carbonite_Members_ReferenceMethod($cast->output->reference->overload("@construct", $types, $parent), $prev->context);
$this->output = $cast->output;}else{
$this->functionCheck($cast->output);}}
}

}
function functionCheck(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or gettype($arguments[0]) == 'NULL')) {
$func = $arguments[0];
if (count($func->templates) == 0) {
$func->buildError("Function type must have at least one template");}
$this->output = _c_lib__arrUtils::readIndex($func->templates, 0);
if (count($func->templates) - 1 != count($this->arguments)) {
$this->parent->buildError("Invalid argument count " . count($this->arguments) . " for function " . $func->lookPretty());}
for ($i = 0; $i < count($this->arguments); $i++) {
$arg = _c_lib__arrUtils::readIndex($this->arguments, $i);
$check = _c_lib__arrUtils::readIndex($func->templates, $i + 1);
if ($arg->output->check($check) == false) {
$arg->output->buildError("Expression does not match argument " . $check->lookPretty());}}
}
}


}class Carbonite_Parts_Index {
public $previous;

public $argument;

public $reference;

public $type;

public $output;

public $parent;

public $context;

public $root;

public $raw;

function __construct(...$arguments) {
$this->previous = null;
$this->argument = null;
$this->reference = null;
$this->type = "index";
$this->output = null;
$this->parent = null;
$this->context = null;
$this->root = null;
$this->raw = null;

if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Part' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Parts_Reference') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Parts_Dot') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Parts_Call') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Parts_Index')) or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Term' or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Terms_Literal') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Terms_Expression') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Terms_Sequence') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Terms_Prefix') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Terms_Function')) or gettype($arguments[2]) == 'NULL')) {
$prev = $arguments[0];
$arg = $arguments[1];
$parent = $arguments[2];
$this->parent = $parent;
$this->previous = $prev;
$this->root = $prev->root;
$exp = new Carbonite_Expression($parent->container->parent->parent, $parent->container);
$exp->loadFromRaw($arg);
$this->argument = $exp;
$castParam = [];
array_push($castParam, $exp->output);
$index = $prev->output->reference->overloadWithContext("@index", $castParam, $prev->context, $parent);
$this->reference = Carbonite_Member::makeReference($prev->output->reference, $index, $prev->context);
$this->output = $index->output->getWithContext($prev->output);
$this->context = $this->output;
}

}

}class Carbonite_Native {
public $parent;

public $raw;

public $type;

public $output;

public $startOffset;

public $endOffset;

public $source;

function __construct(...$arguments) {
$this->parent = null;
$this->raw = null;
$this->type = "";
$this->output = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL')) {
$parent = $arguments[0];
$this->parent = $parent;
}

}
function loadFromRaw(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
$this->type = _c_lib__mapUtils::readIndex($raw, "literalType");
$this->loadLocation($this->parent->parent, $raw);
$this->build();
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$type = _c_lib__mapUtils::readIndex($raw, "literalType");
$rtn = null;
if ($type == "number") {
$isInt = _c_lib__mapUtils::readIndex($raw, "integer");
if ($isInt) {
$rtn = new Carbonite_Natives_Integer($parent);}else{
$rtn = new Carbonite_Natives_Float($parent);}
$rtn->loadFromRaw($raw);}else if ($type == "boolean") {
$rtn = new Carbonite_Natives_Boolean($parent);
$rtn->loadFromRaw($raw);}else if ($type == "string") {
$rtn = new Carbonite_Natives_String($parent);
$rtn->loadFromRaw($raw);}else if ($type == "array") {
$rtn = new Carbonite_Natives_Array($parent);
$rtn->loadFromRaw($raw);}
return $rtn;
}
}

function build(...$arguments) {
if (count($arguments) == 0) {

}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Natives_Integer {
public $value;

public $type;

public $parent;

public $raw;

public $output;

public $startOffset;

public $endOffset;

public $source;

function __construct(...$arguments) {
$this->value = 0;
$this->type = "integer";
$this->parent = null;
$this->raw = null;
$this->output = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL')) {
$parent = $arguments[0];
$this->parent = $parent;
}

}
function build(...$arguments) {
if (count($arguments) == 0) {
$this->value = _c_lib__mapUtils::readIndex($this->raw, "value");
$this->output = new Carbonite_Type($this->parent->parent->compiler, $this->parent->parent);
$this->output->loadFromName("int", $this->raw);
}
}

function loadFromRaw(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
$this->type = _c_lib__mapUtils::readIndex($raw, "literalType");
$this->loadLocation($this->parent->parent, $raw);
$this->build();
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$type = _c_lib__mapUtils::readIndex($raw, "literalType");
$rtn = null;
if ($type == "number") {
$isInt = _c_lib__mapUtils::readIndex($raw, "integer");
if ($isInt) {
$rtn = new Carbonite_Natives_Integer($parent);}else{
$rtn = new Carbonite_Natives_Float($parent);}
$rtn->loadFromRaw($raw);}else if ($type == "boolean") {
$rtn = new Carbonite_Natives_Boolean($parent);
$rtn->loadFromRaw($raw);}else if ($type == "string") {
$rtn = new Carbonite_Natives_String($parent);
$rtn->loadFromRaw($raw);}else if ($type == "array") {
$rtn = new Carbonite_Natives_Array($parent);
$rtn->loadFromRaw($raw);}
return $rtn;
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Natives_Float {
public $value;

public $type;

public $parent;

public $raw;

public $output;

public $startOffset;

public $endOffset;

public $source;

function __construct(...$arguments) {
$this->value = 0;
$this->type = "float";
$this->parent = null;
$this->raw = null;
$this->output = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL')) {
$parent = $arguments[0];
$this->parent = $parent;
}

}
function build(...$arguments) {
if (count($arguments) == 0) {
$this->value = _c_lib__mapUtils::readIndex($this->raw, "value");
$this->output = new Carbonite_Type($this->parent->parent->compiler, $this->parent->parent);
$this->output->loadFromName("float", $this->raw);
}
}

function loadFromRaw(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
$this->type = _c_lib__mapUtils::readIndex($raw, "literalType");
$this->loadLocation($this->parent->parent, $raw);
$this->build();
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$type = _c_lib__mapUtils::readIndex($raw, "literalType");
$rtn = null;
if ($type == "number") {
$isInt = _c_lib__mapUtils::readIndex($raw, "integer");
if ($isInt) {
$rtn = new Carbonite_Natives_Integer($parent);}else{
$rtn = new Carbonite_Natives_Float($parent);}
$rtn->loadFromRaw($raw);}else if ($type == "boolean") {
$rtn = new Carbonite_Natives_Boolean($parent);
$rtn->loadFromRaw($raw);}else if ($type == "string") {
$rtn = new Carbonite_Natives_String($parent);
$rtn->loadFromRaw($raw);}else if ($type == "array") {
$rtn = new Carbonite_Natives_Array($parent);
$rtn->loadFromRaw($raw);}
return $rtn;
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Natives_Boolean {
public $value;

public $type;

public $parent;

public $raw;

public $output;

public $startOffset;

public $endOffset;

public $source;

function __construct(...$arguments) {
$this->value = false;
$this->type = "boolean";
$this->parent = null;
$this->raw = null;
$this->output = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL')) {
$parent = $arguments[0];
$this->parent = $parent;
}

}
function build(...$arguments) {
if (count($arguments) == 0) {
$this->value = _c_lib__mapUtils::readIndex($this->raw, "value");
$this->output = new Carbonite_Type($this->parent->parent->compiler, $this->parent->parent);
$this->output->loadFromName("bool", $this->raw);
}
}

function loadFromRaw(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
$this->type = _c_lib__mapUtils::readIndex($raw, "literalType");
$this->loadLocation($this->parent->parent, $raw);
$this->build();
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$type = _c_lib__mapUtils::readIndex($raw, "literalType");
$rtn = null;
if ($type == "number") {
$isInt = _c_lib__mapUtils::readIndex($raw, "integer");
if ($isInt) {
$rtn = new Carbonite_Natives_Integer($parent);}else{
$rtn = new Carbonite_Natives_Float($parent);}
$rtn->loadFromRaw($raw);}else if ($type == "boolean") {
$rtn = new Carbonite_Natives_Boolean($parent);
$rtn->loadFromRaw($raw);}else if ($type == "string") {
$rtn = new Carbonite_Natives_String($parent);
$rtn->loadFromRaw($raw);}else if ($type == "array") {
$rtn = new Carbonite_Natives_Array($parent);
$rtn->loadFromRaw($raw);}
return $rtn;
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Natives_String {
public $value;

public $type;

public $parent;

public $raw;

public $output;

public $startOffset;

public $endOffset;

public $source;

function __construct(...$arguments) {
$this->value = "";
$this->type = "string";
$this->parent = null;
$this->raw = null;
$this->output = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL')) {
$parent = $arguments[0];
$this->parent = $parent;
}

}
function build(...$arguments) {
if (count($arguments) == 0) {
$this->value = _c_lib__mapUtils::readIndex($this->raw, "value");
$this->output = new Carbonite_Type($this->parent->parent->compiler, $this->parent->parent);
$this->output->loadFromName("string", $this->raw);
}
}

function loadFromRaw(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
$this->type = _c_lib__mapUtils::readIndex($raw, "literalType");
$this->loadLocation($this->parent->parent, $raw);
$this->build();
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$type = _c_lib__mapUtils::readIndex($raw, "literalType");
$rtn = null;
if ($type == "number") {
$isInt = _c_lib__mapUtils::readIndex($raw, "integer");
if ($isInt) {
$rtn = new Carbonite_Natives_Integer($parent);}else{
$rtn = new Carbonite_Natives_Float($parent);}
$rtn->loadFromRaw($raw);}else if ($type == "boolean") {
$rtn = new Carbonite_Natives_Boolean($parent);
$rtn->loadFromRaw($raw);}else if ($type == "string") {
$rtn = new Carbonite_Natives_String($parent);
$rtn->loadFromRaw($raw);}else if ($type == "array") {
$rtn = new Carbonite_Natives_Array($parent);
$rtn->loadFromRaw($raw);}
return $rtn;
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Natives_Array {
public $value;

public $type;

public $parent;

public $raw;

public $output;

public $startOffset;

public $endOffset;

public $source;

function __construct(...$arguments) {
$this->value = [];
$this->type = "array";
$this->parent = null;
$this->raw = null;
$this->output = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL')) {
$parent = $arguments[0];
$this->parent = $parent;
}

}
function build(...$arguments) {
if (count($arguments) == 0) {
$arr = &_c_lib__mapUtils::readIndex($this->raw, "value");
$arrayType = null;
for ($i = 0; $i < count($arr); $i++) {
$rawItem = &_c_lib__arrUtils::readIndex($arr, $i);
$item = new Carbonite_Expression($this->parent->parent, $this->parent->container);
$item->loadFromRaw($rawItem);
$aItem = new Carbonite_Natives_ArrayItem($i, $item);
array_push($this->value, $aItem);
if ($arrayType == null) {
$arrayType = $item->output;}else{
if ($arrayType->checkAsSibling($item->output) == false) {
$this->buildError("Illegal mixed type array, mixing '" . $arrayType->reference->name . "' with '" . $item->output->reference->name . "'");}}}
$this->output = new Carbonite_Type($this->parent->parent->compiler, $this->parent->parent);
$this->output->loadFromName("array", $this->raw);
$tempType = new Carbonite_Type($this->parent->parent->compiler, $this->parent->parent);
$nme = "";
if ($arrayType != null) {
$nme = $arrayType->getClassParent($arrayType->reference)->name;}else{
$nme = "primitive";}
$tempType->loadFromName($nme, $this->raw);
array_push($this->output->templates, $tempType);
}
}

function loadFromRaw(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
$this->type = _c_lib__mapUtils::readIndex($raw, "literalType");
$this->loadLocation($this->parent->parent, $raw);
$this->build();
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$type = _c_lib__mapUtils::readIndex($raw, "literalType");
$rtn = null;
if ($type == "number") {
$isInt = _c_lib__mapUtils::readIndex($raw, "integer");
if ($isInt) {
$rtn = new Carbonite_Natives_Integer($parent);}else{
$rtn = new Carbonite_Natives_Float($parent);}
$rtn->loadFromRaw($raw);}else if ($type == "boolean") {
$rtn = new Carbonite_Natives_Boolean($parent);
$rtn->loadFromRaw($raw);}else if ($type == "string") {
$rtn = new Carbonite_Natives_String($parent);
$rtn->loadFromRaw($raw);}else if ($type == "array") {
$rtn = new Carbonite_Natives_Array($parent);
$rtn->loadFromRaw($raw);}
return $rtn;
}
}

function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Natives_ArrayItem {
public $index;

public $value;

public $startOffset;

public $endOffset;

public $source;

function __construct(...$arguments) {
$this->index = 0;
$this->value = null;
$this->startOffset = 0;
$this->endOffset = 0;
$this->source = null;

if (count($arguments) == 2 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[1]) == 'NULL')) {
$index = $arguments[0];
$value = $arguments[1];
$this->index = $index;
$this->value = $value;
}

}
function loadLocation(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent->source;
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->startOffset = _c_lib__mapUtils::readIndex($raw, "start");
$this->endOffset = _c_lib__mapUtils::readIndex($raw, "end");
$this->source = $parent;
}
}

function buildError(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$msg = $arguments[0];
$this->source->error($this, $msg);
throw new Exception("Build error");
}
}


}class Carbonite_Assembler {
public $compiler;

public $options;

function __construct(...$arguments) {
$this->compiler = null;
$this->options = null;

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Compiler') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$compiler = $arguments[0];
$options = $arguments[1];
$this->compiler = $compiler;
$this->options = $options;
}

}
function build(...$arguments) {
if (count($arguments) == 0) {

}
}


}class Carbonite_Assemblers_Loose {
public $compiler;

public $options;

function __construct(...$arguments) {
$this->compiler = null;
$this->options = null;

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Compiler') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$compiler = $arguments[0];
$options = $arguments[1];
$this->compiler = $compiler;
$this->options = $options;
}

}
function build(...$arguments) {
if (count($arguments) == 0) {
$rtn = "";
for ($i = 0; $i < count($this->compiler->roots); $i++) {
$root = _c_lib__arrUtils::readIndex($this->compiler->roots, $i);
$rtn .= $this->root($root);}
return $rtn;
}
}

function root(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL')) {
$root = $arguments[0];

}
}

function method(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Method' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Operator')) or gettype($arguments[0]) == 'NULL')) {
$method = $arguments[0];

}
}

function property(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Property') or gettype($arguments[0]) == 'NULL')) {
$property = $arguments[0];

}
}

function expression(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL')) {
$expression = $arguments[0];

}
}


}class Carbonite_Assemblers_Javascript {
public $compiler;

public $options;

function __construct(...$arguments) {
$this->compiler = null;
$this->options = null;

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Compiler') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$compiler = $arguments[0];
$options = $arguments[1];
$this->compiler = $compiler;
$this->options = $options;
}

}
function root(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL')) {
$root = $arguments[0];
if ($root->base == "relative") {
return "/" . "/Relative " . $root->name . "\n";}else if ($root->isFromHeader) {
return "";}
$props = [];
$fixedProps = [];
for ($i = 0; $i < count($root->members); $i++) {
$member = _c_lib__arrUtils::readIndex($root->members, $i);
if ($member->type == "property") {
$property = $member;
if ($property->binding != "fixed" and $property->_c__abstract == false) {
array_push($props, "this." . $property->name . " = " . $this->expression($property->_c__default) . ";\n");}else{
array_push($fixedProps, $root->getRoute() . ".prototype." . $property->name . " = " . $this->expression($property->_c__default) . ";\n");}}}
$cnsrs = &$root->getMethods("@construct");
$str = $root->getRoute() . " = function () {" . implode("\n", $props) . "\n" . $this->overload($cnsrs) . "}\n" . implode("\n", $fixedProps) . "\n" . $this->methods($root);
return $str;
}
}

function overload(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$methods = $arguments[0];
$overloads = [];
for ($i = 0; $i < count($methods); $i++) {
$method = _c_lib__arrUtils::readIndex($methods, $i);
if ($method->_c__abstract == false) {
$check = [];
$argInit = [];
for ($a = 0; $a < count($method->arguments); $a++) {
$argument = _c_lib__arrUtils::readIndex($method->arguments, $a);
array_push($check, " && (" . $this->compareType("arguments[" . $a . "]", $argument->type) . " || typeof arguments[" . $a . "] == 'undefined' || arguments[" . $a . "] === null)");
$defName = $argument->name;
if ($argument->name == "arguments") {
$defName = "___arguments";}
array_push($argInit, "var " . $defName . " = arguments[" . $a . "];\n");}
array_push($overloads, "if (arguments.length == " . count($method->arguments) . implode("", $check) . ") {\n" . implode("", $argInit) . $this->methodStr($method) . "\n}\n");}}
return implode("else ", $overloads);
}
}

function methodStr(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Method' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Operator')) or gettype($arguments[0]) == 'NULL')) {
$method = $arguments[0];
$body = "";
if ($method->hasFlag("native")) {
$argumentMaps = [];
for ($i = 0;$i < count($method->arguments);$i++) {
array_push($argumentMaps, "arguments[" . $i . "]");}
$context = "this";
$templates = [];
$ctx = new Carbonite_Context($context, $argumentMaps, $templates);
$body = $method->generate($ctx);}else{
$body = $this->body($method->body);}
return $body;
}
}

function methods(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL')) {
$root = $arguments[0];
$methods = new MethodMap();
for ($i = 0; $i < count($root->members); $i++) {
$member = _c_lib__arrUtils::readIndex($root->members, $i);
if ($member->type != "property") {
if ($member->hasFlag("inline") == false) {
if ($member->name != "@construct") {
if ($member->hasFlag("relative") == false and $member->_c__abstract == false) {
$method = $member;
$overloads = &$methods->find($method->name);
$check = [];
$argInit = [];
for ($a = 0; $a < count($method->arguments); $a++) {
$argument = _c_lib__arrUtils::readIndex($method->arguments, $a);
array_push($check, " && (" . $this->compareType("arguments[" . $a . "]", $argument->type) . " || typeof arguments[" . $a . "] == 'undefined' || arguments[" . $a . "] === null)");
$defName = $argument->name;
if ($argument->name == "arguments") {
$defName = "___arguments";}
array_push($argInit, "var " . $defName . " = arguments[" . $a . "];\n");}
array_push($overloads, "if (arguments.length == " . count($method->arguments) . implode("", $check) . ") {\n" . implode("", $argInit) . $this->methodStr($method) . "\n}\n");}}}}}
$rtn = "";
for ($i = 0; $i < count($methods->methods); $i++) {
$methodOverload = _c_lib__arrUtils::readIndex($methods->methods, $i);
$overloads = &$methodOverload->overloads;
$gap = ".";
$method = $root->getMember($methodOverload->name);
if ($method->binding != "fixed") {
$gap = ".prototype.";}
$rtn .= $root->getRoute() . $gap . $method->getRealName() . " = function () {\n" . implode("else ", $overloads) . "}\n\n";}
return $rtn;
}
}

function compareType(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or gettype($arguments[1]) == 'NULL')) {
$varName = $arguments[0];
$to = $arguments[1];
if ($to->late) {
return "typeof " . $varName . " != 'undefined'";}
return $this->compareClass($varName, $to->reference);
}
}

function compareClass(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[1]) == 'NULL')) {
$varName = $arguments[0];
$to = $arguments[1];
$native = "";
if ($to->route == "int" or $to->route == "uint64" or $to->route == "int64" or $to->route == "uint32" or $to->route == "int32" or $to->route == "uint16" or $to->route == "int16" or $to->route == "uint8" or $to->route == "int8") {
$native = "number";}else if ($to->route == "string") {
$native = "string";}else if ($to->route == "function") {
$native = "function";}else if ($to->route == "bool") {
$native = "boolean";}else if ($to->route == "float") {
$native = "number";}else if ($to->route == "array") {
return $varName . "instanceof Array";}else if ($to->route == "map") {
$native = "object";}
if (strlen($native) == 0) {
$tests = [];
if ($to->route != "primitive") {
array_push($tests, $varName . " instanceof " . $to->getRoute());}
for ($i = 0; $i < count($to->descendants); $i++) {
$child = _c_lib__arrUtils::readIndex($to->descendants, $i);
array_push($tests, $this->compareClass($varName, $child));}
return "(" . implode(" || ", $tests) . ")";}else{
return "typeof " . $varName . " == '" . $native . "'";}
}
}

function body(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[0]) == 'NULL')) {
$body = $arguments[0];
$statements = [];
for ($i = 0; $i < count($body->statements); $i++) {
$statement = _c_lib__arrUtils::readIndex($body->statements, $i);
array_push($statements, $this->statement($statement));}
return implode("\n", $statements);
}
}

function define(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Define') or gettype($arguments[0]) == 'NULL')) {
$define = $arguments[0];
$set = "";
if ($define->initializer != null) {
$set = " = " . $this->expression($define->initializer);}
$defName = $define->name;
if ($defName == "arguments") {
$defName = "___" . $defName;}
return "var " . $defName . $set;
}
}

function statement(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statement' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_If') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_Return') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_Define') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_For') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_ForIn') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_While') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_Continue') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_Break') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_Native') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_Expression')) or gettype($arguments[0]) == 'NULL')) {
$statement = $arguments[0];
if ($statement::$type == "define") {
$def = $statement;
return $this->define($def->define) . ";";}else if ($statement::$type == "expression") {
$exp = $statement;
return $this->expression($exp->expression) . ";";}else if ($statement::$type == "return") {
$exp = $statement;
return "return " . $this->expression($exp->expression) . ";";}else if ($statement::$type == "if") {
$ifState = $statement;
$str = "";
$str = "if (" . $this->expression($ifState->check) . ") {\n" . $this->body($ifState->body) . "}";
for ($i = 0; $i < count($ifState->alternatives); $i++) {
$alt = _c_lib__arrUtils::readIndex($ifState->alternatives, $i);
if ($alt->doCheck) {
$str .= "else if (" . $this->expression($alt->check) . ") {\n" . $this->body($alt->body) . "}";}else{
$str .= "else{\n" . $this->body($alt->body) . "}";}}
return $str;}else if ($statement::$type == "for") {
$forState = $statement;
$str = "";
$str = "for (" . $this->define($forState->define) . ";" . $this->expression($forState->check) . ";" . $this->expression($forState->iterate) . ") {\n" . $this->body($forState->body) . "}";
return $str;}else if ($statement::$type == "forin") {
$forState = $statement;
$str = "";
if ($forState->iterate->output->reference->route == "array") {
$str = "for (" . $this->define($forState->define) . " = 0; " . $forState->define->name . " < " . $this->expression($forState->iterate) . ".length; " . $forState->define->name . "++) {\n" . $this->body($forState->body) . "}";}else{
$str = "for (" . $this->define($forState->define) . " in " . $this->expression($forState->iterate) . ") {\n" . $this->body($forState->body) . "}";}
return $str;}else if ($statement::$type == "while") {
$whileState = $statement;
return "while (" . $this->expression($whileState->check) . ") {\n" . $this->body($whileState->body) . "}";}else if ($statement::$type == "continue") {
return "continue;";}else if ($statement::$type == "break") {
return "break;";}else if ($statement::$type == "native") {
$nativeState = $statement;
if ($nativeState->platform == "javascript") {
return $nativeState->content;}
return "";}
}
}

function method(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Method' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Operator')) or gettype($arguments[0]) == 'NULL')) {
$method = $arguments[0];

}
}

function native(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Native' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Natives_Integer') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Natives_Float') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Natives_Boolean') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Natives_String') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Natives_Array')) or gettype($arguments[0]) == 'NULL')) {
$native = $arguments[0];
if ($native->type == "integer") {
$cast = $native;
$rtn = $cast->value;
return $rtn;}else if ($native->type == "float") {
$cast = $native;
$rtn = $cast->value;
return $rtn;}else if ($native->type == "number") {
$cast = $native;
$rtn = $cast->value;
return "" . $rtn;}else if ($native->type == "string") {
$cast = $native;
return "\"" . str_replace("\n", "\\n", str_replace("\"", "\\\"", str_replace("\\", "\\\\", str_replace("\\ r", "\\ r", $cast->value)))) . "\"";}else if ($native->type == "array") {
$cast = $native;
$expressions = [];
for ($i = 0; $i < count($cast->value); $i++) {
$item = _c_lib__arrUtils::readIndex($cast->value, $i);
array_push($expressions, $this->expression($item->value));}
return "[" . implode(", ", $expressions) . "]";}else if ($native->type == "boolean") {
$cast = $native;
if ($cast->value) {
return "true";}else{
return "false";}}
}
}

function property(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Property') or gettype($arguments[0]) == 'NULL')) {
$property = $arguments[0];

}
}

function term(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Term' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Terms_Literal') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Terms_Expression') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Terms_Sequence') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Terms_Prefix') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Terms_Function')) or gettype($arguments[0]) == 'NULL')) {
$term = $arguments[0];
if ($term->type == "expression") {
$cast = $term;
return $this->expression($cast->expression);}else if ($term->type == "literal") {
$cast = $term;
return $this->native($cast->native);}else if ($term->type == "function") {
$cast = $term;
return $this->func($cast->_c__function);}else if ($term->type == "prefix") {
$cast = $term;
$doNew = "new ";
$cstrs = &$cast->expression->output->reference->getMethods("@construct");
$cnstr = _c_lib__arrUtils::readIndex($cstrs, 0);
if ($cnstr->hasFlag("inline")) {
$doNew = "";}
if ($cast->prefix == "new") {
return $doNew . $this->expression($cast->expression);}}else if ($term->type == "sequence") {
$cast = $term;
return $this->sequence($cast);}
}
}

function sequence(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Terms_Sequence') or gettype($arguments[0]) == 'NULL')) {
$sequence = $arguments[0];
$rtn = "";
for ($i = 0; $i < count($sequence->parts); $i++) {
$part = _c_lib__arrUtils::readIndex($sequence->parts, $i);
if ($part->type == "reference") {
$cast = $part;
if ($cast->isConstant) {
if ($cast->isConstructor) {
if ($cast->constantReference->reference->name == "empty") {
$rtn .= "null";}else{
$rtn .= $cast->constantReference->reference->getRoute();}}else{
$rtn .= $cast->constantReference->reference->getRoute();}}else{
if ($cast->reference->name == "arguments") {
$rtn .= "___" . $cast->reference->name;}else{
$rtn .= $cast->reference->name;}}}else if ($part->type == "dot") {
$cast = $part;
if ($cast->reference != null) {
if ($cast->reference->type == "property") {
$refCast = $cast->reference;
if ($refCast->reference->hasFlag("native")) {
if ($refCast->reference->hasFlag("inline") == false) {
$rtn .= "." . $refCast->reference->name;}}else{
$rtn .= "." . $refCast->reference->name;}}else{
$refMeth = $cast->reference;
if ($refMeth->reference->hasFlag("native") == false) {
$rtn .= "." . $refMeth->reference->getRealName();}else if ($refMeth->reference->hasFlag("property")) {
$isNotCall = true;
$castI = $i;
$ni = intval($castI) . 1;
if ($ni < count($sequence->parts)) {
$next = _c_lib__arrUtils::readIndex($sequence->parts, $ni);
if ($next->type == "call") {
$isNotCall = false;}}
if ($isNotCall) {
$strArr = [];
$rtn = $this->callMethod($refMeth->reference, $strArr, $rtn);}}}}else{
$rtn .= "." . $cast->output->reference->name;}}else if ($part->type == "call") {
$cast = $part;
if ($cast->previous->type == "property") {
}else if ($cast->reference != null) {
$normal = true;
$callOn = $cast->reference->getReference();
$methodName = "";
if ($callOn->hasFlag("inline") == false) {
$methodName = "." . $callOn->name;}
if ($callOn->hasFlag("native")) {
$rtn = $this->callMethod($callOn, $cast->arguments, $rtn . $methodName);}else{
$rtn .= $this->callMethod($callOn, $cast->arguments, "");}}else{
$args = [];
for ($a = 0; $a < count($cast->arguments); $a++) {
array_push($args, $this->expression(_c_lib__arrUtils::readIndex($cast->arguments, $a)));}
$rtn .= "(" . implode(", ", $args) . ")";}}else if ($part->type == "index") {
$cast = $part;
$callOn = $cast->reference->getReference();
$methodName = "";
if ($callOn->hasFlag("inline") == false) {
$attrs = &$callOn->getAttributes("name");
$mp = &_c_lib__arrUtils::readIndex($attrs, 0);
$attr = _c_lib__mapUtils::readIndex($mp, "value");
$methodName = "." . $attr;}
$castArr = [];
array_push($castArr, $cast->argument);
if ($callOn->hasFlag("native")) {
$rtn = $this->callMethod($callOn, $castArr, $rtn . $methodName);}else{
$rtn .= $methodName . $this->callMethod($callOn, $castArr, "");}}}
return $rtn;
}
}

function callMethodWithStrings(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Method' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Operator')) or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'string' or gettype($arguments[2]) == 'NULL')) {
$method = $arguments[0];
$___arguments = $arguments[1];
$context = $arguments[2];
$normal = true;
if ($method->hasFlag("native")) {
if ($method->hasFlag("inline")) {
$normal = false;}}
if ($normal) {
return $context . "(" . implode(", ", $___arguments) . ")";}else{
$templates = [];
$ctx = new Carbonite_Context($context, $___arguments, $templates);
return $method->generate($ctx);}
}
}

function callMethod(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Method' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Operator')) or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'string' or gettype($arguments[2]) == 'NULL')) {
$method = $arguments[0];
$___arguments = $arguments[1];
$context = $arguments[2];
$args = [];
for ($i = 0; $i < count($___arguments); $i++) {
$arg = _c_lib__arrUtils::readIndex($___arguments, $i);
array_push($args, $this->expression($arg));}
return $this->callMethodWithStrings($method, $args, $context);
}
}

function func(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Function') or gettype($arguments[0]) == 'NULL')) {
$func = $arguments[0];
$args = [];
for ($i = 0; $i < count($func->arguments); $i++) {
$arg = _c_lib__arrUtils::readIndex($func->arguments, $i);
array_push($args, $arg->name);}
return "function (" . implode(", ", $args) . ") {" . $this->body($func->body) . "}";
}
}

function expression(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL')) {
$expression = $arguments[0];
$rtn = "";
$first = $this->term($expression->first);
if ($expression->reference != null) {
$args = [];
if ($expression->last != null) {
array_push($args, $this->term($expression->last));}
if ($expression->reference->hasFlag("native")) {
return $this->callMethodWithStrings($expression->reference, $args, $first);}else{
$first .= "." . $expression->reference->getRealName() . $this->callMethodWithStrings($expression->reference, $args, "");}}
$rtn = $first;
if ($expression->grouped) {
return "(" . $rtn . ")";}else{
return $rtn;}
}
}

function build(...$arguments) {
if (count($arguments) == 0) {
$rtn = "";
for ($i = 0; $i < count($this->compiler->roots); $i++) {
$root = _c_lib__arrUtils::readIndex($this->compiler->roots, $i);
$rtn .= $this->root($root);}
return $rtn;
}
}


}class MethodOverload {
public $name;

public $overloads;

function __construct(...$arguments) {
$this->name = "";
$this->overloads = [];

if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
$this->name = $name;
}

}

}class MethodMap {
public $methods;

function __construct(...$arguments) {
$this->methods = [];

if (count($arguments) == 0) {

}

}
function &find(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
for ($i = 0; $i < count($this->methods); $i++) {
if (_c_lib__arrUtils::readIndex($this->methods, $i)->name == $name) {
return _c_lib__arrUtils::readIndex($this->methods, $i)->overloads;}}
$method = new MethodOverload($name);
array_push($this->methods, $method);
return $method->overloads;
}
}


}class Carbonite_Assemblers_Cpp {
public $compiler;

public $options;

function __construct(...$arguments) {
$this->compiler = null;
$this->options = null;

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Compiler') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$compiler = $arguments[0];
$options = $arguments[1];
$this->compiler = $compiler;
$this->options = $options;
}

}
function build(...$arguments) {
if (count($arguments) == 0) {
$rtn = "";
for ($i = 0; $i < count($this->compiler->roots); $i++) {
$root = _c_lib__arrUtils::readIndex($this->compiler->roots, $i);
$rtn .= $this->root($root);}
return $rtn;
}
}

function root(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL')) {
$root = $arguments[0];
if ($root->base == "relative") {
return "/" . "/Relative " . $root->name . "\n";}
$body = "";
if ($root->base == "namespace") {
$children = [];
for ($i = 0; $i < count($root->children); $i++) {
$cls = _c_lib__arrUtils::readIndex($root->children, $i);
if ($cls->base != "relative") {
array_push($children, $cls->base . " " . $cls->name);}}
$body = "{\npublic:\n" . implode("\n", $children) . "\n};";}else{
$body = "{\npublic:\n" . $this->properties($root) . $this->methods($root) . "\n};\n\n";}
$pref = "";
if ($root->parent != null) {
$pref = $root->parent->route . "::";}
return $root->base . " " . $pref . $root->name . $body;
}
}

function properties(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL')) {
$root = $arguments[0];
$rtn = "";
for ($i = 0; $i < count($root->members); $i++) {
$member = _c_lib__arrUtils::readIndex($root->members, $i);
if ($member->type == "property") {
$prop = $member;
$route = $this->route($prop->output);
$prefix = "";
if ($prop->binding == "fixed") {
$prefix = "static ";}
$rtn .= $prefix . $route . " " . $prop->name . " = " . $this->expression($prop->_c__default) . ";\n";}}
return $rtn;
}
}

function route(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or gettype($arguments[0]) == 'NULL')) {
$what = $arguments[0];
if ($what->reference->route == "array") {
return "vector<" . $this->route(_c_lib__arrUtils::readIndex($what->templates, 0)) . ">";}else if ($what->reference->route == "map") {
return "map<std::string, " . $this->route(_c_lib__arrUtils::readIndex($what->templates, 0)) . ">";}else if ($what->reference->route == "string") {
return "std::string";}
return $what->reference->route;
}
}

function methods(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL')) {
$root = $arguments[0];
$methods = [];
for ($i = 0; $i < count($root->members); $i++) {
$member = _c_lib__arrUtils::readIndex($root->members, $i);
if ($member->type != "property") {
if ($member->hasFlag("inline") == false) {
if ($member->name != "@construct") {
if ($member->hasFlag("relative") == false) {
$method = $member;
$args = [];
for ($a = 0; $a < count($method->arguments); $a++) {
$arg = _c_lib__arrUtils::readIndex($method->arguments, $a);
array_push($args, $this->route($arg->type) . " " . $arg->name);}
$prefix = "";
if ($method->binding == "fixed") {
$prefix = "static ";}
array_push($methods, $prefix . $this->route($method->output) . " " . $method->name . "(" . implode(", ", $args) . ") {\n" . $this->body($method->body) . "\n}");}}}}}
return implode("\n\n", $methods);
}
}

function body(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[0]) == 'NULL')) {
$body = $arguments[0];
$statements = [];
for ($i = 0; $i < count($body->statements); $i++) {
$statement = _c_lib__arrUtils::readIndex($body->statements, $i);
array_push($statements, $this->statement($statement));}
return implode("\n", $statements);
}
}

function define(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Define') or gettype($arguments[0]) == 'NULL')) {
$define = $arguments[0];
$set = "";
if ($define->initializer != null) {
$set = " = " . $this->expression($define->initializer);}
return $this->route($define->output) . " " . $define->name . $set;
}
}

function statement(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statement' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_If') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_Return') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_Define') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_For') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_ForIn') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_While') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_Continue') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_Break') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_Native') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_Expression')) or gettype($arguments[0]) == 'NULL')) {
$statement = $arguments[0];
if ($statement::$type == "define") {
$def = $statement;
return $this->define($def->define) . ";";}else if ($statement::$type == "expression") {
$exp = $statement;
return $this->expression($exp->expression) . ";";}else if ($statement::$type == "return") {
$exp = $statement;
return "return " . $this->expression($exp->expression) . ";";}else if ($statement::$type == "if") {
$ifState = $statement;
$str = "";
$str = "if (" . $this->expression($ifState->check) . ") {\n" . $this->body($ifState->body) . "}";
for ($i = 0; $i < count($ifState->alternatives); $i++) {
$alt = _c_lib__arrUtils::readIndex($ifState->alternatives, $i);
if ($alt->doCheck) {
$str .= "else if (" . $this->expression($alt->check) . ") {\n" . $this->body($alt->body) . "}";}else{
$str .= "else{\n" . $this->body($alt->body) . "}";}}
return $str;}else if ($statement::$type == "for") {
$forState = $statement;
$str = "";
$str = "for (" . $this->define($forState->define) . ";" . $this->expression($forState->check) . ";" . $this->expression($forState->iterate) . ") {\n" . $this->body($forState->body) . "}";
return $str;}else if ($statement::$type == "forin") {
$forState = $statement;
$str = "";
if ($forState->iterate->output->reference->route == "array") {
$str = "for (" . $this->define($forState->define) . " = 0; " . $forState->define->name . " < " . $this->expression($forState->iterate) . ".size(); " . $forState->define->name . "++) {\n" . $this->body($forState->body) . "}";}else{
$str = "for (" . $this->define($forState->define) . " in " . $this->expression($forState->iterate) . ") {\n" . $this->body($forState->body) . "}";}
return $str;}else if ($statement::$type == "while") {
$whileState = $statement;
return "while (" . $this->expression($whileState->check) . ") {\n" . $this->body($whileState->body) . "}";}else if ($statement::$type == "continue") {
return "continue;";}else if ($statement::$type == "break") {
return "break;";}
}
}

function native(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Native' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Natives_Integer') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Natives_Float') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Natives_Boolean') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Natives_String') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Natives_Array')) or gettype($arguments[0]) == 'NULL')) {
$native = $arguments[0];
if ($native->type == "integer") {
$cast = $native;
$rtn = $cast->value;
return $rtn;}else if ($native->type == "float") {
$cast = $native;
$rtn = $cast->value;
return $rtn;}else if ($native->type == "number") {
$cast = $native;
$rtn = $cast->value;
return $rtn;}else if ($native->type == "string") {
$cast = $native;
return "\"" . str_replace("\n", "\\n", str_replace("\"", "\\\"", str_replace("\\\\", "\\\\", str_replace("\\ r", "\\ r", $cast->value)))) . "\"";}else if ($native->type == "array") {
$cast = $native;
$expressions = [];
for ($i = 0; $i < count($cast->value); $i++) {
$item = _c_lib__arrUtils::readIndex($cast->value, $i);
array_push($expressions, $this->expression($item->value));}
return "{" . implode(", ", $expressions) . "}";}else if ($native->type == "boolean") {
$cast = $native;
if ($cast->value) {
return "true";}else{
return "false";}}
}
}

function term(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Term' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Terms_Literal') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Terms_Expression') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Terms_Sequence') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Terms_Prefix') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Terms_Function')) or gettype($arguments[0]) == 'NULL')) {
$term = $arguments[0];
if ($term->type == "expression") {
$cast = $term;
return $this->expression($cast->expression);}else if ($term->type == "literal") {
$cast = $term;
return $this->native($cast->native);}else if ($term->type == "function") {
$cast = $term;
return $this->func($cast->_c__function);}else if ($term->type == "prefix") {
$cast = $term;
$doNew = "";
$cstrs = &$cast->expression->output->reference->getMethods("@construct");
$cnstr = _c_lib__arrUtils::readIndex($cstrs, 0);
if ($cnstr->hasFlag("inline")) {
$doNew = "";}
if ($cast->prefix == "new") {
return $doNew . $this->expression($cast->expression);}}else if ($term->type == "sequence") {
$cast = $term;
return $this->sequence($cast);}
}
}

function sequence(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Terms_Sequence') or gettype($arguments[0]) == 'NULL')) {
$sequence = $arguments[0];
$rtn = "";
for ($i = 0; $i < count($sequence->parts); $i++) {
$part = _c_lib__arrUtils::readIndex($sequence->parts, $i);
if ($part->type == "reference") {
$cast = $part;
if ($cast->isConstant) {
if ($cast->isConstructor) {
if ($cast->constantReference->reference->name == "empty") {
$rtn .= "null";}else{
$rtn .= $cast->constantReference->reference->route;}}else{
$rtn .= $cast->constantReference->reference->name;}}else{
$rtn .= $cast->reference->name;}}else if ($part->type == "dot") {
$cast = $part;
if ($cast->reference != null) {
if ($cast->reference->type == "property") {
$refCast = $cast->reference;
$access = ".";
if ($refCast->reference->binding == "fixed") {
$access = "::";}
if ($refCast->reference->hasFlag("native")) {
if ($refCast->reference->hasFlag("inline") == false) {
$rtn .= $access . $refCast->reference->name;}}else{
$rtn .= $access . $refCast->reference->name;}}else{
$refMeth = $cast->reference;
$access = ".";
if ($refMeth->reference->binding == "fixed") {
$access = "::";}
if ($refMeth->reference->hasFlag("native") == false) {
$rtn .= $access . $refMeth->reference->getRealName();}else if ($refMeth->reference->hasFlag("property")) {
$isNotCall = true;
$castI = $i;
$ni = intval($castI) . 1;
if ($ni < count($sequence->parts)) {
$next = _c_lib__arrUtils::readIndex($sequence->parts, $ni);
if ($next->type == "call") {
$isNotCall = false;}}
if ($isNotCall) {
$strArr = [];
$rtn = $this->callMethod($refMeth->reference, $strArr, $sequence->templates, $rtn);}}}}else{
$rtn .= "::" . $cast->output->reference->name;}}else if ($part->type == "call") {
$cast = $part;
if ($cast->previous->type == "property") {
}else if ($cast->reference != null) {
$normal = true;
$callOn = $cast->reference->getReference();
$methodName = "";
if ($callOn->hasFlag("inline") == false) {
$methodName = "." . $callOn->name;}
if ($callOn->hasFlag("native")) {
$rtn = $this->callMethod($callOn, $cast->arguments, $sequence->templates, $rtn . $methodName);}else{
$rtn .= $this->callMethod($callOn, $cast->arguments, $sequence->templates, "");}}else{
$args = [];
for ($a = 0; $a < count($cast->arguments); $a++) {
array_push($args, $this->expression(_c_lib__arrUtils::readIndex($cast->arguments, $a)));}
$rtn .= "(" . implode(", ", $args) . ")";}}else if ($part->type == "index") {
$cast = $part;
$callOn = $cast->reference->getReference();
$methodName = "";
if ($callOn->hasFlag("inline") == false) {
$attrs = &$callOn->getAttributes("name");
$mp = &_c_lib__arrUtils::readIndex($attrs, 0);
$attr = _c_lib__mapUtils::readIndex($mp, "value");
$methodName = "." . $attr;}
$castArr = [];
array_push($castArr, $cast->argument);
if ($callOn->hasFlag("native")) {
$rtn = $this->callMethod($callOn, $castArr, $sequence->templates, $rtn . $methodName);}else{
$rtn .= $methodName . $this->callMethod($callOn, $castArr, $sequence->templates, "");}}}
return $rtn;
}
}

function callMethodWithStrings(...$arguments) {
if (count($arguments) == 4 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Method' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Operator')) or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((gettype($arguments[2]) == 'array' and !isset($arguments[2]['_c__mapC'])) or gettype($arguments[2]) == 'NULL') and (gettype($arguments[3]) == 'string' or gettype($arguments[3]) == 'NULL')) {
$method = $arguments[0];
$___arguments = $arguments[1];
$templates = $arguments[2];
$context = $arguments[3];
$normal = true;
if ($method->hasFlag("native")) {
if ($method->hasFlag("inline")) {
$normal = false;}}
if ($normal) {
return $context . "(" . implode(", ", $___arguments) . ")";}else{
$temps = [];
for ($i = 0; $i < count($templates); $i++) {
$temp = _c_lib__arrUtils::readIndex($templates, $i);
array_push($temps, $this->route($temp));}
$ctx = new Carbonite_Context($context, $___arguments, $temps);
return $method->generate($ctx);}
}
}

function callMethod(...$arguments) {
if (count($arguments) == 4 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Method' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Operator')) or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((gettype($arguments[2]) == 'array' and !isset($arguments[2]['_c__mapC'])) or gettype($arguments[2]) == 'NULL') and (gettype($arguments[3]) == 'string' or gettype($arguments[3]) == 'NULL')) {
$method = $arguments[0];
$___arguments = $arguments[1];
$templates = $arguments[2];
$context = $arguments[3];
$args = [];
for ($i = 0; $i < count($___arguments); $i++) {
$arg = _c_lib__arrUtils::readIndex($___arguments, $i);
array_push($args, $this->expression($arg));}
return $this->callMethodWithStrings($method, $args, $templates, $context);
}
}

function func(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Function') or gettype($arguments[0]) == 'NULL')) {
$func = $arguments[0];
$args = [];
for ($i = 0; $i < count($func->arguments); $i++) {
$arg = _c_lib__arrUtils::readIndex($func->arguments, $i);
array_push($args, $this->route($arg->type) . " " . $arg->name);}
return "[](" . implode(", ", $args) . ") {\n" . $this->body($func->body) . "\n}";
}
}

function expression(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL')) {
$expression = $arguments[0];
$rtn = "";
$first = $this->term($expression->first);
if ($expression->reference != null) {
$args = [];
if ($expression->last != null) {
array_push($args, $this->term($expression->last));}
$temps = [];
if ($expression->reference->hasFlag("native")) {
return $this->callMethodWithStrings($expression->reference, $args, $temps, $first);}else{
$first .= "." . $expression->reference->getRealName() . $this->callMethodWithStrings($expression->reference, $args, $temps, "");}}
$rtn = $first;
if ($expression->grouped) {
return "(" . $rtn . ")";}else{
return $rtn;}
}
}


}class Carbonite_Assemblers_Php {
public $classPrefix;

public $compiler;

public $options;

function __construct(...$arguments) {
$this->classPrefix = "";
$this->compiler = null;
$this->options = null;

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Compiler') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$compiler = $arguments[0];
$options = $arguments[1];
$this->compiler = $compiler;
$this->options = $options;
}

}
function root(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL')) {
$root = $arguments[0];
if ($this->classPrefix == "") {
if (isset($this->compiler->pipeConfig["namespace"])) {
$cast = _c_lib__mapUtils::readIndex($this->compiler->pipeConfig, "namespace");
$this->classPrefix = $cast . "\\";}}
if ($root->base == "relative") {
return "/" . "/Relative " . $root->name . "\n";}else if ($root->isFromHeader) {
return "";}
$propDefs = [];
$props = [];
$fixedProps = [];
for ($i = 0; $i < count($root->members); $i++) {
$member = _c_lib__arrUtils::readIndex($root->members, $i);
if ($member->type == "property") {
$property = $member;
if ($property->binding != "fixed" and $property->_c__abstract == false) {
array_push($props, "public \$" . $this->unReserve($property->name) . ";\n");
array_push($propDefs, "\$this->" . $this->unReserve($property->name) . " = " . $this->expression($property->_c__default) . ";\n");}else{
array_push($fixedProps, "public static \$" . $this->unReserve($property->name) . " = " . $this->expression($property->_c__default) . ";\n");}}}
$cnsrs = &$root->getMethods("@construct");
return "class " . $this->doRoute($root) . " {\n" . implode("\n", $props) . implode("\n", $fixedProps) . "\nfunction __construct(...\$arguments) {\n" . implode("", $propDefs) . "\n" . $this->overload($cnsrs) . "\n}\n" . $this->methods($root) . "\n}";
}
}

function unReserve(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
$reserved = ["__halt_compiler", "abstract", "and", "array", "as", "break", "callable", "case", "catch", "class", "clone", "const", "continue", "declare", "default", "die", "do", "echo", "else", "elseif", "empty", "enddeclare", "endfor", "endforeach", "endif", "endswitch", "endwhile", "eval", "exit", "extends", "final", "for", "foreach", "function", "global", "goto", "if", "implements", "include", "include_once", "instanceof", "insteadof", "interface", "isset", "list", "namespace", "new", "or", "print", "private", "protected", "public", "require", "require_once", "return", "static", "switch", "throw", "trait", "try", "unset", "use", "var", "while", "xor"];
for ($i = 0; $i < count($reserved); $i++) {
if (_c_lib__arrUtils::readIndex($reserved, $i) == strtolower($name)) {
return "_c__" . $name;}}
return $name;
}
}

function overload(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$methods = $arguments[0];
if (count($methods) == 1) {
$meth = _c_lib__arrUtils::readIndex($methods, 0);
if ($meth->hasFlag("raw")) {
$ff = &$meth->getAttributes("rawFront");
$bb = &$meth->getAttributes("rawBack");
$front = $ff[0]["value"];
$back = $bb[0]["value"];
return $front . $this->methodStr($meth) . $back;}}
$overloads = [];
for ($i = 0; $i < count($methods); $i++) {
$method = _c_lib__arrUtils::readIndex($methods, $i);
if ($method->_c__abstract == false) {
$check = [];
$argInit = [];
for ($a = 0; $a < count($method->arguments); $a++) {
$argument = _c_lib__arrUtils::readIndex($method->arguments, $a);
array_push($check, " and (" . $this->compareType("\$arguments[" . $a . "]", $argument->type) . " or gettype(\$arguments[" . $a . "]) == 'NULL')");
$defName = $argument->name;
if ($argument->name == "arguments") {
$defName = "___arguments";}
array_push($argInit, "\$" . $defName . " = \$arguments[" . $a . "];\n");}
array_push($overloads, "if (count(\$arguments) == " . count($method->arguments) . implode("", $check) . ") {\n" . implode("", $argInit) . $this->methodStr($method) . "\n}\n");}}
return implode("else ", $overloads);
}
}

function methodStr(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Method' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Operator')) or gettype($arguments[0]) == 'NULL')) {
$method = $arguments[0];
$body = "";
if ($method->hasFlag("native")) {
$argumentMaps = [];
for ($i = 0;$i < count($method->arguments);$i++) {
array_push($argumentMaps, "\$arguments[" . $i . "]");}
$context = "\$this";
$templates = [];
$ctx = new Carbonite_Context($context, $argumentMaps, $templates);
$body = $method->generate($ctx);}else{
$body = $this->body($method->body);}
return $body;
}
}

function methods(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL')) {
$root = $arguments[0];
$rtn = "";
$methods = new MethodMap();
for ($i = 0; $i < count($root->members); $i++) {
$member = _c_lib__arrUtils::readIndex($root->members, $i);
if ($member->type != "property") {
if ($member->hasFlag("inline") == false) {
if ($member->name != "@construct") {
if ($member->hasFlag("relative") == false and $member->_c__abstract == false) {
$method = $member;
if ($method->hasFlag("raw")) {
$ff = &$method->getAttributes("rawFront");
$bb = &$method->getAttributes("rawBack");
$front = $ff[0]["value"];
$back = $bb[0]["value"];
$rtn .= $front . $this->methodStr($method) . $back;
continue;}
$overloads = &$methods->find($method->name);
$check = [];
$argInit = [];
for ($a = 0; $a < count($method->arguments); $a++) {
$argument = _c_lib__arrUtils::readIndex($method->arguments, $a);
array_push($check, " and (" . $this->compareType("\$arguments[" . $a . "]", $argument->type) . " or gettype(\$arguments[" . $a . "]) == 'NULL')");
$defName = $argument->name;
if ($argument->name == "arguments") {
$defName = "___arguments";}
array_push($argInit, "\$" . $defName . " = \$arguments[" . $a . "];\n");}
array_push($overloads, "if (count(\$arguments) == " . count($method->arguments) . implode("", $check) . ") {\n" . implode("", $argInit) . $this->methodStr($method) . "\n}\n");}}}}}
for ($i = 0; $i < count($methods->methods); $i++) {
$methodOverload = _c_lib__arrUtils::readIndex($methods->methods, $i);
$overloads = &$methodOverload->overloads;
$gap = "function ";
$refer = "";
$method = $root->getMember($methodOverload->name);
if ($method->output->reference->route == "map" or $method->output->reference->route == "array") {
$refer = "&";}
if ($method->binding == "fixed") {
$gap = "static function ";}
$rtn .= $gap . $refer . $this->unReserve($method->getRealName()) . "(...\$arguments) {\n" . implode("else ", $overloads) . "}\n\n";}
return $rtn;
}
}

function compareType(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or gettype($arguments[1]) == 'NULL')) {
$varName = $arguments[0];
$to = $arguments[1];
if ($to->late) {
return "isset(" . $varName . ")";}
return $this->compareClass($varName, $to->reference);
}
}

function doRoute(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL')) {
$cls = $arguments[0];
return str_replace(".", "_", $cls->getRoute());
}
}

function compareClass(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[1]) == 'NULL')) {
$varName = $arguments[0];
$to = $arguments[1];
$native = "";
if ($to->route == "int") {
$native = "integer";}else if ($to->route == "string") {
$native = "string";}else if ($to->route == "function") {
return "is_callable(" . $varName . ")";}else if ($to->route == "bool") {
$native = "boolean";}else if ($to->route == "float") {
$native = "double";}else if ($to->route == "array") {
return "(gettype(" . $varName . ") == 'array' and !isset(" . $varName . "['_c__mapC']))";}else if ($to->route == "map") {
return "(gettype(" . $varName . ") == 'array' and isset(" . $varName . "['_c__mapC']))";}
if (strlen($native) == 0) {
$tests = [];
if ($to->route != "primitive") {
array_push($tests, "get_class(" . $varName . ") == '" . $this->classPrefix . $this->doRoute($to) . "'");}
for ($i = 0; $i < count($to->descendants); $i++) {
$child = _c_lib__arrUtils::readIndex($to->descendants, $i);
array_push($tests, $this->compareClass($varName, $child));}
return "(" . implode(" or ", $tests) . ")";}else{
return "gettype(" . $varName . ") == '" . $native . "'";}
}
}

function body(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[0]) == 'NULL')) {
$body = $arguments[0];
$statements = [];
for ($i = 0; $i < count($body->statements); $i++) {
$statement = _c_lib__arrUtils::readIndex($body->statements, $i);
array_push($statements, $this->statement($statement));}
return implode("\n", $statements);
}
}

function define(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Define') or gettype($arguments[0]) == 'NULL')) {
$define = $arguments[0];
$set = "";
if ($define->initializer != null) {
$refer = "";
if ($define->initializer->output->reference->route == "array" or $define->initializer->output->reference->route == "map") {
if ($define->initializer->first->type != "prefix" and $define->initializer->first->type != "literal") {
$refer = "&";}}
if ($define->initializer->output->reference->route == "primitive") {
if ($define->output->reference->route == "map" or $define->output->reference->route == "array") {
$refer = "&";}}
if ($define->initializer->first->type == "sequence") {
$cast = $define->initializer->first;
if (_c_lib__arrUtils::readIndex($cast->parts, count($cast->parts) - 1)->type == "call") {
$castCall = _c_lib__arrUtils::readIndex($cast->parts, count($cast->parts) - 1);
if ($castCall->reference->reference != null) {
if ($castCall->reference->reference->hasFlag("phpNoRef")) {
$refer = "";}}}}
$set = " = " . $refer . $this->expression($define->initializer);}
$defName = $define->name;
if ($defName == "arguments") {
$defName = "___" . $defName;}
return "\$" . $this->unReserve($defName) . $set;
}
}

function statement(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statement' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_If') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_Return') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_Define') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_For') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_ForIn') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_While') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_Continue') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_Break') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_Native') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_Expression')) or gettype($arguments[0]) == 'NULL')) {
$statement = $arguments[0];
if ($statement::$type == "define") {
$def = $statement;
return $this->define($def->define) . ";";}else if ($statement::$type == "expression") {
$exp = $statement;
return $this->expression($exp->expression) . ";";}else if ($statement::$type == "return") {
$exp = $statement;
return "return " . $this->expression($exp->expression) . ";";}else if ($statement::$type == "if") {
$ifState = $statement;
$str = "";
$str = "if (" . $this->expression($ifState->check) . ") {\n" . $this->body($ifState->body) . "}";
for ($i = 0; $i < count($ifState->alternatives); $i++) {
$alt = _c_lib__arrUtils::readIndex($ifState->alternatives, $i);
if ($alt->doCheck) {
$str .= "else if (" . $this->expression($alt->check) . ") {\n" . $this->body($alt->body) . "}";}else{
$str .= "else{\n" . $this->body($alt->body) . "}";}}
return $str;}else if ($statement::$type == "for") {
$forState = $statement;
$str = "";
$str = "for (" . $this->define($forState->define) . ";" . $this->expression($forState->check) . ";" . $this->expression($forState->iterate) . ") {\n" . $this->body($forState->body) . "}";
return $str;}else if ($statement::$type == "forin") {
$forState = $statement;
$str = "";
if ($forState->iterate->output->reference->route == "array") {
$str = "for (" . $this->define($forState->define) . " = 0; \$" . $forState->define->name . " < count(" . $this->expression($forState->iterate) . "); \$" . $forState->define->name . "++) {\n" . $this->body($forState->body) . "}";}else{
$str = "foreach (" . $this->expression($forState->iterate) . " as " . $this->define($forState->define) . " => \$_c_v__k0) {\n" . $this->body($forState->body) . "}";}
return $str;}else if ($statement::$type == "while") {
$whileState = $statement;
return "while (" . $this->expression($whileState->check) . ") {\n" . $this->body($whileState->body) . "}";}else if ($statement::$type == "continue") {
return "continue;";}else if ($statement::$type == "break") {
return "break;";}else if ($statement::$type == "native") {
$nativeState = $statement;
if ($nativeState->platform == "php") {
return $nativeState->content;}
return "";}
}
}

function method(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Method' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Operator')) or gettype($arguments[0]) == 'NULL')) {
$method = $arguments[0];

}
}

function native(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Native' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Natives_Integer') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Natives_Float') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Natives_Boolean') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Natives_String') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Natives_Array')) or gettype($arguments[0]) == 'NULL')) {
$native = $arguments[0];
if ($native->type == "integer") {
$cast = $native;
$rtn = $cast->value;
return $rtn;}else if ($native->type == "float") {
$cast = $native;
$rtn = $cast->value;
return $rtn;}else if ($native->type == "number") {
$cast = $native;
$rtn = $cast->value;
return "" . $rtn;}else if ($native->type == "string") {
$cast = $native;
return "\"" . str_replace("\\ r", "\\ r", str_replace("\n", "\\n", str_replace("\t", "\\t", str_replace("\$", "\\\$", str_replace("\"", "\\\"", str_replace("\\", "\\\\", $cast->value)))))) . "\"";}else if ($native->type == "array") {
$cast = $native;
$expressions = [];
for ($i = 0; $i < count($cast->value); $i++) {
$item = _c_lib__arrUtils::readIndex($cast->value, $i);
array_push($expressions, $this->expression($item->value));}
return "[" . implode(", ", $expressions) . "]";}else if ($native->type == "boolean") {
$cast = $native;
if ($cast->value) {
return "true";}else{
return "false";}}
}
}

function property(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Property') or gettype($arguments[0]) == 'NULL')) {
$property = $arguments[0];

}
}

function term(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Term' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Terms_Literal') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Terms_Expression') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Terms_Sequence') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Terms_Prefix') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Terms_Function')) or gettype($arguments[0]) == 'NULL')) {
$term = $arguments[0];
if ($term->type == "expression") {
$cast = $term;
return $this->expression($cast->expression);}else if ($term->type == "literal") {
$cast = $term;
return $this->native($cast->native);}else if ($term->type == "function") {
$cast = $term;
return $this->func($cast->_c__function);}else if ($term->type == "prefix") {
$cast = $term;
$doNew = "new ";
$cstrs = &$cast->expression->output->reference->getMethods("@construct");
$cnstr = _c_lib__arrUtils::readIndex($cstrs, 0);
if ($cnstr->hasFlag("inline")) {
$doNew = "";}
if ($cast->prefix == "new") {
return $doNew . $this->expression($cast->expression);}}else if ($term->type == "sequence") {
$cast = $term;
return $this->sequence($cast);}
}
}

function sequence(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Terms_Sequence') or gettype($arguments[0]) == 'NULL')) {
$sequence = $arguments[0];
$rtn = "";
for ($i = 0; $i < count($sequence->parts); $i++) {
$part = _c_lib__arrUtils::readIndex($sequence->parts, $i);
if ($part->type == "reference") {
$cast = $part;
if ($cast->isConstant) {
if ($cast->isConstructor) {
if ($cast->constantReference->reference->name == "empty") {
$rtn .= "null";}else{
$rtn .= $this->doRoute($cast->constantReference->reference);}}else{
$rtn .= $this->doRoute($cast->constantReference->reference);}}else{
if ($cast->reference->name == "arguments") {
$rtn .= "\$___" . $cast->reference->name;}else{
$rtn .= "\$" . $this->unReserve($cast->reference->name);}}}else if ($part->type == "dot") {
$cast = $part;
if ($cast->reference != null) {
if ($cast->reference->type == "property") {
$refCast = $cast->reference;
$binding = "->";
if ($refCast->reference->binding == "fixed") {
$binding = "::\$";}
if ($refCast->reference->hasFlag("native")) {
if ($refCast->reference->hasFlag("inline") == false) {
$rtn .= $binding . $this->unReserve($refCast->reference->name);}}else{
$rtn .= $binding . $this->unReserve($refCast->reference->name);}}else{
$refMeth = $cast->reference;
$binding = "->";
if ($refMeth->reference->binding == "fixed") {
$binding = "::";}
if ($refMeth->reference->hasFlag("native") == false) {
$rtn .= $binding . $this->unReserve($refMeth->reference->getRealName());}else if ($refMeth->reference->hasFlag("property")) {
$isNotCall = true;
$castI = $i;
$ni = intval($castI) . 1;
if ($ni < count($sequence->parts)) {
$next = _c_lib__arrUtils::readIndex($sequence->parts, $ni);
if ($next->type == "call") {
$isNotCall = false;}}
if ($isNotCall) {
$strArr = [];
$rtn = $this->callMethod($refMeth->reference, $strArr, $rtn);}}}}else{
$rtn .= "_" . $cast->output->reference->name;}}else if ($part->type == "call") {
$cast = $part;
if ($cast->previous->type == "property") {
}else if ($cast->reference != null) {
$normal = true;
$callOn = $cast->reference->getReference();
$methodName = "";
if ($callOn->hasFlag("inline") == false) {
$binding = "=>";
if ($callOn->binding == "fixed") {
$binding = "::";}
$methodName = $binding . $callOn->name;}
if ($callOn->hasFlag("native")) {
$rtn = $this->callMethod($callOn, $cast->arguments, $rtn . $methodName);}else{
$rtn .= $this->callMethod($callOn, $cast->arguments, "");}}else{
$args = [];
for ($a = 0; $a < count($cast->arguments); $a++) {
array_push($args, $this->expression(_c_lib__arrUtils::readIndex($cast->arguments, $a)));}
$rtn .= "(" . implode(", ", $args) . ")";}}else if ($part->type == "index") {
$cast = $part;
$callOn = $cast->reference->getReference();
$methodName = "";
if ($callOn->hasFlag("inline") == false) {
$attrs = &$callOn->getAttributes("name");
$mp = &_c_lib__arrUtils::readIndex($attrs, 0);
$attr = _c_lib__mapUtils::readIndex($mp, "value");
$methodName = "->" . $attr;}
$castArr = [];
array_push($castArr, $cast->argument);
if ($callOn->hasFlag("native")) {
$rtn = $this->callMethod($callOn, $castArr, $rtn . $methodName);}else{
$rtn .= $methodName . $this->callMethod($callOn, $castArr, "");}}}
return $rtn;
}
}

function callMethodWithStrings(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Method' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Operator')) or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'string' or gettype($arguments[2]) == 'NULL')) {
$method = $arguments[0];
$___arguments = $arguments[1];
$context = $arguments[2];
$normal = true;
if ($method->hasFlag("native")) {
if ($method->hasFlag("inline")) {
$normal = false;}}
if ($normal) {
return $context . "(" . implode(", ", $___arguments) . ")";}else{
$templates = [];
$ctx = new Carbonite_Context($context, $___arguments, $templates);
return $method->generate($ctx);}
}
}

function callMethod(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Method' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Operator')) or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'string' or gettype($arguments[2]) == 'NULL')) {
$method = $arguments[0];
$___arguments = $arguments[1];
$context = $arguments[2];
$args = [];
for ($i = 0; $i < count($___arguments); $i++) {
$arg = _c_lib__arrUtils::readIndex($___arguments, $i);
array_push($args, $this->expression($arg));}
return $this->callMethodWithStrings($method, $args, $context);
}
}

function func(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Function') or gettype($arguments[0]) == 'NULL')) {
$func = $arguments[0];
$args = [];
for ($i = 0; $i < count($func->arguments); $i++) {
$arg = _c_lib__arrUtils::readIndex($func->arguments, $i);
array_push($args, "\$" . $arg->name);}
return "function (" . implode(", ", $args) . ") {" . $this->body($func->body) . "}";
}
}

function expression(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Expression') or gettype($arguments[0]) == 'NULL')) {
$expression = $arguments[0];
$rtn = "";
$first = $this->term($expression->first);
if ($expression->reference != null) {
$args = [];
if ($expression->last != null) {
array_push($args, $this->term($expression->last));}
if ($expression->reference->hasFlag("native")) {
return $this->callMethodWithStrings($expression->reference, $args, $first);}else{
$first .= "." . $expression->reference->getRealName() . $this->callMethodWithStrings($expression->reference, $args, "");}}
$rtn = $first;
if ($expression->grouped) {
return "(" . $rtn . ")";}else{
return $rtn;}
}
}

function build(...$arguments) {
if (count($arguments) == 0) {
$rtn = "";
for ($i = 0; $i < count($this->compiler->roots); $i++) {
$root = _c_lib__arrUtils::readIndex($this->compiler->roots, $i);
$rtn .= $this->root($root);}
return $rtn;
}
}


}class Carbonite_Platform {
public $compiler;

public $options;

public $root;

public $platform;

function __construct(...$arguments) {
$this->compiler = null;
$this->options = null;
$this->root = "";
$this->platform = "";

if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Compiler') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((gettype($arguments[2]) == 'array' and isset($arguments[2]['_c__mapC'])) or gettype($arguments[2]) == 'NULL')) {
$compiler = $arguments[0];
$root = $arguments[1];
$options = $arguments[2];
$this->compiler = $compiler;
$this->options = $options;
$this->root = $root;
}

}
function build(...$arguments) {
if (count($arguments) == 0) {

}
}

static function make(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Compiler') or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL') and ((gettype($arguments[2]) == 'array' and isset($arguments[2]['_c__mapC'])) or gettype($arguments[2]) == 'NULL')) {
$compiler = $arguments[0];
$platform = $arguments[1];
$options = $arguments[2];
$splits = explode(".", $platform);
if (count($splits) < 2) {
$notice = new Carbonite_Notice("Invalid platform arguments '" . $platform . "'");
$notice->level = 4;
$compiler->status->give($notice);
throw new Exception("Build error");}
$platformName = _c_lib__arrUtils::readIndex($splits, 0);
array_shift($splits);
$rtn = null;
if ($platformName == "javascript") {
$rtn = new Carbonite_Platforms_Javascript($compiler, $splits, $options);
$rtn->platform = $platformName;}else if ($platformName == "php") {
$rtn = new Carbonite_Platforms_Php($compiler, $splits, $options);
$rtn->platform = $platformName;}else if ($platformName == "cpp") {
$rtn = new Carbonite_Platforms_Cpp($compiler, $splits, $options);
$rtn->platform = $platformName;}else if ($platformName == "documentation") {
$rtn = new Carbonite_Platforms_Doc($compiler, $splits, $options);
$rtn->platform = $platformName;}else if ($platformName == "header") {
$rtn = new Carbonite_Platforms_Header($compiler, $splits, $options);
$rtn->platform = $platformName;}else{
$notice = new Carbonite_Notice("Invalid platform '" . $platformName . "'");
$notice->level = 4;
$compiler->status->give($notice);
throw new Exception("Build error");}
return $rtn;
}
}


}class Carbonite_Platforms_Javascript {
public $compiler;

public $options;

public $root;

public $platform;

function __construct(...$arguments) {
$this->compiler = null;
$this->options = null;
$this->root = "";
$this->platform = "";

if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Compiler') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((gettype($arguments[2]) == 'array' and isset($arguments[2]['_c__mapC'])) or gettype($arguments[2]) == 'NULL')) {
$compiler = $arguments[0];
$root = $arguments[1];
$options = $arguments[2];
$this->compiler = $compiler;
$this->options = $options;
$this->root = $root;
}

}
function build(...$arguments) {
if (count($arguments) == 0) {
$outputToFile = true;
for ($i = 0; $i < count($this->root); $i++) {
$r = _c_lib__arrUtils::readIndex($this->root, $i);
if ($r == "memory") {
$outputToFile = false;}}
$assembler = new Carbonite_Assemblers_Javascript($this->compiler, $this->options);
$source = $assembler->build();
if ($outputToFile == false) {
$this->compiler->rawOutput = $source;}
}
}

static function make(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Compiler') or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL') and ((gettype($arguments[2]) == 'array' and isset($arguments[2]['_c__mapC'])) or gettype($arguments[2]) == 'NULL')) {
$compiler = $arguments[0];
$platform = $arguments[1];
$options = $arguments[2];
$splits = explode(".", $platform);
if (count($splits) < 2) {
$notice = new Carbonite_Notice("Invalid platform arguments '" . $platform . "'");
$notice->level = 4;
$compiler->status->give($notice);
throw new Exception("Build error");}
$platformName = _c_lib__arrUtils::readIndex($splits, 0);
array_shift($splits);
$rtn = null;
if ($platformName == "javascript") {
$rtn = new Carbonite_Platforms_Javascript($compiler, $splits, $options);
$rtn->platform = $platformName;}else if ($platformName == "php") {
$rtn = new Carbonite_Platforms_Php($compiler, $splits, $options);
$rtn->platform = $platformName;}else if ($platformName == "cpp") {
$rtn = new Carbonite_Platforms_Cpp($compiler, $splits, $options);
$rtn->platform = $platformName;}else if ($platformName == "documentation") {
$rtn = new Carbonite_Platforms_Doc($compiler, $splits, $options);
$rtn->platform = $platformName;}else if ($platformName == "header") {
$rtn = new Carbonite_Platforms_Header($compiler, $splits, $options);
$rtn->platform = $platformName;}else{
$notice = new Carbonite_Notice("Invalid platform '" . $platformName . "'");
$notice->level = 4;
$compiler->status->give($notice);
throw new Exception("Build error");}
return $rtn;
}
}


}class Carbonite_Platforms_Cpp {
public $compiler;

public $options;

public $root;

public $platform;

function __construct(...$arguments) {
$this->compiler = null;
$this->options = null;
$this->root = "";
$this->platform = "";

if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Compiler') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((gettype($arguments[2]) == 'array' and isset($arguments[2]['_c__mapC'])) or gettype($arguments[2]) == 'NULL')) {
$compiler = $arguments[0];
$root = $arguments[1];
$options = $arguments[2];
$this->compiler = $compiler;
$this->options = $options;
$this->root = $root;
}

}
function build(...$arguments) {
if (count($arguments) == 0) {
$outputToFile = true;
for ($i = 0; $i < count($this->root); $i++) {
$r = _c_lib__arrUtils::readIndex($this->root, $i);
if ($r == "memory") {
$outputToFile = false;}}
$assembler = new Carbonite_Assemblers_Cpp($this->compiler, $this->options);
$source = $assembler->build();
if ($outputToFile == false) {
$this->compiler->rawOutput = $source;}
}
}

static function make(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Compiler') or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL') and ((gettype($arguments[2]) == 'array' and isset($arguments[2]['_c__mapC'])) or gettype($arguments[2]) == 'NULL')) {
$compiler = $arguments[0];
$platform = $arguments[1];
$options = $arguments[2];
$splits = explode(".", $platform);
if (count($splits) < 2) {
$notice = new Carbonite_Notice("Invalid platform arguments '" . $platform . "'");
$notice->level = 4;
$compiler->status->give($notice);
throw new Exception("Build error");}
$platformName = _c_lib__arrUtils::readIndex($splits, 0);
array_shift($splits);
$rtn = null;
if ($platformName == "javascript") {
$rtn = new Carbonite_Platforms_Javascript($compiler, $splits, $options);
$rtn->platform = $platformName;}else if ($platformName == "php") {
$rtn = new Carbonite_Platforms_Php($compiler, $splits, $options);
$rtn->platform = $platformName;}else if ($platformName == "cpp") {
$rtn = new Carbonite_Platforms_Cpp($compiler, $splits, $options);
$rtn->platform = $platformName;}else if ($platformName == "documentation") {
$rtn = new Carbonite_Platforms_Doc($compiler, $splits, $options);
$rtn->platform = $platformName;}else if ($platformName == "header") {
$rtn = new Carbonite_Platforms_Header($compiler, $splits, $options);
$rtn->platform = $platformName;}else{
$notice = new Carbonite_Notice("Invalid platform '" . $platformName . "'");
$notice->level = 4;
$compiler->status->give($notice);
throw new Exception("Build error");}
return $rtn;
}
}


}class Carbonite_Platforms_Php {
public $compiler;

public $options;

public $root;

public $platform;

function __construct(...$arguments) {
$this->compiler = null;
$this->options = null;
$this->root = "";
$this->platform = "";

if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Compiler') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((gettype($arguments[2]) == 'array' and isset($arguments[2]['_c__mapC'])) or gettype($arguments[2]) == 'NULL')) {
$compiler = $arguments[0];
$root = $arguments[1];
$options = $arguments[2];
$this->compiler = $compiler;
$this->options = $options;
$this->root = $root;
}

}
function build(...$arguments) {
if (count($arguments) == 0) {
$outputToFile = true;
for ($i = 0; $i < count($this->root); $i++) {
$r = _c_lib__arrUtils::readIndex($this->root, $i);
if ($r == "memory") {
$outputToFile = false;}}
$php = new Carbonite_Assemblers_Php($this->compiler, $this->options);
$source = $php->build();
if ($outputToFile == false) {
if ($php->classPrefix == "") {
$this->compiler->rawOutput = "<?php\n" . $source . "\n?>";}else{
$this->compiler->rawOutput = "<?php\nnamespace " . $php->classPrefix . " {\n" . $source . "\n}\n?>";}}
}
}

static function make(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Compiler') or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL') and ((gettype($arguments[2]) == 'array' and isset($arguments[2]['_c__mapC'])) or gettype($arguments[2]) == 'NULL')) {
$compiler = $arguments[0];
$platform = $arguments[1];
$options = $arguments[2];
$splits = explode(".", $platform);
if (count($splits) < 2) {
$notice = new Carbonite_Notice("Invalid platform arguments '" . $platform . "'");
$notice->level = 4;
$compiler->status->give($notice);
throw new Exception("Build error");}
$platformName = _c_lib__arrUtils::readIndex($splits, 0);
array_shift($splits);
$rtn = null;
if ($platformName == "javascript") {
$rtn = new Carbonite_Platforms_Javascript($compiler, $splits, $options);
$rtn->platform = $platformName;}else if ($platformName == "php") {
$rtn = new Carbonite_Platforms_Php($compiler, $splits, $options);
$rtn->platform = $platformName;}else if ($platformName == "cpp") {
$rtn = new Carbonite_Platforms_Cpp($compiler, $splits, $options);
$rtn->platform = $platformName;}else if ($platformName == "documentation") {
$rtn = new Carbonite_Platforms_Doc($compiler, $splits, $options);
$rtn->platform = $platformName;}else if ($platformName == "header") {
$rtn = new Carbonite_Platforms_Header($compiler, $splits, $options);
$rtn->platform = $platformName;}else{
$notice = new Carbonite_Notice("Invalid platform '" . $platformName . "'");
$notice->level = 4;
$compiler->status->give($notice);
throw new Exception("Build error");}
return $rtn;
}
}


}class Carbonite_Platforms_Doc {
public $compiler;

public $options;

public $root;

public $platform;

function __construct(...$arguments) {
$this->compiler = null;
$this->options = null;
$this->root = "";
$this->platform = "";

if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Compiler') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((gettype($arguments[2]) == 'array' and isset($arguments[2]['_c__mapC'])) or gettype($arguments[2]) == 'NULL')) {
$compiler = $arguments[0];
$root = $arguments[1];
$options = $arguments[2];
$this->compiler = $compiler;
$this->options = $options;
$this->root = $root;
}

}
function build(...$arguments) {
if (count($arguments) == 0) {
$outputToFile = true;
$mode = "none";
for ($i = 0; $i < count($this->root); $i++) {
$r = _c_lib__arrUtils::readIndex($this->root, $i);
if ($r == "memory") {
$outputToFile = false;}else if ($r == "dynamic") {
$mode = $r;}}
$source = "";
if ($mode == "dynamic") {
$source = $this->buildDynamic();}
if ($outputToFile == false) {
$this->compiler->rawOutput = $source;}
}
}

function buildDynamic(...$arguments) {
if (count($arguments) == 0) {
$articles = [];
for ($i = 0; $i < count($this->compiler->roots); $i++) {
$root = _c_lib__arrUtils::readIndex($this->compiler->roots, $i);
array_push($articles, $root->docDynamic());}
$output = "{\"version\": \"Unkown\", \"articles\": [" . implode(",", $articles) . "]}";
return "<!DOCTYPE html><html><head><script src='core.js'></script><script src='widget.js'></script><link rel='stylesheet' href='theme.css'></link></head><body><script>window.__cDoc = " . $output . "; CarbonDoc.load(__cDoc);</script></body></html>";
}
}

static function make(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Compiler') or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL') and ((gettype($arguments[2]) == 'array' and isset($arguments[2]['_c__mapC'])) or gettype($arguments[2]) == 'NULL')) {
$compiler = $arguments[0];
$platform = $arguments[1];
$options = $arguments[2];
$splits = explode(".", $platform);
if (count($splits) < 2) {
$notice = new Carbonite_Notice("Invalid platform arguments '" . $platform . "'");
$notice->level = 4;
$compiler->status->give($notice);
throw new Exception("Build error");}
$platformName = _c_lib__arrUtils::readIndex($splits, 0);
array_shift($splits);
$rtn = null;
if ($platformName == "javascript") {
$rtn = new Carbonite_Platforms_Javascript($compiler, $splits, $options);
$rtn->platform = $platformName;}else if ($platformName == "php") {
$rtn = new Carbonite_Platforms_Php($compiler, $splits, $options);
$rtn->platform = $platformName;}else if ($platformName == "cpp") {
$rtn = new Carbonite_Platforms_Cpp($compiler, $splits, $options);
$rtn->platform = $platformName;}else if ($platformName == "documentation") {
$rtn = new Carbonite_Platforms_Doc($compiler, $splits, $options);
$rtn->platform = $platformName;}else if ($platformName == "header") {
$rtn = new Carbonite_Platforms_Header($compiler, $splits, $options);
$rtn->platform = $platformName;}else{
$notice = new Carbonite_Notice("Invalid platform '" . $platformName . "'");
$notice->level = 4;
$compiler->status->give($notice);
throw new Exception("Build error");}
return $rtn;
}
}


}class Carbonite_Platforms_Header {
public $exports;

public $outputs;

public $compiler;

public $options;

public $root;

public $platform;

function __construct(...$arguments) {
$this->exports = ['_c__mapC' => true];
$this->outputs = [];
$this->compiler = null;
$this->options = null;
$this->root = "";
$this->platform = "";

if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Compiler') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((gettype($arguments[2]) == 'array' and isset($arguments[2]['_c__mapC'])) or gettype($arguments[2]) == 'NULL')) {
$compiler = $arguments[0];
$root = $arguments[1];
$options = $arguments[2];
$this->compiler = $compiler;
$this->options = $options;
$this->root = $root;
}

}
function add(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
$pipeline = $this->compiler->getPipelineSource();
$cls = $this->compiler->getClass($name);
if ($cls == null) {
$notice = new Carbonite_Notice("Unable to find export class '" . $name . "'");
$notice->level = 4;
$notice->source = $pipeline;
$this->compiler->status->give($notice);}else{
$done = _c_lib__mapUtils::readIndex($this->exports, $name);
if ($done == null) {
array_push($this->outputs, $cls->toHeader());}
$this->exports[$name] = true;
for ($i = 0; $i < count($cls->children); $i++) {
$this->add(_c_lib__arrUtils::readIndex($cls->children, $i)->route);}}
}
}

function build(...$arguments) {
if (count($arguments) == 0) {
$scripts = [];
$exports = _c_lib__mapUtils::readIndex($this->compiler->pipeConfig, "exports");
$roots = explode(",", $exports);
$pipeline = $this->compiler->getPipelineSource();
if ($roots == null) {
$notice = new Carbonite_Notice("No exports header config found in pipeline. Example: exports = \"Class1,Class2,Namespace3\"");
$notice->level = 4;
$notice->source = $pipeline;
$this->compiler->status->give($notice);}else{
for ($i = 0; $i < count($roots); $i++) {
$name = _c_lib__arrUtils::readIndex($roots, $i);
$this->add($name);}
for ($i = 0; $i < count($this->compiler->scripts); $i++) {
array_push($scripts, json_encode(_c_lib__arrUtils::readIndex($this->compiler->scripts, $i)));}
$this->compiler->rawOutput = "{\"roots\": [" . implode(",", $this->outputs) . "], \"scripts\": [" . implode(",", $scripts) . "]}";}
}
}

static function make(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Compiler') or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL') and ((gettype($arguments[2]) == 'array' and isset($arguments[2]['_c__mapC'])) or gettype($arguments[2]) == 'NULL')) {
$compiler = $arguments[0];
$platform = $arguments[1];
$options = $arguments[2];
$splits = explode(".", $platform);
if (count($splits) < 2) {
$notice = new Carbonite_Notice("Invalid platform arguments '" . $platform . "'");
$notice->level = 4;
$compiler->status->give($notice);
throw new Exception("Build error");}
$platformName = _c_lib__arrUtils::readIndex($splits, 0);
array_shift($splits);
$rtn = null;
if ($platformName == "javascript") {
$rtn = new Carbonite_Platforms_Javascript($compiler, $splits, $options);
$rtn->platform = $platformName;}else if ($platformName == "php") {
$rtn = new Carbonite_Platforms_Php($compiler, $splits, $options);
$rtn->platform = $platformName;}else if ($platformName == "cpp") {
$rtn = new Carbonite_Platforms_Cpp($compiler, $splits, $options);
$rtn->platform = $platformName;}else if ($platformName == "documentation") {
$rtn = new Carbonite_Platforms_Doc($compiler, $splits, $options);
$rtn->platform = $platformName;}else if ($platformName == "header") {
$rtn = new Carbonite_Platforms_Header($compiler, $splits, $options);
$rtn->platform = $platformName;}else{
$notice = new Carbonite_Notice("Invalid platform '" . $platformName . "'");
$notice->level = 4;
$compiler->status->give($notice);
throw new Exception("Build error");}
return $rtn;
}
}


}class CarboniteCarbonParserLocation {
public $offset;

public $line;

public $column;

function __construct(...$arguments) {
$this->offset = 0;
$this->line = 1;
$this->column = 0;

if (count($arguments) == 3 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'integer' or gettype($arguments[2]) == 'NULL')) {
$offset = $arguments[0];
$line = $arguments[1];
$column = $arguments[2];
$this->offset = $offset;
$this->line = $line;
$this->column = $column;
}

}

}class CarboniteCarbonParserError {
public $code;

public $found;

public $expected;

public $vested;

public $path;

public $offset;

public $line;

public $column;

function __construct(...$arguments) {
$this->code = 0;
$this->found = 0;
$this->expected = 0;
$this->vested = 0;
$this->path = [];
$this->offset = 0;
$this->line = 1;
$this->column = 0;

if (count($arguments) == 3 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'integer' or gettype($arguments[2]) == 'NULL')) {
$offset = $arguments[0];
$line = $arguments[1];
$column = $arguments[2];
$this->offset = $offset;
$this->line = $line;
$this->column = $column;
}

}
function _c__clone(...$arguments) {
if (count($arguments) == 0) {
$_c__clone = new CarboniteCarbonParserError($this->offset, $this->line, $this->column);
$_c__clone->code = $this->code;
$_c__clone->found = $this->found;
$_c__clone->expected = $this->expected;
$_c__clone->vested = $this->vested;
for ($i = 0; $i < count($this->path); $i++) {
$current = _c_lib__arrUtils::readIndex($this->path, $i);
array_push($_c__clone->path, $current->_c__clone());}
return $_c__clone;
}
}


}class CarboniteCarbonParserOutput {
public $error;

public $hadError;

public $data;

function __construct(...$arguments) {
$this->error = null;
$this->hadError = false;
$this->data = ['_c__mapC' => true];

if (count($arguments) == 3 and (gettype($arguments[0]) == 'boolean' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\CarboniteCarbonParserError') or gettype($arguments[1]) == 'NULL') and ((gettype($arguments[2]) == 'array' and isset($arguments[2]['_c__mapC'])) or gettype($arguments[2]) == 'NULL')) {
$hadError = $arguments[0];
$error = $arguments[1];
$data = $arguments[2];
$this->hadError = $hadError;
$this->error = $error;
$this->data = $data;
}

}

}class CarboniteCarbonParser {
public $lastErrors;

public $hadError;

public $parsedChars;

public $currentInput;

public $data;

public $error;

public $offset;

public $line;

public $column;

function __construct(...$arguments) {
$this->lastErrors = [];
$this->hadError = false;
$this->parsedChars = 0;
$this->currentInput = "";
$this->data = ['_c__mapC' => true];
$this->error = new CarboniteCarbonParserError(0, 0, 0);
$this->offset = 0;
$this->line = 1;
$this->column = 0;

if (count($arguments) == 0) {

}

}
static function parse(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$input = $arguments[0];
$parser = new CarboniteCarbonParser();
$output = &$parser->start($input);
if ($parser->hadError and $parser->error->found == chr(1)) {
$parser->error->found = "End of input";}
$rtn = new CarboniteCarbonParserOutput($parser->hadError, $parser->error, _c_lib__mapUtils::readIndex($parser->data, "data"));
return $rtn;
}
else if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL')) {
$rule = $arguments[0];
$input = $arguments[1];
$parser = new CarboniteCarbonParser();
$input .= chr(1);
$parser->currentInput = $input;
$parser->data["data"] = ['_c__mapC' => true];
$output = null;
if ($rule == "Document") {
$output = $parser->Document($input, 0);}else{
if ($rule == "Safe_Name") {
$output = $parser->Safe_Name($input, 0);}else{
if ($rule == "Template") {
$output = $parser->Template($input, 0);}else{
if ($rule == "Template_Def") {
$output = $parser->Template_Def($input, 0);}else{
if ($rule == "Template_Default") {
$output = $parser->Template_Default($input, 0);}else{
if ($rule == "Template_Type") {
$output = $parser->Template_Type($input, 0);}else{
if ($rule == "Inherit") {
$output = $parser->Inherit($input, 0);}else{
if ($rule == "Root") {
$output = $parser->Root($input, 0);}else{
if ($rule == "Implements") {
$output = $parser->_c__Implements($input, 0);}else{
if ($rule == "Type") {
$output = $parser->Type($input, 0);}else{
if ($rule == "Flag") {
$output = $parser->Flag($input, 0);}else{
if ($rule == "Optional") {
$output = $parser->Optional($input, 0);}else{
if ($rule == "Parameter") {
$output = $parser->Parameter($input, 0);}else{
if ($rule == "Method") {
$output = $parser->Method($input, 0);}else{
if ($rule == "Property") {
$output = $parser->Property($input, 0);}else{
if ($rule == "Attribute_Value") {
$output = $parser->Attribute_Value($input, 0);}else{
if ($rule == "Attribute_Pair") {
$output = $parser->Attribute_Pair($input, 0);}else{
if ($rule == "Attribute") {
$output = $parser->Attribute($input, 0);}else{
if ($rule == "Interface") {
$output = $parser->_c__Interface($input, 0);}else{
if ($rule == "Member_Value") {
$output = $parser->Member_Value($input, 0);}else{
if ($rule == "Member_Flagged") {
$output = $parser->Member_Flagged($input, 0);}else{
if ($rule == "Member") {
$output = $parser->Member($input, 0);}else{
if ($rule == "Any_Member") {
$output = $parser->Any_Member($input, 0);}else{
if ($rule == "Group") {
$output = $parser->Group($input, 0);}else{
if ($rule == "Constant") {
$output = $parser->Constant($input, 0);}else{
if ($rule == "Literal_Number") {
$output = $parser->Literal_Number($input, 0);}else{
if ($rule == "Literal_Boolean") {
$output = $parser->Literal_Boolean($input, 0);}else{
if ($rule == "Literal_String") {
$output = $parser->Literal_String($input, 0);}else{
if ($rule == "Literal_Array") {
$output = $parser->Literal_Array($input, 0);}else{
if ($rule == "Literal_Map_Key") {
$output = $parser->Literal_Map_Key($input, 0);}else{
if ($rule == "Literal_Map") {
$output = $parser->Literal_Map($input, 0);}else{
if ($rule == "Literal") {
$output = $parser->Literal($input, 0);}else{
if ($rule == "Prefix") {
$output = $parser->Prefix($input, 0);}else{
if ($rule == "Appendix_Dot") {
$output = $parser->Appendix_Dot($input, 0);}else{
if ($rule == "Appendix_Call") {
$output = $parser->Appendix_Call($input, 0);}else{
if ($rule == "Appendix_Index") {
$output = $parser->Appendix_Index($input, 0);}else{
if ($rule == "Appendix_Code") {
$output = $parser->Appendix_Code($input, 0);}else{
if ($rule == "Appendix") {
$output = $parser->Appendix($input, 0);}else{
if ($rule == "Term") {
$output = $parser->Term($input, 0);}else{
if ($rule == "Operand_Symbolic") {
$output = $parser->Operand_Symbolic($input, 0);}else{
if ($rule == "Operand_Word") {
$output = $parser->Operand_Word($input, 0);}else{
if ($rule == "Operation") {
$output = $parser->Operation($input, 0);}else{
if ($rule == "Anonymous_Function") {
$output = $parser->Anonymous_Function($input, 0);}else{
if ($rule == "Expression") {
$output = $parser->Expression($input, 0);}else{
if ($rule == "Expression_Line") {
$output = $parser->Expression_Line($input, 0);}else{
if ($rule == "Expression_Operation") {
$output = $parser->Expression_Operation($input, 0);}else{
if ($rule == "Expression_Operated") {
$output = $parser->Expression_Operated($input, 0);}else{
if ($rule == "Block") {
$output = $parser->Block($input, 0);}else{
if ($rule == "Statement") {
$output = $parser->Statement($input, 0);}else{
if ($rule == "Single_Statement") {
$output = $parser->Single_Statement($input, 0);}else{
if ($rule == "If") {
$output = $parser->_c__If($input, 0);}else{
if ($rule == "ElseIf") {
$output = $parser->_c__ElseIf($input, 0);}else{
if ($rule == "Else") {
$output = $parser->_c__Else($input, 0);}else{
if ($rule == "For") {
$output = $parser->_c__For($input, 0);}else{
if ($rule == "For_In") {
$output = $parser->For_In($input, 0);}else{
if ($rule == "Break") {
$output = $parser->_c__Break($input, 0);}else{
if ($rule == "Continue") {
$output = $parser->_c__Continue($input, 0);}else{
if ($rule == "While") {
$output = $parser->_c__While($input, 0);}else{
if ($rule == "Try") {
$output = $parser->_c__Try($input, 0);}else{
if ($rule == "Catch") {
$output = $parser->_c__Catch($input, 0);}else{
if ($rule == "Throw") {
$output = $parser->_c__Throw($input, 0);}else{
if ($rule == "Return") {
$output = $parser->_c__Return($input, 0);}else{
if ($rule == "Native") {
$output = $parser->Native($input, 0);}else{
if ($rule == "Define_Auto") {
$output = $parser->Define_Auto($input, 0);}else{
if ($rule == "Define") {
$output = $parser->Define($input, 0);}else{
if ($rule == "Inline_Def") {
$output = $parser->Inline_Def($input, 0);}else{
if ($rule == "Inline_Define") {
$output = $parser->Inline_Define($input, 0);}else{
if ($rule == "Inline_Define_Auto") {
$output = $parser->Inline_Define_Auto($input, 0);}else{
if ($rule == "String_Tick") {
$output = $parser->String_Tick($input, 0);}else{
if ($rule == "_") {
$output = $parser->_($input, 0);}else{
if ($rule == "__") {
$output = $parser->__($input, 0);}else{
if ($rule == "String") {
$output = $parser->String($input, 0);}else{
if ($rule == "String_Double") {
$output = $parser->String_Double($input, 0);}else{
if ($rule == "String_Single") {
$output = $parser->String_Single($input, 0);}else{
if ($rule == "Json") {
$output = $parser->Json($input, 0);}else{
if ($rule == "Json_Array") {
$output = $parser->Json_Array($input, 0);}else{
if ($rule == "Json_EmptyArray") {
$output = $parser->Json_EmptyArray($input, 0);}else{
if ($rule == "Json_EmptyMap") {
$output = $parser->Json_EmptyMap($input, 0);}else{
if ($rule == "Json_Value") {
$output = $parser->Json_Value($input, 0);}else{
if ($rule == "Json_Number") {
$output = $parser->Json_Number($input, 0);}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
if ($parser->hadError and $parser->error->found == chr(1)) {
$parser->error->found = "End of input";}
for ($i = 0;$i < $parser->error->offset;$i++) {
$parser->error->column++;
if ($parser->currentInput[$i] == "\n") {
$parser->error->line++;
$parser->error->column = 0;}}
$rtn = new CarboniteCarbonParserOutput($output->hadError, $output->error, $output->data);
return $rtn;
}
}

function assembleCodes(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$codes = $arguments[0];
$rtn = "";
for ($i = 0; $i < count($codes); $i++) {
$rtn .= chr(_c_lib__arrUtils::readIndex($codes, $i));}
return $rtn;
}
}

function giveError(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'string' or gettype($arguments[2]) == 'NULL')) {
$code = $arguments[0];
$expected = $arguments[1];
$found = $arguments[2];
$this->hadError = true;
$this->error->code = $code;
$this->error->expected = $expected;
$this->error->found = $found;
$this->error->offset = $this->offset;
$this->error->line = 1;
$this->error->column = 0;
}
}

function &start(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$input = $arguments[0];
$this->currentInput = $input;
$input .= chr(1);
$this->data["data"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($this->data, "data");
$c = 0;
$literalChar = 0;
for ($charPos = 0;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($c == 0 - 1) {
if ($currentChar != chr(1)) {
$this->giveError(2, "EOF", $currentChar);}}
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->Document($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "Document(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = &_c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["document"] = $ruleOutCast0;
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($this->hadError) {
break;}}
for ($i = 0;$i < $this->error->offset;$i++) {
$this->error->column++;
if ($this->currentInput[$i] == "\n") {
$this->error->line++;
$this->error->column = 0;}}
if (false and $this->hadError == false) {
if ($this->offset < strlen($input) - 1) {
$this->giveError(2, "EOF", $input[$this->offset + 1]);}}
}
}

function Document(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["roots"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->Root($input, $charPos);
if ($ruleOut0->hadError) {
$c = 1;
$charPos--;
$this->offset--;}else{
$ruleOutCast0 = &_c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$castroots0 = &_c_lib__mapUtils::readIndex($data, "roots");
array_push($castroots0, $ruleOutCast0);
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 0;
$this->error->vested++;}}else if ($c == 1) {
$ruleOut1 = $this->_c__Implements($input, $charPos);
if ($ruleOut1->hadError) {
$c = 2;
$charPos--;
$this->offset--;}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$castroots0 = &_c_lib__mapUtils::readIndex($data, "roots");
array_push($castroots0, $ruleOutCast1);
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 0;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->_($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "White space(optional)(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
if (true) {
$castac0 = &$data;
$actionCap0roots = &_c_lib__mapUtils::readIndex($data, "roots");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "document";
_c_lib__mapUtils::readIndex($dataStore, "data")["roots"] = $actionCap0roots;}
$c = 0 - 1;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Safe_Name(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["after"] = "";
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$passed0 = false;
if ($currentCode == 95) {
$passed0 = true;}else if ($currentCode == 64) {
$passed0 = true;}
if ($passed0 == false) {
if ($currentCode >= 97 and $currentCode <= 122) {
$passed0 = true;}else if ($currentCode >= 65 and $currentCode <= 90) {
$passed0 = true;}}
if ($passed0) {
$data["start"] = $currentChar;
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "a-z, A-Z, _, @", $currentChar);}}else if ($c == 1) {
$passed1 = false;
if ($currentCode == 95) {
$passed1 = true;}else if ($currentCode == 46) {
$passed1 = true;}
if ($passed1 == false) {
if ($currentCode >= 97 and $currentCode <= 122) {
$passed1 = true;}else if ($currentCode >= 65 and $currentCode <= 90) {
$passed1 = true;}else if ($currentCode >= 48 and $currentCode <= 57) {
$passed1 = true;}}
if ($passed1) {
$data["after"] .= $currentChar;
if (true) {
$castacafter0 = &$data["after"];
$actionCap0start = $data["start"];
$actionCap0after = $data["after"];
$dataStore["data"] =  $actionCap0start . $actionCap0after;}
$c = 1;
$this->error->vested++;}else{
if (true) {
$castacafter0 = &$data["after"];
$actionCap0start = $data["start"];
$actionCap0after = $data["after"];
$dataStore["data"] =  $actionCap0start . $actionCap0after;}
$c = 0 - 1;
$charPos--;
$this->offset--;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Template(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["types"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 60) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "<", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->Type($input, $charPos);
if ($ruleOut1->hadError) {
$casttypes1 = &_c_lib__mapUtils::readIndex($data, "types");
if (count($casttypes1) >= 1) {
$c = 2;
$charPos--;
$this->offset--;}else{
$this->giveError(1, "Type", $currentChar);}}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$casttypes1 = &_c_lib__mapUtils::readIndex($data, "types");
array_push($casttypes1, $ruleOutCast1);
if (ord($input[$charPos + 1]) != 44) {
$c = 2;
continue;}else{
$charPos++;}
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 1;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->_($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "White space(optional)(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$c = 3;}}else if ($c == 3) {
if ($currentCode == 62) {
if (true) {
$castac0 = &$data;
$actionCap0types = &_c_lib__mapUtils::readIndex($data, "types");
_c_lib__mapUtils::readIndex($dataStore, "data")["types"] = $actionCap0types;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, ">", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Template_Def(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
$ruleOut1 = $this->Safe_Name($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "Safe_Name(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["type"] = $ruleOutCast1;
$c = 2;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->__($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "White space(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$c = 3;}}else if ($c == 3) {
$ruleOut3 = $this->Safe_Name($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "Safe_Name(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$data["name"] = $ruleOutCast3;
$c = 4;
$this->error->vested++;}}else if ($c == 4) {
$ruleOut4 = $this->_($input, $charPos);
if ($ruleOut4->hadError) {
$this->giveError($ruleOut4->error->code, "White space(optional)(" . $ruleOut4->error->expected . ")", $ruleOut4->error->found);}else{
$ruleOutCast4 = _c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
if (true) {
$castac0 = &$data;
$actionCap0name = _c_lib__mapUtils::readIndex($data, "name");
$actionCap0type = _c_lib__mapUtils::readIndex($data, "type");
_c_lib__mapUtils::readIndex($dataStore, "data")["name"] = $actionCap0name;
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = $actionCap0type;}
$c = 0 - 1;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Template_Default(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
$ruleOut1 = $this->Safe_Name($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "Safe_Name(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["type"] = $ruleOutCast1;
$c = 2;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->__($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "White space(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$c = 3;}}else if ($c == 3) {
$ruleOut3 = $this->Safe_Name($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "Safe_Name(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$data["name"] = $ruleOutCast3;
$c = 4;
$this->error->vested++;}}else if ($c == 4) {
$ruleOut4 = $this->_($input, $charPos);
if ($ruleOut4->hadError) {
$this->giveError($ruleOut4->error->code, "White space(optional)(" . $ruleOut4->error->expected . ")", $ruleOut4->error->found);}else{
$ruleOutCast4 = _c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$c = 5;}}else if ($c == 5) {
if ($currentCode == 61) {
$c = 6;
$this->error->vested++;}else{
$this->giveError(1, "=", $currentChar);}}else if ($c == 6) {
$ruleOut6 = $this->_($input, $charPos);
if ($ruleOut6->hadError) {
$this->giveError($ruleOut6->error->code, "White space(optional)(" . $ruleOut6->error->expected . ")", $ruleOut6->error->found);}else{
$ruleOutCast6 = _c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$c = 7;}}else if ($c == 7) {
$ruleOut7 = $this->Type($input, $charPos);
if ($ruleOut7->hadError) {
$this->giveError($ruleOut7->error->code, "Type(" . $ruleOut7->error->expected . ")", $ruleOut7->error->found);}else{
$ruleOutCast7 = &_c_lib__mapUtils::readIndex($ruleOut7->data, "data");
$charPos = $this->offset;
$data["default"] = $ruleOutCast7;
$c = 8;
$this->error->vested++;}}else if ($c == 8) {
$ruleOut8 = $this->_($input, $charPos);
if ($ruleOut8->hadError) {
$this->giveError($ruleOut8->error->code, "White space(optional)(" . $ruleOut8->error->expected . ")", $ruleOut8->error->found);}else{
$ruleOutCast8 = _c_lib__mapUtils::readIndex($ruleOut8->data, "data");
$charPos = $this->offset;
if (true) {
$castac0 = &$data;
$actionCap0name = _c_lib__mapUtils::readIndex($data, "name");
$actionCap0type = _c_lib__mapUtils::readIndex($data, "type");
$actionCap0default = &_c_lib__mapUtils::readIndex($data, "default");
_c_lib__mapUtils::readIndex($dataStore, "data")["name"] = $actionCap0name;
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = $actionCap0type;
_c_lib__mapUtils::readIndex($dataStore, "data")["default"] = $actionCap0default;}
$c = 0 - 1;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Template_Type(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["templates"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 60) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "<", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->Template_Default($input, $charPos);
if ($ruleOut1->hadError) {
$c = 2;
$charPos--;
$this->offset--;}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$casttemplates1 = &_c_lib__mapUtils::readIndex($data, "templates");
array_push($casttemplates1, $ruleOutCast1);
if (ord($input[$charPos + 1]) != 44) {
$c = 3;
continue;}else{
$charPos++;}
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 1;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->Template_Def($input, $charPos);
if ($ruleOut2->hadError) {
$c = 3;
$charPos--;
$this->offset--;}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$casttemplates1 = &_c_lib__mapUtils::readIndex($data, "templates");
array_push($casttemplates1, $ruleOutCast2);
if (ord($input[$charPos + 1]) != 44) {
$c = 3;
continue;}else{
$charPos++;}
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 1;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
if ($currentCode == 62) {
if (true) {
$castac0 = &$data;
$actionCap0templates = &_c_lib__mapUtils::readIndex($data, "templates");
_c_lib__mapUtils::readIndex($dataStore, "data")["templates"] = $actionCap0templates;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, ">", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Inherit(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["types"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [105, 110, 104, 101, 114, 105, 116, 115];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 8) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->__($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Type($input, $charPos);
if ($ruleOut2->hadError) {
$casttypes2 = &_c_lib__mapUtils::readIndex($data, "types");
if (count($casttypes2) >= 1) {
if (true) {
$castactypes0 = &_c_lib__mapUtils::readIndex($data, "types");
$actionCap0types = &_c_lib__mapUtils::readIndex($data, "types");
_c_lib__mapUtils::readIndex($dataStore, "data")["types"] = $actionCap0types;}
$c = 0 - 1;
$charPos--;
$this->offset--;}else{
$this->giveError(1, "Type", $currentChar);}}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$casttypes2 = &_c_lib__mapUtils::readIndex($data, "types");
array_push($casttypes2, $ruleOutCast2);
if (ord($input[$charPos + 1]) != 44) {
if (true) {
$castactypes0 = &_c_lib__mapUtils::readIndex($data, "types");
$actionCap0types = &_c_lib__mapUtils::readIndex($data, "types");
_c_lib__mapUtils::readIndex($dataStore, "data")["types"] = $actionCap0types;}
$c = 0 - 1;
continue;}else{
$charPos++;}
if (true) {
$castactypes0 = &_c_lib__mapUtils::readIndex($data, "types");
$actionCap0types = &_c_lib__mapUtils::readIndex($data, "types");
_c_lib__mapUtils::readIndex($dataStore, "data")["types"] = $actionCap0types;}
$c = 2;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Root(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["doc"] = [];
$data["flags"] = [];
$data["templates"] = [];
$data["members"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
$ruleOut1 = $this->String_Tick($input, $charPos);
if ($ruleOut1->hadError) {
$c = 2;
$charPos--;
$this->offset--;
if ($ruleOut1->error->vested > 1) {
$this->giveError($ruleOut1->error->code, $ruleOut1->error->expected, $ruleOut1->error->found);}}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$castdoc1 = &_c_lib__mapUtils::readIndex($data, "doc");
array_push($castdoc1, $ruleOutCast1);
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 1;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->_($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "White space(optional)(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$c = 3;}}else if ($c == 3) {
$ruleOut3 = $this->Attribute($input, $charPos);
if ($ruleOut3->hadError) {
$c = 4;
$charPos--;
$this->offset--;}else{
$ruleOutCast3 = &_c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$data["attr"] = $ruleOutCast3;
$c = 4;
$this->error->vested++;}}else if ($c == 4) {
$ruleOut4 = $this->_($input, $charPos);
if ($ruleOut4->hadError) {
$this->giveError($ruleOut4->error->code, "White space(optional)(" . $ruleOut4->error->expected . ")", $ruleOut4->error->found);}else{
$ruleOutCast4 = _c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$c = 5;}}else if ($c == 5) {
$ruleOut5 = $this->Flag($input, $charPos);
if ($ruleOut5->hadError) {
$c = 6;
$charPos--;
$this->offset--;
if ($ruleOut5->error->vested > 1) {
$this->giveError($ruleOut5->error->code, $ruleOut5->error->expected, $ruleOut5->error->found);}}else{
$ruleOutCast5 = _c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$castflags5 = &_c_lib__mapUtils::readIndex($data, "flags");
array_push($castflags5, $ruleOutCast5);
if (ord($input[$charPos + 1]) != 44) {
$c = 6;
continue;}else{
$charPos++;}
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 5;
$this->error->vested++;}}else if ($c == 6) {
$ruleOut6 = $this->_($input, $charPos);
if ($ruleOut6->hadError) {
$this->giveError($ruleOut6->error->code, "White space(optional)(" . $ruleOut6->error->expected . ")", $ruleOut6->error->found);}else{
$ruleOutCast6 = _c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$c = 7;}}else if ($c == 7) {
$lit7 = [105, 110, 116, 101, 114, 102, 97, 99, 101];
if ($currentCode == _c_lib__arrUtils::readIndex($lit7, $literalChar)) {
$literalChar++;
if ($literalChar == 9) {
$data["type"] = $this->assembleCodes($lit7);
$c = 12;
$literalChar = 0;}
$this->error->vested++;}else{
$c = 8;
$charPos--;
$this->offset--;}}else if ($c == 8) {
$lit8 = [114, 101, 108, 97, 116, 105, 118, 101];
if ($currentCode == _c_lib__arrUtils::readIndex($lit8, $literalChar)) {
$literalChar++;
if ($literalChar == 8) {
$data["type"] = $this->assembleCodes($lit8);
$c = 12;
$literalChar = 0;}
$this->error->vested++;}else{
$c = 9;
$charPos--;
$this->offset--;}}else if ($c == 9) {
$lit9 = [99, 108, 97, 115, 115];
if ($currentCode == _c_lib__arrUtils::readIndex($lit9, $literalChar)) {
$literalChar++;
if ($literalChar == 5) {
$data["type"] = $this->assembleCodes($lit9);
$c = 12;
$literalChar = 0;}
$this->error->vested++;}else{
$c = 10;
$charPos--;
$this->offset--;}}else if ($c == 10) {
$lit10 = [101, 120, 116, 101, 110, 100];
if ($currentCode == _c_lib__arrUtils::readIndex($lit10, $literalChar)) {
$literalChar++;
if ($literalChar == 6) {
$data["type"] = $this->assembleCodes($lit10);
$c = 12;
$literalChar = 0;}
$this->error->vested++;}else{
$c = 11;
$charPos--;
$this->offset--;}}else if ($c == 11) {
$lit11 = [110, 97, 109, 101, 115, 112, 97, 99, 101];
if ($currentCode == _c_lib__arrUtils::readIndex($lit11, $literalChar)) {
$literalChar++;
if ($literalChar == 9) {
$data["type"] = $this->assembleCodes($lit11);
$c = 12;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "interface, relative, class, extend, namespace", $currentChar);}}else if ($c == 12) {
$ruleOut12 = $this->__($input, $charPos);
if ($ruleOut12->hadError) {
$this->giveError($ruleOut12->error->code, "White space(" . $ruleOut12->error->expected . ")", $ruleOut12->error->found);}else{
$ruleOutCast12 = _c_lib__mapUtils::readIndex($ruleOut12->data, "data");
$charPos = $this->offset;
$c = 13;}}else if ($c == 13) {
$ruleOut13 = $this->Template_Type($input, $charPos);
if ($ruleOut13->hadError) {
$c = 14;
$charPos--;
$this->offset--;
if ($ruleOut13->error->vested > 1) {
$this->giveError($ruleOut13->error->code, $ruleOut13->error->expected, $ruleOut13->error->found);}}else{
$ruleOutCast13 = &_c_lib__mapUtils::readIndex($ruleOut13->data, "data");
$charPos = $this->offset;
$casttemplates13 = &_c_lib__mapUtils::readIndex($data, "templates");
array_push($casttemplates13, $ruleOutCast13);
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 13;
$this->error->vested++;}}else if ($c == 14) {
$ruleOut14 = $this->_($input, $charPos);
if ($ruleOut14->hadError) {
$this->giveError($ruleOut14->error->code, "White space(optional)(" . $ruleOut14->error->expected . ")", $ruleOut14->error->found);}else{
$ruleOutCast14 = _c_lib__mapUtils::readIndex($ruleOut14->data, "data");
$charPos = $this->offset;
$c = 15;}}else if ($c == 15) {
$ruleOut15 = $this->Safe_Name($input, $charPos);
if ($ruleOut15->hadError) {
$this->giveError($ruleOut15->error->code, "Safe_Name(" . $ruleOut15->error->expected . ")", $ruleOut15->error->found);}else{
$ruleOutCast15 = _c_lib__mapUtils::readIndex($ruleOut15->data, "data");
$charPos = $this->offset;
$data["name"] = $ruleOutCast15;
$c = 16;
$this->error->vested++;}}else if ($c == 16) {
$ruleOut16 = $this->_($input, $charPos);
if ($ruleOut16->hadError) {
$this->giveError($ruleOut16->error->code, "White space(optional)(" . $ruleOut16->error->expected . ")", $ruleOut16->error->found);}else{
$ruleOutCast16 = _c_lib__mapUtils::readIndex($ruleOut16->data, "data");
$charPos = $this->offset;
$c = 17;}}else if ($c == 17) {
$ruleOut17 = $this->Inherit($input, $charPos);
if ($ruleOut17->hadError) {
$c = 18;
$charPos--;
$this->offset--;}else{
$ruleOutCast17 = &_c_lib__mapUtils::readIndex($ruleOut17->data, "data");
$charPos = $this->offset;
$data["inherits"] = $ruleOutCast17;
$c = 18;
$this->error->vested++;}}else if ($c == 18) {
$ruleOut18 = $this->_($input, $charPos);
if ($ruleOut18->hadError) {
$this->giveError($ruleOut18->error->code, "White space(optional)(" . $ruleOut18->error->expected . ")", $ruleOut18->error->found);}else{
$ruleOutCast18 = _c_lib__mapUtils::readIndex($ruleOut18->data, "data");
$charPos = $this->offset;
$c = 19;}}else if ($c == 19) {
if ($currentCode == 123) {
$c = 20;
$this->error->vested++;}else{
$this->giveError(1, "{", $currentChar);}}else if ($c == 20) {
$ruleOut20 = $this->_($input, $charPos);
if ($ruleOut20->hadError) {
$this->giveError($ruleOut20->error->code, "White space(optional)(" . $ruleOut20->error->expected . ")", $ruleOut20->error->found);}else{
$ruleOutCast20 = _c_lib__mapUtils::readIndex($ruleOut20->data, "data");
$charPos = $this->offset;
$c = 21;}}else if ($c == 21) {
$ruleOut21 = $this->Member_Flagged($input, $charPos);
if ($ruleOut21->hadError) {
$c = 22;
$charPos--;
$this->offset--;}else{
$ruleOutCast21 = &_c_lib__mapUtils::readIndex($ruleOut21->data, "data");
$charPos = $this->offset;
$castmembers21 = &_c_lib__mapUtils::readIndex($data, "members");
array_push($castmembers21, $ruleOutCast21);
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 21;
$this->error->vested++;}}else if ($c == 22) {
$ruleOut22 = $this->Member($input, $charPos);
if ($ruleOut22->hadError) {
$c = 23;
$charPos--;
$this->offset--;}else{
$ruleOutCast22 = &_c_lib__mapUtils::readIndex($ruleOut22->data, "data");
$charPos = $this->offset;
$castmembers21 = &_c_lib__mapUtils::readIndex($data, "members");
array_push($castmembers21, $ruleOutCast22);
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 21;
$this->error->vested++;}}else if ($c == 23) {
$ruleOut23 = $this->_($input, $charPos);
if ($ruleOut23->hadError) {
$this->giveError($ruleOut23->error->code, "White space(optional)(" . $ruleOut23->error->expected . ")", $ruleOut23->error->found);}else{
$ruleOutCast23 = _c_lib__mapUtils::readIndex($ruleOut23->data, "data");
$charPos = $this->offset;
$c = 24;}}else if ($c == 24) {
if ($currentCode == 125) {
if (true) {
$castac0 = &$data;
$actionCap0type = &_c_lib__mapUtils::readIndex($data, "type");
$actionCap0attr = &_c_lib__mapUtils::readIndex($data, "attr");
$actionCap0doc = &_c_lib__mapUtils::readIndex($data, "doc");
$actionCap0flags = &_c_lib__mapUtils::readIndex($data, "flags");
$actionCap0name = _c_lib__mapUtils::readIndex($data, "name");
$actionCap0members = &_c_lib__mapUtils::readIndex($data, "members");
$actionCap0inherits = &_c_lib__mapUtils::readIndex($data, "inherits");
$actionCap0templates = &_c_lib__mapUtils::readIndex($data, "templates");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = $actionCap0type;
_c_lib__mapUtils::readIndex($dataStore, "data")["attribute"] = $actionCap0attr;
_c_lib__mapUtils::readIndex($dataStore, "data")["doc"] = $actionCap0doc;
_c_lib__mapUtils::readIndex($dataStore, "data")["flags"] = $actionCap0flags;
_c_lib__mapUtils::readIndex($dataStore, "data")["name"] = $actionCap0name;
_c_lib__mapUtils::readIndex($dataStore, "data")["members"] = $actionCap0members;
_c_lib__mapUtils::readIndex($dataStore, "data")["inherits"] = $actionCap0inherits;
_c_lib__mapUtils::readIndex($dataStore, "data")["templates"] = $actionCap0templates;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "}", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function _c__Implements(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
$ruleOut1 = $this->Safe_Name($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "Safe_Name(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["base"] = $ruleOutCast1;
$c = 2;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->__($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "White space(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$c = 3;}}else if ($c == 3) {
$lit3 = [105, 109, 112, 108, 101, 109, 101, 110, 116, 115];
if ($currentCode == _c_lib__arrUtils::readIndex($lit3, $literalChar)) {
$literalChar++;
if ($literalChar == 10) {
$c = 4;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit3) . "", $currentChar);}}else if ($c == 4) {
$ruleOut4 = $this->__($input, $charPos);
if ($ruleOut4->hadError) {
$this->giveError($ruleOut4->error->code, "White space(" . $ruleOut4->error->expected . ")", $ruleOut4->error->found);}else{
$ruleOutCast4 = _c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$c = 5;}}else if ($c == 5) {
$ruleOut5 = $this->Safe_Name($input, $charPos);
if ($ruleOut5->hadError) {
$this->giveError($ruleOut5->error->code, "Safe_Name(" . $ruleOut5->error->expected . ")", $ruleOut5->error->found);}else{
$ruleOutCast5 = _c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$data["subject"] = $ruleOutCast5;
$c = 6;
$this->error->vested++;}}else if ($c == 6) {
$ruleOut6 = $this->_($input, $charPos);
if ($ruleOut6->hadError) {
$this->giveError($ruleOut6->error->code, "White space(optional)(" . $ruleOut6->error->expected . ")", $ruleOut6->error->found);}else{
$ruleOutCast6 = _c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$c = 7;}}else if ($c == 7) {
if ($currentCode == 59) {
if (true) {
$castac0 = &$data;
$actionCap0base = _c_lib__mapUtils::readIndex($data, "base");
$actionCap0subject = _c_lib__mapUtils::readIndex($data, "subject");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "implements";
_c_lib__mapUtils::readIndex($dataStore, "data")["implementer"] = $actionCap0base;
_c_lib__mapUtils::readIndex($dataStore, "data")["implements"] = $actionCap0subject;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, ";", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Type(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
$ruleOut1 = $this->Template($input, $charPos);
if ($ruleOut1->hadError) {
$c = 2;
$charPos--;
$this->offset--;}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["template"] = $ruleOutCast1;
$c = 2;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->Safe_Name($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "Safe_Name(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["name"] = $ruleOutCast2;
if (true) {
$castacname0 = &_c_lib__mapUtils::readIndex($data, "name");
$actionCap0name = _c_lib__mapUtils::readIndex($data, "name");
$actionCap0template = &_c_lib__mapUtils::readIndex($data, "template");
_c_lib__mapUtils::readIndex($dataStore, "data")["name"] = $actionCap0name;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;
if ($actionCap0template != null) {
$tt = &_c_lib__mapUtils::readIndex($actionCap0template, "types");
_c_lib__mapUtils::readIndex($dataStore, "data")["template"] = $tt;}else{
_c_lib__mapUtils::readIndex($dataStore, "data")["template"] = false;}}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Flag(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
$ruleOut1 = $this->Safe_Name($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "Safe_Name(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["str"] = $ruleOutCast1;
if (true) {
$castacstr0 = &$data["str"];
$actionCap0str = $data["str"];
$dataStore["data"] = $actionCap0str;
if ($actionCap0str == "class") {
$this->giveError(1, "" . "" . "", "");}
if ($actionCap0str == "relative") {
$this->giveError(1, "" . "" . "", "");}
if ($actionCap0str == "extend") {
$this->giveError(1, "" . "" . "", "");}
if ($actionCap0str == "namespace") {
$this->giveError(1, "" . "" . "", "");}}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Optional(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 61) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "=", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Expression($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "Expression(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast2;
if (true) {
$castacexp0 = &_c_lib__mapUtils::readIndex($data, "exp");
$actionCap0exp = &_c_lib__mapUtils::readIndex($data, "exp");
$dataStore["data"] = $actionCap0exp;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Parameter(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["op"] = [];
$data["doc"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
$ruleOut1 = $this->Type($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "Type(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["type"] = $ruleOutCast1;
$c = 2;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->__($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "White space(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$c = 3;}}else if ($c == 3) {
$ruleOut3 = $this->Safe_Name($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "Safe_Name(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$data["name"] = $ruleOutCast3;
$c = 4;
$this->error->vested++;}}else if ($c == 4) {
$ruleOut4 = $this->_($input, $charPos);
if ($ruleOut4->hadError) {
$this->giveError($ruleOut4->error->code, "White space(optional)(" . $ruleOut4->error->expected . ")", $ruleOut4->error->found);}else{
$ruleOutCast4 = _c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$c = 5;}}else if ($c == 5) {
$ruleOut5 = $this->Optional($input, $charPos);
if ($ruleOut5->hadError) {
$c = 6;
$charPos--;
$this->offset--;
if ($ruleOut5->error->vested > 1) {
$this->giveError($ruleOut5->error->code, $ruleOut5->error->expected, $ruleOut5->error->found);}}else{
$ruleOutCast5 = &_c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$castop5 = &_c_lib__mapUtils::readIndex($data, "op");
array_push($castop5, $ruleOutCast5);
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 5;
$this->error->vested++;}}else if ($c == 6) {
$ruleOut6 = $this->_($input, $charPos);
if ($ruleOut6->hadError) {
$this->giveError($ruleOut6->error->code, "White space(optional)(" . $ruleOut6->error->expected . ")", $ruleOut6->error->found);}else{
$ruleOutCast6 = _c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$c = 7;}}else if ($c == 7) {
$ruleOut7 = $this->String_Tick($input, $charPos);
if ($ruleOut7->hadError) {
if (true) {
$castacdoc0 = &_c_lib__mapUtils::readIndex($data, "doc");
$actionCap0type = &_c_lib__mapUtils::readIndex($data, "type");
$actionCap0doc = &_c_lib__mapUtils::readIndex($data, "doc");
$actionCap0name = _c_lib__mapUtils::readIndex($data, "name");
$actionCap0op = &_c_lib__mapUtils::readIndex($data, "op");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = $actionCap0type;
_c_lib__mapUtils::readIndex($dataStore, "data")["doc"] = $actionCap0doc;
_c_lib__mapUtils::readIndex($dataStore, "data")["name"] = $actionCap0name;
_c_lib__mapUtils::readIndex($dataStore, "data")["optional"] = $actionCap0op;}
$c = 0 - 1;
$charPos--;
$this->offset--;
if ($ruleOut7->error->vested > 1) {
$this->giveError($ruleOut7->error->code, $ruleOut7->error->expected, $ruleOut7->error->found);}}else{
$ruleOutCast7 = _c_lib__mapUtils::readIndex($ruleOut7->data, "data");
$charPos = $this->offset;
$castdoc7 = &_c_lib__mapUtils::readIndex($data, "doc");
array_push($castdoc7, $ruleOutCast7);
if (true) {
$castacdoc0 = &_c_lib__mapUtils::readIndex($data, "doc");
$actionCap0type = &_c_lib__mapUtils::readIndex($data, "type");
$actionCap0doc = &_c_lib__mapUtils::readIndex($data, "doc");
$actionCap0name = _c_lib__mapUtils::readIndex($data, "name");
$actionCap0op = &_c_lib__mapUtils::readIndex($data, "op");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = $actionCap0type;
_c_lib__mapUtils::readIndex($dataStore, "data")["doc"] = $actionCap0doc;
_c_lib__mapUtils::readIndex($dataStore, "data")["name"] = $actionCap0name;
_c_lib__mapUtils::readIndex($dataStore, "data")["optional"] = $actionCap0op;}
$c = 7;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Method(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["parameters"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 40) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "(", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Parameter($input, $charPos);
if ($ruleOut2->hadError) {
$c = 3;
$charPos--;
$this->offset--;
if ($ruleOut2->error->vested > 1) {
$this->giveError($ruleOut2->error->code, $ruleOut2->error->expected, $ruleOut2->error->found);}}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$castparameters2 = &_c_lib__mapUtils::readIndex($data, "parameters");
array_push($castparameters2, $ruleOutCast2);
if (ord($input[$charPos + 1]) != 44) {
$c = 3;
continue;}else{
$charPos++;}
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 2;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
if ($currentCode == 41) {
$c = 5;
$this->error->vested++;}else{
$this->giveError(1, ")", $currentChar);}}else if ($c == 5) {
$ruleOut5 = $this->_($input, $charPos);
if ($ruleOut5->hadError) {
$this->giveError($ruleOut5->error->code, "White space(optional)(" . $ruleOut5->error->expected . ")", $ruleOut5->error->found);}else{
$ruleOutCast5 = _c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$c = 6;}}else if ($c == 6) {
$ruleOut6 = $this->Block($input, $charPos);
if ($ruleOut6->hadError) {
$c = 7;
$charPos--;
$this->offset--;}else{
$ruleOutCast6 = &_c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$data["body"] = $ruleOutCast6;
if (true) {
$castacbody0 = &_c_lib__mapUtils::readIndex($data, "body");
$actionCap0parameters = &_c_lib__mapUtils::readIndex($data, "parameters");
$actionCap0body = &_c_lib__mapUtils::readIndex($data, "body");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "method";
_c_lib__mapUtils::readIndex($dataStore, "data")["parameters"] = $actionCap0parameters;
_c_lib__mapUtils::readIndex($dataStore, "data")["body"] = $actionCap0body;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 7) {
$ruleOut7 = $this->_c__Interface($input, $charPos);
if ($ruleOut7->hadError) {
$this->giveError(1, "Block, Interface", $currentChar);}else{
$ruleOutCast7 = &_c_lib__mapUtils::readIndex($ruleOut7->data, "data");
$charPos = $this->offset;
$data["body"] = $ruleOutCast7;
if (true) {
$castacbody0 = &_c_lib__mapUtils::readIndex($data, "body");
$actionCap0parameters = &_c_lib__mapUtils::readIndex($data, "parameters");
$actionCap0body = &_c_lib__mapUtils::readIndex($data, "body");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "method";
_c_lib__mapUtils::readIndex($dataStore, "data")["parameters"] = $actionCap0parameters;
_c_lib__mapUtils::readIndex($dataStore, "data")["body"] = $actionCap0body;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Property(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 61) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "=", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Expression($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "Expression(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast2;
$c = 3;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
if ($currentCode == 59) {
if (true) {
$castac0 = &$data;
$actionCap0exp = &_c_lib__mapUtils::readIndex($data, "exp");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "property";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0exp;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, ";", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Attribute_Value(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
if ($currentCode == 61) {
$c = 2;
$this->error->vested++;}else{
$this->giveError(1, "=", $currentChar);}}else if ($c == 2) {
$ruleOut2 = $this->_($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "White space(optional)(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$c = 3;}}else if ($c == 3) {
$ruleOut3 = $this->Json_Value($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "Json_Value(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$data["val"] = $ruleOutCast3;
if (true) {
$castacval0 = &_c_lib__mapUtils::readIndex($data, "val");
$actionCap0val = _c_lib__mapUtils::readIndex($data, "val");
$dataStore["data"] = $actionCap0val;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Attribute_Pair(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["val"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
$ruleOut1 = $this->Safe_Name($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "Safe_Name(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["key"] = $ruleOutCast1;
$c = 2;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->Attribute_Value($input, $charPos);
if ($ruleOut2->hadError) {
if (true) {
$castacval0 = &_c_lib__mapUtils::readIndex($data, "val");
$actionCap0key = _c_lib__mapUtils::readIndex($data, "key");
$actionCap0val = &_c_lib__mapUtils::readIndex($data, "val");
_c_lib__mapUtils::readIndex($dataStore, "data")["key"] = $actionCap0key;
if (count($actionCap0val) > 0) {
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = _c_lib__arrUtils::readIndex($actionCap0val, 0);}else{
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = true;}}
$c = 0 - 1;
$charPos--;
$this->offset--;
if ($ruleOut2->error->vested > 1) {
$this->giveError($ruleOut2->error->code, $ruleOut2->error->expected, $ruleOut2->error->found);}}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$castval2 = &_c_lib__mapUtils::readIndex($data, "val");
array_push($castval2, $ruleOutCast2);
if (true) {
$castacval0 = &_c_lib__mapUtils::readIndex($data, "val");
$actionCap0key = _c_lib__mapUtils::readIndex($data, "key");
$actionCap0val = &_c_lib__mapUtils::readIndex($data, "val");
_c_lib__mapUtils::readIndex($dataStore, "data")["key"] = $actionCap0key;
if (count($actionCap0val) > 0) {
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = _c_lib__arrUtils::readIndex($actionCap0val, 0);}else{
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = true;}}
$c = 2;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Attribute(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["attrs"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 91) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "[", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Attribute_Pair($input, $charPos);
if ($ruleOut2->hadError) {
$c = 3;
$charPos--;
$this->offset--;
if ($ruleOut2->error->vested > 1) {
$this->giveError($ruleOut2->error->code, $ruleOut2->error->expected, $ruleOut2->error->found);}}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$castattrs2 = &_c_lib__mapUtils::readIndex($data, "attrs");
array_push($castattrs2, $ruleOutCast2);
if (ord($input[$charPos + 1]) != 44) {
$c = 3;
continue;}else{
$charPos++;}
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 2;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
if ($currentCode == 93) {
if (true) {
$castac0 = &$data;
$actionCap0attrs = &_c_lib__mapUtils::readIndex($data, "attrs");
$dataStore["data"] = $actionCap0attrs;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "]", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function _c__Interface(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 59) {
if (true) {
$castac0 = &$data;
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "interface";}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, ";", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Member_Value(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->Method($input, $charPos);
if ($ruleOut0->hadError) {
$c = 1;
$charPos--;
$this->offset--;}else{
$ruleOutCast0 = &_c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["v"] = $ruleOutCast0;
if (true) {
$castacv0 = &_c_lib__mapUtils::readIndex($data, "v");
$actionCap0v = &_c_lib__mapUtils::readIndex($data, "v");
$dataStore["data"] = $actionCap0v;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 1) {
$ruleOut1 = $this->Property($input, $charPos);
if ($ruleOut1->hadError) {
$c = 2;
$charPos--;
$this->offset--;}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["v"] = $ruleOutCast1;
if (true) {
$castacv0 = &_c_lib__mapUtils::readIndex($data, "v");
$actionCap0v = &_c_lib__mapUtils::readIndex($data, "v");
$dataStore["data"] = $actionCap0v;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->_c__Interface($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError(1, "Method, Property, Interface", $currentChar);}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["v"] = $ruleOutCast2;
if (true) {
$castacv0 = &_c_lib__mapUtils::readIndex($data, "v");
$actionCap0v = &_c_lib__mapUtils::readIndex($data, "v");
$dataStore["data"] = $actionCap0v;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Member_Flagged(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["doc"] = [];
$data["flags"] = [];
$data["templates"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
$ruleOut1 = $this->String_Tick($input, $charPos);
if ($ruleOut1->hadError) {
$c = 2;
$charPos--;
$this->offset--;
if ($ruleOut1->error->vested > 1) {
$this->giveError($ruleOut1->error->code, $ruleOut1->error->expected, $ruleOut1->error->found);}}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$castdoc1 = &_c_lib__mapUtils::readIndex($data, "doc");
array_push($castdoc1, $ruleOutCast1);
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 1;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->_($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "White space(optional)(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$c = 3;}}else if ($c == 3) {
$ruleOut3 = $this->Attribute($input, $charPos);
if ($ruleOut3->hadError) {
$c = 4;
$charPos--;
$this->offset--;}else{
$ruleOutCast3 = &_c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$data["attr"] = $ruleOutCast3;
$c = 4;
$this->error->vested++;}}else if ($c == 4) {
$ruleOut4 = $this->_($input, $charPos);
if ($ruleOut4->hadError) {
$this->giveError($ruleOut4->error->code, "White space(optional)(" . $ruleOut4->error->expected . ")", $ruleOut4->error->found);}else{
$ruleOutCast4 = _c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$c = 5;}}else if ($c == 5) {
$ruleOut5 = $this->Flag($input, $charPos);
if ($ruleOut5->hadError) {
$castflags5 = &_c_lib__mapUtils::readIndex($data, "flags");
if (count($castflags5) >= 1) {
$c = 6;
$charPos--;
$this->offset--;}else{
$this->giveError(1, "Flag", $currentChar);}}else{
$ruleOutCast5 = _c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$castflags5 = &_c_lib__mapUtils::readIndex($data, "flags");
array_push($castflags5, $ruleOutCast5);
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 5;
$this->error->vested++;}}else if ($c == 6) {
$ruleOut6 = $this->_($input, $charPos);
if ($ruleOut6->hadError) {
$this->giveError($ruleOut6->error->code, "White space(optional)(" . $ruleOut6->error->expected . ")", $ruleOut6->error->found);}else{
$ruleOutCast6 = _c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$c = 7;}}else if ($c == 7) {
$ruleOut7 = $this->Type($input, $charPos);
if ($ruleOut7->hadError) {
$c = 8;
$charPos--;
$this->offset--;}else{
$ruleOutCast7 = &_c_lib__mapUtils::readIndex($ruleOut7->data, "data");
$charPos = $this->offset;
$data["type"] = $ruleOutCast7;
$c = 8;
$this->error->vested++;}}else if ($c == 8) {
$ruleOut8 = $this->_($input, $charPos);
if ($ruleOut8->hadError) {
$this->giveError($ruleOut8->error->code, "White space(optional)(" . $ruleOut8->error->expected . ")", $ruleOut8->error->found);}else{
$ruleOutCast8 = _c_lib__mapUtils::readIndex($ruleOut8->data, "data");
$charPos = $this->offset;
$c = 9;}}else if ($c == 9) {
$ruleOut9 = $this->Template_Type($input, $charPos);
if ($ruleOut9->hadError) {
$c = 10;
$charPos--;
$this->offset--;
if ($ruleOut9->error->vested > 1) {
$this->giveError($ruleOut9->error->code, $ruleOut9->error->expected, $ruleOut9->error->found);}}else{
$ruleOutCast9 = &_c_lib__mapUtils::readIndex($ruleOut9->data, "data");
$charPos = $this->offset;
$casttemplates9 = &_c_lib__mapUtils::readIndex($data, "templates");
array_push($casttemplates9, $ruleOutCast9);
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 9;
$this->error->vested++;}}else if ($c == 10) {
$ruleOut10 = $this->_($input, $charPos);
if ($ruleOut10->hadError) {
$this->giveError($ruleOut10->error->code, "White space(optional)(" . $ruleOut10->error->expected . ")", $ruleOut10->error->found);}else{
$ruleOutCast10 = _c_lib__mapUtils::readIndex($ruleOut10->data, "data");
$charPos = $this->offset;
$c = 11;}}else if ($c == 11) {
$ruleOut11 = $this->Safe_Name($input, $charPos);
if ($ruleOut11->hadError) {
$c = 12;
$charPos--;
$this->offset--;}else{
$ruleOutCast11 = _c_lib__mapUtils::readIndex($ruleOut11->data, "data");
$charPos = $this->offset;
$data["name"] = $ruleOutCast11;
$c = 12;
$this->error->vested++;}}else if ($c == 12) {
$ruleOut12 = $this->_($input, $charPos);
if ($ruleOut12->hadError) {
$this->giveError($ruleOut12->error->code, "White space(optional)(" . $ruleOut12->error->expected . ")", $ruleOut12->error->found);}else{
$ruleOutCast12 = _c_lib__mapUtils::readIndex($ruleOut12->data, "data");
$charPos = $this->offset;
$c = 13;}}else if ($c == 13) {
$ruleOut13 = $this->Member_Value($input, $charPos);
if ($ruleOut13->hadError) {
$this->giveError($ruleOut13->error->code, "Member_Value(" . $ruleOut13->error->expected . ")", $ruleOut13->error->found);}else{
$ruleOutCast13 = &_c_lib__mapUtils::readIndex($ruleOut13->data, "data");
$charPos = $this->offset;
$data["val"] = $ruleOutCast13;
if (true) {
$castacval0 = &_c_lib__mapUtils::readIndex($data, "val");
$actionCap0val = &_c_lib__mapUtils::readIndex($data, "val");
$actionCap0name = _c_lib__mapUtils::readIndex($data, "name");
$actionCap0type = &_c_lib__mapUtils::readIndex($data, "type");
$actionCap0flags = &_c_lib__mapUtils::readIndex($data, "flags");
$actionCap0templates = &_c_lib__mapUtils::readIndex($data, "templates");
$actionCap0attr = &_c_lib__mapUtils::readIndex($data, "attr");
$actionCap0doc = &_c_lib__mapUtils::readIndex($data, "doc");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = _c_lib__mapUtils::readIndex($actionCap0val, "type");
_c_lib__mapUtils::readIndex($dataStore, "data")["name"] = $actionCap0name;
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0val;
if ($actionCap0type == null) {
_c_lib__mapUtils::readIndex($dataStore, "data")["output"] = ['_c__mapC' => true];
if (count($actionCap0flags) == 0) {
$this->giveError(1, "" . "" . "", "");}else if (count($actionCap0flags) >= 2) {
_c_lib__mapUtils::readIndex($dataStore, "data")["name"] = _c_lib__arrUtils::readIndex($actionCap0flags, count($actionCap0flags) - 1);
array_pop($actionCap0flags);
_c_lib__mapUtils::readIndex($dataStore, "data")["output"]["name"] = _c_lib__arrUtils::readIndex($actionCap0flags, count($actionCap0flags) - 1);
array_pop($actionCap0flags);}
_c_lib__mapUtils::readIndex($dataStore, "data")["output"]["template"] = [];
_c_lib__mapUtils::readIndex($dataStore, "data")["flags"] = $actionCap0flags;}else{
_c_lib__mapUtils::readIndex($dataStore, "data")["flags"] = $actionCap0flags;
_c_lib__mapUtils::readIndex($dataStore, "data")["output"] = $actionCap0type;}
_c_lib__mapUtils::readIndex($dataStore, "data")["templates"] = $actionCap0templates;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["attribute"] = $actionCap0attr;
_c_lib__mapUtils::readIndex($dataStore, "data")["doc"] = $actionCap0doc;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Member(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["doc"] = [];
$data["templates"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
$ruleOut1 = $this->String_Tick($input, $charPos);
if ($ruleOut1->hadError) {
$c = 2;
$charPos--;
$this->offset--;
if ($ruleOut1->error->vested > 1) {
$this->giveError($ruleOut1->error->code, $ruleOut1->error->expected, $ruleOut1->error->found);}}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$castdoc1 = &_c_lib__mapUtils::readIndex($data, "doc");
array_push($castdoc1, $ruleOutCast1);
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 1;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->_($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "White space(optional)(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$c = 3;}}else if ($c == 3) {
$ruleOut3 = $this->Attribute($input, $charPos);
if ($ruleOut3->hadError) {
$c = 4;
$charPos--;
$this->offset--;}else{
$ruleOutCast3 = &_c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$data["attr"] = $ruleOutCast3;
$c = 4;
$this->error->vested++;}}else if ($c == 4) {
$ruleOut4 = $this->_($input, $charPos);
if ($ruleOut4->hadError) {
$this->giveError($ruleOut4->error->code, "White space(optional)(" . $ruleOut4->error->expected . ")", $ruleOut4->error->found);}else{
$ruleOutCast4 = _c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$c = 5;}}else if ($c == 5) {
$ruleOut5 = $this->Type($input, $charPos);
if ($ruleOut5->hadError) {
$this->giveError($ruleOut5->error->code, "Type(" . $ruleOut5->error->expected . ")", $ruleOut5->error->found);}else{
$ruleOutCast5 = &_c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$data["type"] = $ruleOutCast5;
$c = 6;
$this->error->vested++;}}else if ($c == 6) {
$ruleOut6 = $this->__($input, $charPos);
if ($ruleOut6->hadError) {
$this->giveError($ruleOut6->error->code, "White space(" . $ruleOut6->error->expected . ")", $ruleOut6->error->found);}else{
$ruleOutCast6 = _c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$c = 7;}}else if ($c == 7) {
$ruleOut7 = $this->Template_Type($input, $charPos);
if ($ruleOut7->hadError) {
$c = 8;
$charPos--;
$this->offset--;
if ($ruleOut7->error->vested > 1) {
$this->giveError($ruleOut7->error->code, $ruleOut7->error->expected, $ruleOut7->error->found);}}else{
$ruleOutCast7 = &_c_lib__mapUtils::readIndex($ruleOut7->data, "data");
$charPos = $this->offset;
$casttemplates7 = &_c_lib__mapUtils::readIndex($data, "templates");
array_push($casttemplates7, $ruleOutCast7);
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 7;
$this->error->vested++;}}else if ($c == 8) {
$ruleOut8 = $this->_($input, $charPos);
if ($ruleOut8->hadError) {
$this->giveError($ruleOut8->error->code, "White space(optional)(" . $ruleOut8->error->expected . ")", $ruleOut8->error->found);}else{
$ruleOutCast8 = _c_lib__mapUtils::readIndex($ruleOut8->data, "data");
$charPos = $this->offset;
$c = 9;}}else if ($c == 9) {
$ruleOut9 = $this->Safe_Name($input, $charPos);
if ($ruleOut9->hadError) {
$this->giveError($ruleOut9->error->code, "Safe_Name(" . $ruleOut9->error->expected . ")", $ruleOut9->error->found);}else{
$ruleOutCast9 = _c_lib__mapUtils::readIndex($ruleOut9->data, "data");
$charPos = $this->offset;
$data["name"] = $ruleOutCast9;
$c = 10;
$this->error->vested++;}}else if ($c == 10) {
$ruleOut10 = $this->_($input, $charPos);
if ($ruleOut10->hadError) {
$this->giveError($ruleOut10->error->code, "White space(optional)(" . $ruleOut10->error->expected . ")", $ruleOut10->error->found);}else{
$ruleOutCast10 = _c_lib__mapUtils::readIndex($ruleOut10->data, "data");
$charPos = $this->offset;
$c = 11;}}else if ($c == 11) {
$ruleOut11 = $this->Member_Value($input, $charPos);
if ($ruleOut11->hadError) {
$this->giveError($ruleOut11->error->code, "Member_Value(" . $ruleOut11->error->expected . ")", $ruleOut11->error->found);}else{
$ruleOutCast11 = &_c_lib__mapUtils::readIndex($ruleOut11->data, "data");
$charPos = $this->offset;
$data["val"] = $ruleOutCast11;
if (true) {
$castacval0 = &_c_lib__mapUtils::readIndex($data, "val");
$actionCap0val = &_c_lib__mapUtils::readIndex($data, "val");
$actionCap0attr = &_c_lib__mapUtils::readIndex($data, "attr");
$actionCap0doc = &_c_lib__mapUtils::readIndex($data, "doc");
$actionCap0type = &_c_lib__mapUtils::readIndex($data, "type");
$actionCap0name = _c_lib__mapUtils::readIndex($data, "name");
$actionCap0templates = &_c_lib__mapUtils::readIndex($data, "templates");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = _c_lib__mapUtils::readIndex($actionCap0val, "type");
_c_lib__mapUtils::readIndex($dataStore, "data")["attribute"] = $actionCap0attr;
_c_lib__mapUtils::readIndex($dataStore, "data")["doc"] = $actionCap0doc;
_c_lib__mapUtils::readIndex($dataStore, "data")["output"] = $actionCap0type;
_c_lib__mapUtils::readIndex($dataStore, "data")["name"] = $actionCap0name;
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0val;
_c_lib__mapUtils::readIndex($dataStore, "data")["flags"] = [];
_c_lib__mapUtils::readIndex($dataStore, "data")["templates"] = $actionCap0templates;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Any_Member(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->Member_Flagged($input, $charPos);
if ($ruleOut0->hadError) {
$c = 1;
$charPos--;
$this->offset--;}else{
$ruleOutCast0 = &_c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["mem"] = $ruleOutCast0;
if (true) {
$castacmem0 = &_c_lib__mapUtils::readIndex($data, "mem");
$actionCap0mem = &_c_lib__mapUtils::readIndex($data, "mem");
$dataStore["data"] = $actionCap0mem;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 1) {
$ruleOut1 = $this->Member($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError(1, "Member_Flagged, Member", $currentChar);}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["mem"] = $ruleOutCast1;
if (true) {
$castacmem0 = &_c_lib__mapUtils::readIndex($data, "mem");
$actionCap0mem = &_c_lib__mapUtils::readIndex($data, "mem");
$dataStore["data"] = $actionCap0mem;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Group(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 40) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "(", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->Expression($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "Expression(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast1;
$c = 2;
$this->error->vested++;}}else if ($c == 2) {
if ($currentCode == 41) {
if (true) {
$castac0 = &$data;
$actionCap0exp = &_c_lib__mapUtils::readIndex($data, "exp");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "group";
_c_lib__mapUtils::readIndex($dataStore, "data")["expression"] = $actionCap0exp;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, ")", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Constant(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->Safe_Name($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "Safe_Name(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["name"] = $ruleOutCast0;
if (true) {
$castacname0 = _c_lib__mapUtils::readIndex($data, "name");
$actionCap0name = _c_lib__mapUtils::readIndex($data, "name");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "constant";
_c_lib__mapUtils::readIndex($dataStore, "data")["name"] = $actionCap0name;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Literal_Number(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["num"] = "";
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$passed0 = false;
if ($currentCode == 46) {
$passed0 = true;}
if ($passed0 == false) {
if ($currentCode >= 48 and $currentCode <= 57) {
$passed0 = true;}}
if ($passed0) {
$data["num"] .= $currentChar;
if (true) {
$castacnum0 = _c_lib__mapUtils::readIndex($data, "num");
$actionCap0num = _c_lib__mapUtils::readIndex($data, "num");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "literal";
_c_lib__mapUtils::readIndex($dataStore, "data")["literalType"] = "number";
$num = floatval($actionCap0num);
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $num;
if ($num % 1 === 0) {
_c_lib__mapUtils::readIndex($dataStore, "data")["integer"] = true;}else{
_c_lib__mapUtils::readIndex($dataStore, "data")["integer"] = false;}}
$c = 0;
$this->error->vested++;}else{
$castnum0 = _c_lib__mapUtils::readIndex($data, "num");
if (strlen($castnum0) >= 1) {
if (true) {
$castacnum0 = _c_lib__mapUtils::readIndex($data, "num");
$actionCap0num = _c_lib__mapUtils::readIndex($data, "num");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "literal";
_c_lib__mapUtils::readIndex($dataStore, "data")["literalType"] = "number";
$num = floatval($actionCap0num);
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $num;
if ($num % 1 === 0) {
_c_lib__mapUtils::readIndex($dataStore, "data")["integer"] = true;}else{
_c_lib__mapUtils::readIndex($dataStore, "data")["integer"] = false;}}
$c = 0 - 1;
$charPos--;
$this->offset--;}else{
$this->giveError(1, "0-9, .", $currentChar);}}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Literal_Boolean(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [116, 114, 117, 101];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 4) {
if (true) {
$castacbool0 = _c_lib__mapUtils::readIndex($data, "bool");
$data["bool"] = true;}
if (true) {
$castacbool0 = &_c_lib__mapUtils::readIndex($data, "bool");
$actionCap0bool = &_c_lib__mapUtils::readIndex($data, "bool");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "literal";
_c_lib__mapUtils::readIndex($dataStore, "data")["literalType"] = "boolean";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0bool;}
if (true) {
$castacbool0 = &_c_lib__mapUtils::readIndex($data, "bool");
$actionCap0bool = &_c_lib__mapUtils::readIndex($data, "bool");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "literal";
_c_lib__mapUtils::readIndex($dataStore, "data")["literalType"] = "boolean";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0bool;}
$c = 0 - 1;
$literalChar = 0;}
$this->error->vested++;}else{
$c = 1;
$charPos--;
$this->offset--;}}else if ($c == 1) {
$lit1 = [102, 97, 108, 115, 101];
if ($currentCode == _c_lib__arrUtils::readIndex($lit1, $literalChar)) {
$literalChar++;
if ($literalChar == 5) {
if (true) {
$castacbool1 = _c_lib__mapUtils::readIndex($data, "bool");
$data["bool"] = false;}
if (true) {
$castacbool0 = &_c_lib__mapUtils::readIndex($data, "bool");
$actionCap0bool = &_c_lib__mapUtils::readIndex($data, "bool");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "literal";
_c_lib__mapUtils::readIndex($dataStore, "data")["literalType"] = "boolean";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0bool;}
if (true) {
$castacbool0 = &_c_lib__mapUtils::readIndex($data, "bool");
$actionCap0bool = &_c_lib__mapUtils::readIndex($data, "bool");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "literal";
_c_lib__mapUtils::readIndex($dataStore, "data")["literalType"] = "boolean";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0bool;}
$c = 0 - 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "true, false", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Literal_String(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->String($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "String(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["str"] = $ruleOutCast0;
if (true) {
$castacstr0 = _c_lib__mapUtils::readIndex($data, "str");
$actionCap0str = _c_lib__mapUtils::readIndex($data, "str");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "literal";
_c_lib__mapUtils::readIndex($dataStore, "data")["literalType"] = "string";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0str;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Literal_Array(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["arr"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 91) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "[", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->Expression($input, $charPos);
if ($ruleOut1->hadError) {
$c = 2;
$charPos--;
$this->offset--;
if ($ruleOut1->error->vested > 1) {
$this->giveError($ruleOut1->error->code, $ruleOut1->error->expected, $ruleOut1->error->found);}}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$castarr1 = &_c_lib__mapUtils::readIndex($data, "arr");
array_push($castarr1, $ruleOutCast1);
if (ord($input[$charPos + 1]) != 44) {
$c = 2;
continue;}else{
$charPos++;}
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 1;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->_($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "White space(optional)(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$c = 3;}}else if ($c == 3) {
if ($currentCode == 93) {
if (true) {
$castac0 = &$data;
$actionCap0arr = &_c_lib__mapUtils::readIndex($data, "arr");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "literal";
_c_lib__mapUtils::readIndex($dataStore, "data")["literalType"] = "array";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0arr;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "]", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Literal_Map_Key(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
$ruleOut1 = $this->Safe_Name($input, $charPos);
if ($ruleOut1->hadError) {
$c = 2;
$charPos--;
$this->offset--;}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["key"] = $ruleOutCast1;
$c = 3;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->String($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError(1, "Safe_Name, String", $currentChar);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["key"] = $ruleOutCast2;
$c = 3;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
if ($currentCode == 58) {
$c = 5;
$this->error->vested++;}else{
$this->giveError(1, ":", $currentChar);}}else if ($c == 5) {
$ruleOut5 = $this->_($input, $charPos);
if ($ruleOut5->hadError) {
$this->giveError($ruleOut5->error->code, "White space(optional)(" . $ruleOut5->error->expected . ")", $ruleOut5->error->found);}else{
$ruleOutCast5 = _c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$c = 6;}}else if ($c == 6) {
$ruleOut6 = $this->Expression($input, $charPos);
if ($ruleOut6->hadError) {
$this->giveError($ruleOut6->error->code, "Expression(" . $ruleOut6->error->expected . ")", $ruleOut6->error->found);}else{
$ruleOutCast6 = &_c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$data["value"] = $ruleOutCast6;
if (true) {
$castacvalue0 = &_c_lib__mapUtils::readIndex($data, "value");
$actionCap0key = &_c_lib__mapUtils::readIndex($data, "key");
$actionCap0value = &_c_lib__mapUtils::readIndex($data, "value");
_c_lib__mapUtils::readIndex($dataStore, "data")["key"] = $actionCap0key;
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0value;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Literal_Map(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["arr"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 123) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "{", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Literal_Map_Key($input, $charPos);
if ($ruleOut2->hadError) {
$c = 3;
$charPos--;
$this->offset--;
if ($ruleOut2->error->vested > 1) {
$this->giveError($ruleOut2->error->code, $ruleOut2->error->expected, $ruleOut2->error->found);}}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$castarr2 = &_c_lib__mapUtils::readIndex($data, "arr");
array_push($castarr2, $ruleOutCast2);
if (ord($input[$charPos + 1]) != 44) {
$c = 3;
continue;}else{
$charPos++;}
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 2;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
if ($currentCode == 125) {
if (true) {
$castac0 = &$data;
$actionCap0arr = &_c_lib__mapUtils::readIndex($data, "arr");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "literal";
_c_lib__mapUtils::readIndex($dataStore, "data")["literalType"] = "map";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0arr;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "}", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Literal(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->Literal_Number($input, $charPos);
if ($ruleOut0->hadError) {
$c = 1;
$charPos--;
$this->offset--;}else{
$ruleOutCast0 = &_c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["l"] = $ruleOutCast0;
if (true) {
$castacl0 = &_c_lib__mapUtils::readIndex($data, "l");
$actionCap0l = &_c_lib__mapUtils::readIndex($data, "l");
$dataStore["data"] = $actionCap0l;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;}}else if ($c == 1) {
$ruleOut1 = $this->Literal_Boolean($input, $charPos);
if ($ruleOut1->hadError) {
$c = 2;
$charPos--;
$this->offset--;}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["l"] = $ruleOutCast1;
if (true) {
$castacl0 = &_c_lib__mapUtils::readIndex($data, "l");
$actionCap0l = &_c_lib__mapUtils::readIndex($data, "l");
$dataStore["data"] = $actionCap0l;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->Literal_String($input, $charPos);
if ($ruleOut2->hadError) {
$c = 3;
$charPos--;
$this->offset--;}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["l"] = $ruleOutCast2;
if (true) {
$castacl0 = &_c_lib__mapUtils::readIndex($data, "l");
$actionCap0l = &_c_lib__mapUtils::readIndex($data, "l");
$dataStore["data"] = $actionCap0l;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->Literal_Array($input, $charPos);
if ($ruleOut3->hadError) {
$c = 4;
$charPos--;
$this->offset--;}else{
$ruleOutCast3 = &_c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$data["l"] = $ruleOutCast3;
if (true) {
$castacl0 = &_c_lib__mapUtils::readIndex($data, "l");
$actionCap0l = &_c_lib__mapUtils::readIndex($data, "l");
$dataStore["data"] = $actionCap0l;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 4) {
$ruleOut4 = $this->Literal_Map($input, $charPos);
if ($ruleOut4->hadError) {
$this->giveError(1, "Literal_Number, Literal_Boolean, Literal_String, Literal_Array, Literal_Map", $currentChar);}else{
$ruleOutCast4 = &_c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$data["l"] = $ruleOutCast4;
if (true) {
$castacl0 = &_c_lib__mapUtils::readIndex($data, "l");
$actionCap0l = &_c_lib__mapUtils::readIndex($data, "l");
$dataStore["data"] = $actionCap0l;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Prefix(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [110, 101, 119];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 3) {
$data["pre"] = $this->assembleCodes($lit0);
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->__($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Expression($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "Expression(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast2;
if (true) {
$castacexp0 = &_c_lib__mapUtils::readIndex($data, "exp");
$actionCap0pre = _c_lib__mapUtils::readIndex($data, "pre");
$actionCap0exp = &_c_lib__mapUtils::readIndex($data, "exp");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "prefix";
_c_lib__mapUtils::readIndex($dataStore, "data")["prefix"] = $actionCap0pre;
_c_lib__mapUtils::readIndex($dataStore, "data")["expression"] = $actionCap0exp;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Appendix_Dot(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
if ($currentCode == 46) {
$c = 2;
$this->error->vested++;}else{
$this->giveError(1, ".", $currentChar);}}else if ($c == 2) {
$ruleOut2 = $this->_($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "White space(optional)(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$c = 3;}}else if ($c == 3) {
$ruleOut3 = $this->Safe_Name($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "Safe_Name(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$data["name"] = $ruleOutCast3;
if (true) {
$castacname0 = &_c_lib__mapUtils::readIndex($data, "name");
$actionCap0name = _c_lib__mapUtils::readIndex($data, "name");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "dot";
_c_lib__mapUtils::readIndex($dataStore, "data")["name"] = $actionCap0name;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Appendix_Call(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["exp"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
$ruleOut1 = $this->Template($input, $charPos);
if ($ruleOut1->hadError) {
$c = 2;
$charPos--;
$this->offset--;}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["templates"] = $ruleOutCast1;
$c = 2;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->_($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "White space(optional)(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$c = 3;}}else if ($c == 3) {
if ($currentCode == 40) {
$c = 4;
$this->error->vested++;}else{
$this->giveError(1, "(", $currentChar);}}else if ($c == 4) {
$ruleOut4 = $this->_($input, $charPos);
if ($ruleOut4->hadError) {
$this->giveError($ruleOut4->error->code, "White space(optional)(" . $ruleOut4->error->expected . ")", $ruleOut4->error->found);}else{
$ruleOutCast4 = _c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$c = 5;}}else if ($c == 5) {
$ruleOut5 = $this->Expression($input, $charPos);
if ($ruleOut5->hadError) {
$c = 6;
$charPos--;
$this->offset--;
if ($ruleOut5->error->vested > 1) {
$this->giveError($ruleOut5->error->code, $ruleOut5->error->expected, $ruleOut5->error->found);}}else{
$ruleOutCast5 = &_c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$castexp5 = &_c_lib__mapUtils::readIndex($data, "exp");
array_push($castexp5, $ruleOutCast5);
if (ord($input[$charPos + 1]) != 44) {
$c = 6;
continue;}else{
$charPos++;}
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 5;
$this->error->vested++;}}else if ($c == 6) {
$ruleOut6 = $this->_($input, $charPos);
if ($ruleOut6->hadError) {
$this->giveError($ruleOut6->error->code, "White space(optional)(" . $ruleOut6->error->expected . ")", $ruleOut6->error->found);}else{
$ruleOutCast6 = _c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$c = 7;}}else if ($c == 7) {
if ($currentCode == 41) {
if (true) {
$castac0 = &$data;
$actionCap0exp = &_c_lib__mapUtils::readIndex($data, "exp");
$actionCap0templates = &_c_lib__mapUtils::readIndex($data, "templates");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "call";
_c_lib__mapUtils::readIndex($dataStore, "data")["expression"] = $actionCap0exp;
_c_lib__mapUtils::readIndex($dataStore, "data")["templates"] = $actionCap0templates;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, ")", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Appendix_Index(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
if ($currentCode == 91) {
$c = 2;
$this->error->vested++;}else{
$this->giveError(1, "[", $currentChar);}}else if ($c == 2) {
$ruleOut2 = $this->_($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "White space(optional)(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$c = 3;}}else if ($c == 3) {
$ruleOut3 = $this->Expression($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "Expression(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = &_c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast3;
$c = 4;
$this->error->vested++;}}else if ($c == 4) {
$ruleOut4 = $this->_($input, $charPos);
if ($ruleOut4->hadError) {
$this->giveError($ruleOut4->error->code, "White space(optional)(" . $ruleOut4->error->expected . ")", $ruleOut4->error->found);}else{
$ruleOutCast4 = _c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$c = 5;}}else if ($c == 5) {
if ($currentCode == 93) {
if (true) {
$castac0 = &$data;
$actionCap0exp = &_c_lib__mapUtils::readIndex($data, "exp");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "index";
_c_lib__mapUtils::readIndex($dataStore, "data")["expression"] = $actionCap0exp;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "]", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Appendix_Code(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
$ruleOut1 = $this->Block($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "Block(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["code"] = $ruleOutCast1;
if (true) {
$castaccode0 = &_c_lib__mapUtils::readIndex($data, "code");
$actionCap0code = &_c_lib__mapUtils::readIndex($data, "code");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "code";
_c_lib__mapUtils::readIndex($dataStore, "data")["code"] = $actionCap0code;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Appendix(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->Appendix_Dot($input, $charPos);
if ($ruleOut0->hadError) {
$c = 1;
$charPos--;
$this->offset--;}else{
$ruleOutCast0 = &_c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["a"] = $ruleOutCast0;
if (true) {
$castaca0 = &_c_lib__mapUtils::readIndex($data, "a");
$actionCap0a = &_c_lib__mapUtils::readIndex($data, "a");
$dataStore["data"] = $actionCap0a;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 1) {
$ruleOut1 = $this->Appendix_Call($input, $charPos);
if ($ruleOut1->hadError) {
$c = 2;
$charPos--;
$this->offset--;}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["a"] = $ruleOutCast1;
if (true) {
$castaca0 = &_c_lib__mapUtils::readIndex($data, "a");
$actionCap0a = &_c_lib__mapUtils::readIndex($data, "a");
$dataStore["data"] = $actionCap0a;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->Appendix_Index($input, $charPos);
if ($ruleOut2->hadError) {
$c = 3;
$charPos--;
$this->offset--;}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["a"] = $ruleOutCast2;
if (true) {
$castaca0 = &_c_lib__mapUtils::readIndex($data, "a");
$actionCap0a = &_c_lib__mapUtils::readIndex($data, "a");
$dataStore["data"] = $actionCap0a;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->Appendix_Code($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError(1, "Appendix_Dot, Appendix_Call, Appendix_Index, Appendix_Code", $currentChar);}else{
$ruleOutCast3 = &_c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$data["a"] = $ruleOutCast3;
if (true) {
$castaca0 = &_c_lib__mapUtils::readIndex($data, "a");
$actionCap0a = &_c_lib__mapUtils::readIndex($data, "a");
$dataStore["data"] = $actionCap0a;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Term(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["prefix"] = "";
$data["appendix"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$passed0 = false;
if ($currentCode == 33) {
$passed0 = true;}else if ($currentCode == 64) {
$passed0 = true;}else if ($currentCode == 35) {
$passed0 = true;}else if ($currentCode == 58) {
$passed0 = true;}else if ($currentCode == 36) {
$passed0 = true;}else if ($currentCode == 37) {
$passed0 = true;}else if ($currentCode == 94) {
$passed0 = true;}else if ($currentCode == 38) {
$passed0 = true;}else if ($currentCode == 42) {
$passed0 = true;}else if ($currentCode == 95) {
$passed0 = true;}else if ($currentCode == 43) {
$passed0 = true;}else if ($currentCode == 61) {
$passed0 = true;}else if ($currentCode == 126) {
$passed0 = true;}else if ($currentCode == 96) {
$passed0 = true;}else if ($currentCode == 62) {
$passed0 = true;}else if ($currentCode == 124) {
$passed0 = true;}else if ($currentCode == 47) {
$passed0 = true;}else if ($currentCode == 45) {
$passed0 = true;}
if ($passed0 == false) {
}
if ($passed0) {
$data["prefix"] .= $currentChar;
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 0;
$this->error->vested++;}else{
$c = 1;
$charPos--;
$this->offset--;}}else if ($c == 1) {
$ruleOut1 = $this->Template($input, $charPos);
if ($ruleOut1->hadError) {
$c = 2;
$charPos--;
$this->offset--;}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["template"] = $ruleOutCast1;
$c = 2;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->Anonymous_Function($input, $charPos);
if ($ruleOut2->hadError) {
$c = 3;
$charPos--;
$this->offset--;}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["e"] = $ruleOutCast2;
$c = 7;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->Literal($input, $charPos);
if ($ruleOut3->hadError) {
$c = 4;
$charPos--;
$this->offset--;}else{
$ruleOutCast3 = &_c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$data["e"] = $ruleOutCast3;
$c = 7;
$this->error->vested++;}}else if ($c == 4) {
$ruleOut4 = $this->Prefix($input, $charPos);
if ($ruleOut4->hadError) {
$c = 5;
$charPos--;
$this->offset--;}else{
$ruleOutCast4 = &_c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$data["e"] = $ruleOutCast4;
$c = 7;
$this->error->vested++;}}else if ($c == 5) {
$ruleOut5 = $this->Constant($input, $charPos);
if ($ruleOut5->hadError) {
$c = 6;
$charPos--;
$this->offset--;}else{
$ruleOutCast5 = &_c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$data["e"] = $ruleOutCast5;
$c = 7;
$this->error->vested++;}}else if ($c == 6) {
$ruleOut6 = $this->Group($input, $charPos);
if ($ruleOut6->hadError) {
$this->giveError(1, "Anonymous_Function, Literal, Prefix, Constant, Group", $currentChar);}else{
$ruleOutCast6 = &_c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$data["e"] = $ruleOutCast6;
$c = 7;
$this->error->vested++;}}else if ($c == 7) {
$ruleOut7 = $this->Appendix($input, $charPos);
if ($ruleOut7->hadError) {
if (true) {
$castacappendix0 = &_c_lib__mapUtils::readIndex($data, "appendix");
$actionCap0e = &_c_lib__mapUtils::readIndex($data, "e");
$actionCap0appendix = &_c_lib__mapUtils::readIndex($data, "appendix");
$actionCap0template = &_c_lib__mapUtils::readIndex($data, "template");
$actionCap0prefix = _c_lib__mapUtils::readIndex($data, "prefix");
$dataStore["data"] = $actionCap0e;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["appendix"] = $actionCap0appendix;
if ($actionCap0template != null) {
_c_lib__mapUtils::readIndex($dataStore, "data")["template"] = $actionCap0template;}
if (strlen($actionCap0prefix) > 0) {
_c_lib__mapUtils::readIndex($dataStore, "data")["prefix"] = $actionCap0prefix;}}
$c = 0 - 1;
$charPos--;
$this->offset--;
if ($ruleOut7->error->vested > 1) {
$this->giveError($ruleOut7->error->code, $ruleOut7->error->expected, $ruleOut7->error->found);}}else{
$ruleOutCast7 = &_c_lib__mapUtils::readIndex($ruleOut7->data, "data");
$charPos = $this->offset;
$castappendix7 = &_c_lib__mapUtils::readIndex($data, "appendix");
array_push($castappendix7, $ruleOutCast7);
if (true) {
$castacappendix0 = &_c_lib__mapUtils::readIndex($data, "appendix");
$actionCap0e = &_c_lib__mapUtils::readIndex($data, "e");
$actionCap0appendix = &_c_lib__mapUtils::readIndex($data, "appendix");
$actionCap0template = &_c_lib__mapUtils::readIndex($data, "template");
$actionCap0prefix = _c_lib__mapUtils::readIndex($data, "prefix");
$dataStore["data"] = $actionCap0e;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["appendix"] = $actionCap0appendix;
if ($actionCap0template != null) {
_c_lib__mapUtils::readIndex($dataStore, "data")["template"] = $actionCap0template;}
if (strlen($actionCap0prefix) > 0) {
_c_lib__mapUtils::readIndex($dataStore, "data")["prefix"] = $actionCap0prefix;}}
$c = 7;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Operand_Symbolic(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["operator"] = "";
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
$passed1 = false;
if ($currentCode == 33) {
$passed1 = true;}else if ($currentCode == 64) {
$passed1 = true;}else if ($currentCode == 58) {
$passed1 = true;}else if ($currentCode == 36) {
$passed1 = true;}else if ($currentCode == 37) {
$passed1 = true;}else if ($currentCode == 94) {
$passed1 = true;}else if ($currentCode == 38) {
$passed1 = true;}else if ($currentCode == 42) {
$passed1 = true;}else if ($currentCode == 95) {
$passed1 = true;}else if ($currentCode == 43) {
$passed1 = true;}else if ($currentCode == 61) {
$passed1 = true;}else if ($currentCode == 126) {
$passed1 = true;}else if ($currentCode == 96) {
$passed1 = true;}else if ($currentCode == 124) {
$passed1 = true;}else if ($currentCode == 62) {
$passed1 = true;}else if ($currentCode == 47) {
$passed1 = true;}else if ($currentCode == 60) {
$passed1 = true;}else if ($currentCode == 45) {
$passed1 = true;}
if ($passed1 == false) {
}
if ($passed1) {
$data["operator"] .= $currentChar;
$c = 1;
$this->error->vested++;}else{
$castoperator1 = $data["operator"];
if (strlen($castoperator1) >= 1) {
$c = 2;
$charPos--;
$this->offset--;}else{
$this->giveError(1, "!, @, :, \$, %, ^, &, *, _, +, =, ~, `, |, >, /, <, -", $currentChar);}}}else if ($c == 2) {
$ruleOut2 = $this->_($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "White space(optional)(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
if (true) {
$castac0 = $data;
$actionCap0operator = $data["operator"];
$dataStore["data"] = $actionCap0operator;}
$c = 0 - 1;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Operand_Word(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["operator"] = "";
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->__($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
$passed1 = false;
if ($currentCode == 95) {
$passed1 = true;}else if ($currentCode == 33) {
$passed1 = true;}else if ($currentCode == 64) {
$passed1 = true;}else if ($currentCode == 35) {
$passed1 = true;}else if ($currentCode == 36) {
$passed1 = true;}else if ($currentCode == 37) {
$passed1 = true;}else if ($currentCode == 94) {
$passed1 = true;}else if ($currentCode == 38) {
$passed1 = true;}else if ($currentCode == 42) {
$passed1 = true;}else if ($currentCode == 95) {
$passed1 = true;}else if ($currentCode == 43) {
$passed1 = true;}else if ($currentCode == 61) {
$passed1 = true;}else if ($currentCode == 126) {
$passed1 = true;}else if ($currentCode == 96) {
$passed1 = true;}else if ($currentCode == 124) {
$passed1 = true;}else if ($currentCode == 62) {
$passed1 = true;}else if ($currentCode == 60) {
$passed1 = true;}else if ($currentCode == 47) {
$passed1 = true;}else if ($currentCode == 45) {
$passed1 = true;}
if ($passed1 == false) {
if ($currentCode >= 65 and $currentCode <= 90) {
$passed1 = true;}else if ($currentCode >= 97 and $currentCode <= 122) {
$passed1 = true;}else if ($currentCode >= 48 and $currentCode <= 57) {
$passed1 = true;}}
if ($passed1) {
$data["operator"] .= $currentChar;
$c = 1;
$this->error->vested++;}else{
$castoperator1 = $data["operator"];
if (strlen($castoperator1) >= 1) {
$c = 2;
$charPos--;
$this->offset--;}else{
$this->giveError(1, "A-Z, a-z, 0-9, _, !, @, #, \$, %, ^, &, *, _, +, =, ~, `, |, >, <, /, -", $currentChar);}}}else if ($c == 2) {
$ruleOut2 = $this->__($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "White space(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
if (true) {
$castac0 = $data;
$actionCap0operator = $data["operator"];
$dataStore["data"] = $actionCap0operator;}
$c = 0 - 1;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Operation(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->Term($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "Term(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = &_c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["head"] = $ruleOutCast0;
$c = 1;
$this->error->vested++;}}else if ($c == 1) {
$ruleOut1 = $this->Operand_Symbolic($input, $charPos);
if ($ruleOut1->hadError) {
$c = 2;
$charPos--;
$this->offset--;}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["operator"] = $ruleOutCast1;
if (true) {
$castacoperator0 = &_c_lib__mapUtils::readIndex($data, "operator");
$actionCap0operator = &_c_lib__mapUtils::readIndex($data, "operator");
$actionCap0head = &_c_lib__mapUtils::readIndex($data, "head");
_c_lib__mapUtils::readIndex($dataStore, "data")["operator"] = $actionCap0operator;
_c_lib__mapUtils::readIndex($dataStore, "data")["term"] = $actionCap0head;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->Operand_Word($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError(1, "Operand_Symbolic, Operand_Word", $currentChar);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["operator"] = $ruleOutCast2;
if (true) {
$castacoperator0 = &_c_lib__mapUtils::readIndex($data, "operator");
$actionCap0operator = &_c_lib__mapUtils::readIndex($data, "operator");
$actionCap0head = &_c_lib__mapUtils::readIndex($data, "head");
_c_lib__mapUtils::readIndex($dataStore, "data")["operator"] = $actionCap0operator;
_c_lib__mapUtils::readIndex($dataStore, "data")["term"] = $actionCap0head;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Anonymous_Function(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["parameters"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->Type($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "Type(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = &_c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["type"] = $ruleOutCast0;
$c = 1;
$this->error->vested++;}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
if ($currentCode == 40) {
$c = 3;
$this->error->vested++;}else{
$this->giveError(1, "(", $currentChar);}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
$ruleOut4 = $this->Parameter($input, $charPos);
if ($ruleOut4->hadError) {
$c = 5;
$charPos--;
$this->offset--;
if ($ruleOut4->error->vested > 1) {
$this->giveError($ruleOut4->error->code, $ruleOut4->error->expected, $ruleOut4->error->found);}}else{
$ruleOutCast4 = &_c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$castparameters4 = &_c_lib__mapUtils::readIndex($data, "parameters");
array_push($castparameters4, $ruleOutCast4);
if (ord($input[$charPos + 1]) != 44) {
$c = 5;
continue;}else{
$charPos++;}
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 4;
$this->error->vested++;}}else if ($c == 5) {
$ruleOut5 = $this->_($input, $charPos);
if ($ruleOut5->hadError) {
$this->giveError($ruleOut5->error->code, "White space(optional)(" . $ruleOut5->error->expected . ")", $ruleOut5->error->found);}else{
$ruleOutCast5 = _c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$c = 6;}}else if ($c == 6) {
if ($currentCode == 41) {
$c = 7;
$this->error->vested++;}else{
$this->giveError(1, ")", $currentChar);}}else if ($c == 7) {
$ruleOut7 = $this->_($input, $charPos);
if ($ruleOut7->hadError) {
$this->giveError($ruleOut7->error->code, "White space(optional)(" . $ruleOut7->error->expected . ")", $ruleOut7->error->found);}else{
$ruleOutCast7 = _c_lib__mapUtils::readIndex($ruleOut7->data, "data");
$charPos = $this->offset;
$c = 8;}}else if ($c == 8) {
$lit8 = [61, 62];
if ($currentCode == _c_lib__arrUtils::readIndex($lit8, $literalChar)) {
$literalChar++;
if ($literalChar == 2) {
$c = 9;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit8) . "", $currentChar);}}else if ($c == 9) {
$ruleOut9 = $this->_($input, $charPos);
if ($ruleOut9->hadError) {
$this->giveError($ruleOut9->error->code, "White space(optional)(" . $ruleOut9->error->expected . ")", $ruleOut9->error->found);}else{
$ruleOutCast9 = _c_lib__mapUtils::readIndex($ruleOut9->data, "data");
$charPos = $this->offset;
$c = 10;}}else if ($c == 10) {
$ruleOut10 = $this->Block($input, $charPos);
if ($ruleOut10->hadError) {
$this->giveError($ruleOut10->error->code, "Block(" . $ruleOut10->error->expected . ")", $ruleOut10->error->found);}else{
$ruleOutCast10 = &_c_lib__mapUtils::readIndex($ruleOut10->data, "data");
$charPos = $this->offset;
$data["body"] = $ruleOutCast10;
if (true) {
$castacbody0 = &_c_lib__mapUtils::readIndex($data, "body");
$actionCap0type = &_c_lib__mapUtils::readIndex($data, "type");
$actionCap0parameters = &_c_lib__mapUtils::readIndex($data, "parameters");
$actionCap0body = &_c_lib__mapUtils::readIndex($data, "body");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "function";
_c_lib__mapUtils::readIndex($dataStore, "data")["output"] = $actionCap0type;
_c_lib__mapUtils::readIndex($dataStore, "data")["parameters"] = $actionCap0parameters;
_c_lib__mapUtils::readIndex($dataStore, "data")["body"] = $actionCap0body;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Expression(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
$ruleOut1 = $this->Expression_Operation($input, $charPos);
if ($ruleOut1->hadError) {
$c = 2;
$charPos--;
$this->offset--;}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast1;
if (true) {
$castacexp0 = &_c_lib__mapUtils::readIndex($data, "exp");
$actionCap0exp = &_c_lib__mapUtils::readIndex($data, "exp");
$dataStore["data"] = $actionCap0exp;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->Expression_Operated($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError(1, "Expression_Operation, Expression_Operated", $currentChar);}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast2;
if (true) {
$castacexp0 = &_c_lib__mapUtils::readIndex($data, "exp");
$actionCap0exp = &_c_lib__mapUtils::readIndex($data, "exp");
$dataStore["data"] = $actionCap0exp;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Expression_Line(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->Expression($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "Expression(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = &_c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast0;
$c = 1;
$this->error->vested++;}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
if ($currentCode == 59) {
if (true) {
$castac0 = &$data;
$actionCap0exp = &_c_lib__mapUtils::readIndex($data, "exp");
$dataStore["data"] = $actionCap0exp;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, ";", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Expression_Operation(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["exp"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->Operation($input, $charPos);
if ($ruleOut0->hadError) {
$c = 1;
$charPos--;
$this->offset--;
if ($ruleOut0->error->vested > 1) {
$this->giveError($ruleOut0->error->code, $ruleOut0->error->expected, $ruleOut0->error->found);}}else{
$ruleOutCast0 = &_c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$castexp0 = &_c_lib__mapUtils::readIndex($data, "exp");
array_push($castexp0, $ruleOutCast0);
$c = 0;
$this->error->vested++;}}else if ($c == 1) {
$ruleOut1 = $this->Term($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "Term(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["t"] = $ruleOutCast1;
if (true) {
$castact0 = &_c_lib__mapUtils::readIndex($data, "t");
$actionCap0exp = &_c_lib__mapUtils::readIndex($data, "exp");
$actionCap0t = &_c_lib__mapUtils::readIndex($data, "t");
array_push($actionCap0exp, $actionCap0t);
_c_lib__mapUtils::readIndex($dataStore, "data")["terms"] = $actionCap0exp;
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "expression";}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Expression_Operated(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["exp"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->Operation($input, $charPos);
if ($ruleOut0->hadError) {
$castexp0 = &_c_lib__mapUtils::readIndex($data, "exp");
if (count($castexp0) >= 1) {
if (true) {
$castacexp0 = &_c_lib__mapUtils::readIndex($data, "exp");
$actionCap0exp = &_c_lib__mapUtils::readIndex($data, "exp");
_c_lib__mapUtils::readIndex($dataStore, "data")["terms"] = $actionCap0exp;
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "expression";}
$c = 0 - 1;
$charPos--;
$this->offset--;}else{
$this->giveError(1, "Operation", $currentChar);}}else{
$ruleOutCast0 = &_c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$castexp0 = &_c_lib__mapUtils::readIndex($data, "exp");
array_push($castexp0, $ruleOutCast0);
if (true) {
$castacexp0 = &_c_lib__mapUtils::readIndex($data, "exp");
$actionCap0exp = &_c_lib__mapUtils::readIndex($data, "exp");
_c_lib__mapUtils::readIndex($dataStore, "data")["terms"] = $actionCap0exp;
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "expression";}
$c = 0;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Block(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["code"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 123) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "{", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Statement($input, $charPos);
if ($ruleOut2->hadError) {
$c = 3;
$charPos--;
$this->offset--;
if ($ruleOut2->error->vested > 1) {
$this->giveError($ruleOut2->error->code, $ruleOut2->error->expected, $ruleOut2->error->found);}}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$castcode2 = &_c_lib__mapUtils::readIndex($data, "code");
array_push($castcode2, $ruleOutCast2);
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 2;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
if ($currentCode == 125) {
if (true) {
$castac0 = &$data;
$actionCap0code = &_c_lib__mapUtils::readIndex($data, "code");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "block";
_c_lib__mapUtils::readIndex($dataStore, "data")["code"] = $actionCap0code;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "}", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Statement(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
$ruleOut1 = $this->_c__If($input, $charPos);
if ($ruleOut1->hadError) {
$c = 2;
$charPos--;
$this->offset--;}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["state"] = $ruleOutCast1;
if (true) {
$castacstate0 = &_c_lib__mapUtils::readIndex($data, "state");
$actionCap0state = &_c_lib__mapUtils::readIndex($data, "state");
$dataStore["data"] = $actionCap0state;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->Define($input, $charPos);
if ($ruleOut2->hadError) {
$c = 3;
$charPos--;
$this->offset--;}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["state"] = $ruleOutCast2;
if (true) {
$castacstate0 = &_c_lib__mapUtils::readIndex($data, "state");
$actionCap0state = &_c_lib__mapUtils::readIndex($data, "state");
$dataStore["data"] = $actionCap0state;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->Define_Auto($input, $charPos);
if ($ruleOut3->hadError) {
$c = 4;
$charPos--;
$this->offset--;}else{
$ruleOutCast3 = &_c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$data["state"] = $ruleOutCast3;
if (true) {
$castacstate0 = &_c_lib__mapUtils::readIndex($data, "state");
$actionCap0state = &_c_lib__mapUtils::readIndex($data, "state");
$dataStore["data"] = $actionCap0state;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 4) {
$ruleOut4 = $this->_c__For($input, $charPos);
if ($ruleOut4->hadError) {
$c = 5;
$charPos--;
$this->offset--;}else{
$ruleOutCast4 = &_c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$data["state"] = $ruleOutCast4;
if (true) {
$castacstate0 = &_c_lib__mapUtils::readIndex($data, "state");
$actionCap0state = &_c_lib__mapUtils::readIndex($data, "state");
$dataStore["data"] = $actionCap0state;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 5) {
$ruleOut5 = $this->For_In($input, $charPos);
if ($ruleOut5->hadError) {
$c = 6;
$charPos--;
$this->offset--;}else{
$ruleOutCast5 = &_c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$data["state"] = $ruleOutCast5;
if (true) {
$castacstate0 = &_c_lib__mapUtils::readIndex($data, "state");
$actionCap0state = &_c_lib__mapUtils::readIndex($data, "state");
$dataStore["data"] = $actionCap0state;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 6) {
$ruleOut6 = $this->_c__Break($input, $charPos);
if ($ruleOut6->hadError) {
$c = 7;
$charPos--;
$this->offset--;}else{
$ruleOutCast6 = &_c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$data["state"] = $ruleOutCast6;
if (true) {
$castacstate0 = &_c_lib__mapUtils::readIndex($data, "state");
$actionCap0state = &_c_lib__mapUtils::readIndex($data, "state");
$dataStore["data"] = $actionCap0state;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 7) {
$ruleOut7 = $this->_c__Try($input, $charPos);
if ($ruleOut7->hadError) {
$c = 8;
$charPos--;
$this->offset--;}else{
$ruleOutCast7 = &_c_lib__mapUtils::readIndex($ruleOut7->data, "data");
$charPos = $this->offset;
$data["state"] = $ruleOutCast7;
if (true) {
$castacstate0 = &_c_lib__mapUtils::readIndex($data, "state");
$actionCap0state = &_c_lib__mapUtils::readIndex($data, "state");
$dataStore["data"] = $actionCap0state;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 8) {
$ruleOut8 = $this->_c__Throw($input, $charPos);
if ($ruleOut8->hadError) {
$c = 9;
$charPos--;
$this->offset--;}else{
$ruleOutCast8 = &_c_lib__mapUtils::readIndex($ruleOut8->data, "data");
$charPos = $this->offset;
$data["state"] = $ruleOutCast8;
if (true) {
$castacstate0 = &_c_lib__mapUtils::readIndex($data, "state");
$actionCap0state = &_c_lib__mapUtils::readIndex($data, "state");
$dataStore["data"] = $actionCap0state;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 9) {
$ruleOut9 = $this->_c__Continue($input, $charPos);
if ($ruleOut9->hadError) {
$c = 10;
$charPos--;
$this->offset--;}else{
$ruleOutCast9 = &_c_lib__mapUtils::readIndex($ruleOut9->data, "data");
$charPos = $this->offset;
$data["state"] = $ruleOutCast9;
if (true) {
$castacstate0 = &_c_lib__mapUtils::readIndex($data, "state");
$actionCap0state = &_c_lib__mapUtils::readIndex($data, "state");
$dataStore["data"] = $actionCap0state;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 10) {
$ruleOut10 = $this->_c__While($input, $charPos);
if ($ruleOut10->hadError) {
$c = 11;
$charPos--;
$this->offset--;}else{
$ruleOutCast10 = &_c_lib__mapUtils::readIndex($ruleOut10->data, "data");
$charPos = $this->offset;
$data["state"] = $ruleOutCast10;
if (true) {
$castacstate0 = &_c_lib__mapUtils::readIndex($data, "state");
$actionCap0state = &_c_lib__mapUtils::readIndex($data, "state");
$dataStore["data"] = $actionCap0state;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 11) {
$ruleOut11 = $this->_c__Return($input, $charPos);
if ($ruleOut11->hadError) {
$c = 12;
$charPos--;
$this->offset--;}else{
$ruleOutCast11 = &_c_lib__mapUtils::readIndex($ruleOut11->data, "data");
$charPos = $this->offset;
$data["state"] = $ruleOutCast11;
if (true) {
$castacstate0 = &_c_lib__mapUtils::readIndex($data, "state");
$actionCap0state = &_c_lib__mapUtils::readIndex($data, "state");
$dataStore["data"] = $actionCap0state;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 12) {
$ruleOut12 = $this->Native($input, $charPos);
if ($ruleOut12->hadError) {
$c = 13;
$charPos--;
$this->offset--;}else{
$ruleOutCast12 = &_c_lib__mapUtils::readIndex($ruleOut12->data, "data");
$charPos = $this->offset;
$data["state"] = $ruleOutCast12;
if (true) {
$castacstate0 = &_c_lib__mapUtils::readIndex($data, "state");
$actionCap0state = &_c_lib__mapUtils::readIndex($data, "state");
$dataStore["data"] = $actionCap0state;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 13) {
$ruleOut13 = $this->Expression_Line($input, $charPos);
if ($ruleOut13->hadError) {
$this->giveError(1, "If, Define, Define_Auto, For, For_In, Break, Try, Throw, Continue, While, Return, Native, Expression_Line", $currentChar);}else{
$ruleOutCast13 = &_c_lib__mapUtils::readIndex($ruleOut13->data, "data");
$charPos = $this->offset;
$data["state"] = $ruleOutCast13;
if (true) {
$castacstate0 = &_c_lib__mapUtils::readIndex($data, "state");
$actionCap0state = &_c_lib__mapUtils::readIndex($data, "state");
$dataStore["data"] = $actionCap0state;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Single_Statement(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->Statement($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "Statement(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = &_c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["state"] = $ruleOutCast0;
if (true) {
$castacstate0 = &_c_lib__mapUtils::readIndex($data, "state");
$actionCap0state = &_c_lib__mapUtils::readIndex($data, "state");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "block";
_c_lib__mapUtils::readIndex($dataStore, "data")["code"] = [$actionCap0state];
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function _c__If(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["alt"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [105, 102];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 2) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Group($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "Group(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["check"] = $ruleOutCast2;
$c = 3;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
$ruleOut4 = $this->Block($input, $charPos);
if ($ruleOut4->hadError) {
$c = 5;
$charPos--;
$this->offset--;}else{
$ruleOutCast4 = &_c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$data["body"] = $ruleOutCast4;
$c = 6;
$this->error->vested++;}}else if ($c == 5) {
$ruleOut5 = $this->Single_Statement($input, $charPos);
if ($ruleOut5->hadError) {
$this->giveError(1, "Block, Single_Statement", $currentChar);}else{
$ruleOutCast5 = &_c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$data["body"] = $ruleOutCast5;
$c = 6;
$this->error->vested++;}}else if ($c == 6) {
$ruleOut6 = $this->_($input, $charPos);
if ($ruleOut6->hadError) {
$this->giveError($ruleOut6->error->code, "White space(optional)(" . $ruleOut6->error->expected . ")", $ruleOut6->error->found);}else{
$ruleOutCast6 = _c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$c = 7;}}else if ($c == 7) {
$ruleOut7 = $this->_c__ElseIf($input, $charPos);
if ($ruleOut7->hadError) {
$c = 8;
$charPos--;
$this->offset--;}else{
$ruleOutCast7 = &_c_lib__mapUtils::readIndex($ruleOut7->data, "data");
$charPos = $this->offset;
$castalt7 = &_c_lib__mapUtils::readIndex($data, "alt");
array_push($castalt7, $ruleOutCast7);
if (true) {
$castacalt0 = &_c_lib__mapUtils::readIndex($data, "alt");
$actionCap0alt = &_c_lib__mapUtils::readIndex($data, "alt");
$actionCap0check = &_c_lib__mapUtils::readIndex($data, "check");
$actionCap0body = &_c_lib__mapUtils::readIndex($data, "body");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "if";
_c_lib__mapUtils::readIndex($dataStore, "data")["alternatives"] = $actionCap0alt;
_c_lib__mapUtils::readIndex($dataStore, "data")["check"] = $actionCap0check;
_c_lib__mapUtils::readIndex($dataStore, "data")["body"] = $actionCap0body;}
$c = 7;
$this->error->vested++;}}else if ($c == 8) {
$ruleOut8 = $this->_c__Else($input, $charPos);
if ($ruleOut8->hadError) {
if (true) {
$castacalt0 = &_c_lib__mapUtils::readIndex($data, "alt");
$actionCap0alt = &_c_lib__mapUtils::readIndex($data, "alt");
$actionCap0check = &_c_lib__mapUtils::readIndex($data, "check");
$actionCap0body = &_c_lib__mapUtils::readIndex($data, "body");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "if";
_c_lib__mapUtils::readIndex($dataStore, "data")["alternatives"] = $actionCap0alt;
_c_lib__mapUtils::readIndex($dataStore, "data")["check"] = $actionCap0check;
_c_lib__mapUtils::readIndex($dataStore, "data")["body"] = $actionCap0body;}
$c = 0 - 1;
$charPos--;
$this->offset--;}else{
$ruleOutCast8 = &_c_lib__mapUtils::readIndex($ruleOut8->data, "data");
$charPos = $this->offset;
$castalt7 = &_c_lib__mapUtils::readIndex($data, "alt");
array_push($castalt7, $ruleOutCast8);
if (true) {
$castacalt0 = &_c_lib__mapUtils::readIndex($data, "alt");
$actionCap0alt = &_c_lib__mapUtils::readIndex($data, "alt");
$actionCap0check = &_c_lib__mapUtils::readIndex($data, "check");
$actionCap0body = &_c_lib__mapUtils::readIndex($data, "body");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "if";
_c_lib__mapUtils::readIndex($dataStore, "data")["alternatives"] = $actionCap0alt;
_c_lib__mapUtils::readIndex($dataStore, "data")["check"] = $actionCap0check;
_c_lib__mapUtils::readIndex($dataStore, "data")["body"] = $actionCap0body;}
$c = 7;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function _c__ElseIf(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [101, 108, 115, 101, 32, 105, 102];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 7) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Group($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "Group(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["check"] = $ruleOutCast2;
$c = 3;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
$ruleOut4 = $this->Block($input, $charPos);
if ($ruleOut4->hadError) {
$c = 5;
$charPos--;
$this->offset--;}else{
$ruleOutCast4 = &_c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$data["body"] = $ruleOutCast4;
if (true) {
$castacbody0 = &_c_lib__mapUtils::readIndex($data, "body");
$actionCap0check = &_c_lib__mapUtils::readIndex($data, "check");
$actionCap0body = &_c_lib__mapUtils::readIndex($data, "body");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "elseif";
_c_lib__mapUtils::readIndex($dataStore, "data")["check"] = $actionCap0check;
_c_lib__mapUtils::readIndex($dataStore, "data")["body"] = $actionCap0body;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 5) {
$ruleOut5 = $this->Single_Statement($input, $charPos);
if ($ruleOut5->hadError) {
$this->giveError(1, "Block, Single_Statement", $currentChar);}else{
$ruleOutCast5 = &_c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$data["body"] = $ruleOutCast5;
if (true) {
$castacbody0 = &_c_lib__mapUtils::readIndex($data, "body");
$actionCap0check = &_c_lib__mapUtils::readIndex($data, "check");
$actionCap0body = &_c_lib__mapUtils::readIndex($data, "body");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "elseif";
_c_lib__mapUtils::readIndex($dataStore, "data")["check"] = $actionCap0check;
_c_lib__mapUtils::readIndex($dataStore, "data")["body"] = $actionCap0body;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function _c__Else(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [101, 108, 115, 101];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 4) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Block($input, $charPos);
if ($ruleOut2->hadError) {
$c = 3;
$charPos--;
$this->offset--;}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["body"] = $ruleOutCast2;
if (true) {
$castacbody0 = &_c_lib__mapUtils::readIndex($data, "body");
$actionCap0body = &_c_lib__mapUtils::readIndex($data, "body");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "else";
_c_lib__mapUtils::readIndex($dataStore, "data")["body"] = $actionCap0body;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->Single_Statement($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError(1, "Block, Single_Statement", $currentChar);}else{
$ruleOutCast3 = &_c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$data["body"] = $ruleOutCast3;
if (true) {
$castacbody0 = &_c_lib__mapUtils::readIndex($data, "body");
$actionCap0body = &_c_lib__mapUtils::readIndex($data, "body");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "else";
_c_lib__mapUtils::readIndex($dataStore, "data")["body"] = $actionCap0body;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function _c__For(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [102, 111, 114];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 3) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
if ($currentCode == 40) {
$c = 3;
$this->error->vested++;}else{
$this->giveError(1, "(", $currentChar);}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
$ruleOut4 = $this->Define($input, $charPos);
if ($ruleOut4->hadError) {
$c = 5;
$charPos--;
$this->offset--;}else{
$ruleOutCast4 = &_c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$data["define"] = $ruleOutCast4;
$c = 6;
$this->error->vested++;}}else if ($c == 5) {
$ruleOut5 = $this->Define_Auto($input, $charPos);
if ($ruleOut5->hadError) {
$this->giveError(1, "Define, Define_Auto", $currentChar);}else{
$ruleOutCast5 = &_c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$data["define"] = $ruleOutCast5;
$c = 6;
$this->error->vested++;}}else if ($c == 6) {
$ruleOut6 = $this->_($input, $charPos);
if ($ruleOut6->hadError) {
$this->giveError($ruleOut6->error->code, "White space(optional)(" . $ruleOut6->error->expected . ")", $ruleOut6->error->found);}else{
$ruleOutCast6 = _c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$c = 7;}}else if ($c == 7) {
$ruleOut7 = $this->Expression($input, $charPos);
if ($ruleOut7->hadError) {
$this->giveError($ruleOut7->error->code, "Expression(" . $ruleOut7->error->expected . ")", $ruleOut7->error->found);}else{
$ruleOutCast7 = &_c_lib__mapUtils::readIndex($ruleOut7->data, "data");
$charPos = $this->offset;
$data["check"] = $ruleOutCast7;
$c = 8;
$this->error->vested++;}}else if ($c == 8) {
if ($currentCode == 59) {
$c = 9;
$this->error->vested++;}else{
$this->giveError(1, ";", $currentChar);}}else if ($c == 9) {
$ruleOut9 = $this->_($input, $charPos);
if ($ruleOut9->hadError) {
$this->giveError($ruleOut9->error->code, "White space(optional)(" . $ruleOut9->error->expected . ")", $ruleOut9->error->found);}else{
$ruleOutCast9 = _c_lib__mapUtils::readIndex($ruleOut9->data, "data");
$charPos = $this->offset;
$c = 10;}}else if ($c == 10) {
$ruleOut10 = $this->Expression($input, $charPos);
if ($ruleOut10->hadError) {
$this->giveError($ruleOut10->error->code, "Expression(" . $ruleOut10->error->expected . ")", $ruleOut10->error->found);}else{
$ruleOutCast10 = &_c_lib__mapUtils::readIndex($ruleOut10->data, "data");
$charPos = $this->offset;
$data["iterate"] = $ruleOutCast10;
$c = 11;
$this->error->vested++;}}else if ($c == 11) {
if ($currentCode == 41) {
$c = 12;
$this->error->vested++;}else{
$this->giveError(1, ")", $currentChar);}}else if ($c == 12) {
$ruleOut12 = $this->_($input, $charPos);
if ($ruleOut12->hadError) {
$this->giveError($ruleOut12->error->code, "White space(optional)(" . $ruleOut12->error->expected . ")", $ruleOut12->error->found);}else{
$ruleOutCast12 = _c_lib__mapUtils::readIndex($ruleOut12->data, "data");
$charPos = $this->offset;
$c = 13;}}else if ($c == 13) {
$ruleOut13 = $this->Block($input, $charPos);
if ($ruleOut13->hadError) {
$c = 14;
$charPos--;
$this->offset--;}else{
$ruleOutCast13 = &_c_lib__mapUtils::readIndex($ruleOut13->data, "data");
$charPos = $this->offset;
$data["body"] = $ruleOutCast13;
if (true) {
$castacbody0 = &_c_lib__mapUtils::readIndex($data, "body");
$actionCap0define = &_c_lib__mapUtils::readIndex($data, "define");
$actionCap0iterate = &_c_lib__mapUtils::readIndex($data, "iterate");
$actionCap0check = &_c_lib__mapUtils::readIndex($data, "check");
$actionCap0body = &_c_lib__mapUtils::readIndex($data, "body");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "for";
_c_lib__mapUtils::readIndex($dataStore, "data")["define"] = $actionCap0define;
_c_lib__mapUtils::readIndex($dataStore, "data")["iterate"] = $actionCap0iterate;
_c_lib__mapUtils::readIndex($dataStore, "data")["check"] = $actionCap0check;
_c_lib__mapUtils::readIndex($dataStore, "data")["body"] = $actionCap0body;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 14) {
$ruleOut14 = $this->Single_Statement($input, $charPos);
if ($ruleOut14->hadError) {
$this->giveError(1, "Block, Single_Statement", $currentChar);}else{
$ruleOutCast14 = &_c_lib__mapUtils::readIndex($ruleOut14->data, "data");
$charPos = $this->offset;
$data["body"] = $ruleOutCast14;
if (true) {
$castacbody0 = &_c_lib__mapUtils::readIndex($data, "body");
$actionCap0define = &_c_lib__mapUtils::readIndex($data, "define");
$actionCap0iterate = &_c_lib__mapUtils::readIndex($data, "iterate");
$actionCap0check = &_c_lib__mapUtils::readIndex($data, "check");
$actionCap0body = &_c_lib__mapUtils::readIndex($data, "body");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "for";
_c_lib__mapUtils::readIndex($dataStore, "data")["define"] = $actionCap0define;
_c_lib__mapUtils::readIndex($dataStore, "data")["iterate"] = $actionCap0iterate;
_c_lib__mapUtils::readIndex($dataStore, "data")["check"] = $actionCap0check;
_c_lib__mapUtils::readIndex($dataStore, "data")["body"] = $actionCap0body;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function For_In(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [102, 111, 114];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 3) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
if ($currentCode == 40) {
$c = 3;
$this->error->vested++;}else{
$this->giveError(1, "(", $currentChar);}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
$ruleOut4 = $this->Inline_Def($input, $charPos);
if ($ruleOut4->hadError) {
$this->giveError($ruleOut4->error->code, "Inline_Def(" . $ruleOut4->error->expected . ")", $ruleOut4->error->found);}else{
$ruleOutCast4 = &_c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$data["define"] = $ruleOutCast4;
$c = 5;
$this->error->vested++;}}else if ($c == 5) {
$ruleOut5 = $this->__($input, $charPos);
if ($ruleOut5->hadError) {
$this->giveError($ruleOut5->error->code, "White space(" . $ruleOut5->error->expected . ")", $ruleOut5->error->found);}else{
$ruleOutCast5 = _c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$c = 6;}}else if ($c == 6) {
$lit6 = [105, 110];
if ($currentCode == _c_lib__arrUtils::readIndex($lit6, $literalChar)) {
$literalChar++;
if ($literalChar == 2) {
$c = 7;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit6) . "", $currentChar);}}else if ($c == 7) {
$ruleOut7 = $this->_($input, $charPos);
if ($ruleOut7->hadError) {
$this->giveError($ruleOut7->error->code, "White space(optional)(" . $ruleOut7->error->expected . ")", $ruleOut7->error->found);}else{
$ruleOutCast7 = _c_lib__mapUtils::readIndex($ruleOut7->data, "data");
$charPos = $this->offset;
$c = 8;}}else if ($c == 8) {
$ruleOut8 = $this->Expression($input, $charPos);
if ($ruleOut8->hadError) {
$this->giveError($ruleOut8->error->code, "Expression(" . $ruleOut8->error->expected . ")", $ruleOut8->error->found);}else{
$ruleOutCast8 = &_c_lib__mapUtils::readIndex($ruleOut8->data, "data");
$charPos = $this->offset;
$data["iterate"] = $ruleOutCast8;
$c = 9;
$this->error->vested++;}}else if ($c == 9) {
if ($currentCode == 41) {
$c = 10;
$this->error->vested++;}else{
$this->giveError(1, ")", $currentChar);}}else if ($c == 10) {
$ruleOut10 = $this->_($input, $charPos);
if ($ruleOut10->hadError) {
$this->giveError($ruleOut10->error->code, "White space(optional)(" . $ruleOut10->error->expected . ")", $ruleOut10->error->found);}else{
$ruleOutCast10 = _c_lib__mapUtils::readIndex($ruleOut10->data, "data");
$charPos = $this->offset;
$c = 11;}}else if ($c == 11) {
$ruleOut11 = $this->Block($input, $charPos);
if ($ruleOut11->hadError) {
$c = 12;
$charPos--;
$this->offset--;}else{
$ruleOutCast11 = &_c_lib__mapUtils::readIndex($ruleOut11->data, "data");
$charPos = $this->offset;
$data["body"] = $ruleOutCast11;
if (true) {
$castacbody0 = &_c_lib__mapUtils::readIndex($data, "body");
$actionCap0define = &_c_lib__mapUtils::readIndex($data, "define");
$actionCap0iterate = &_c_lib__mapUtils::readIndex($data, "iterate");
$actionCap0body = &_c_lib__mapUtils::readIndex($data, "body");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "for";
_c_lib__mapUtils::readIndex($dataStore, "data")["in"] = true;
_c_lib__mapUtils::readIndex($dataStore, "data")["define"] = $actionCap0define;
_c_lib__mapUtils::readIndex($dataStore, "data")["iterate"] = $actionCap0iterate;
_c_lib__mapUtils::readIndex($dataStore, "data")["body"] = $actionCap0body;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 12) {
$ruleOut12 = $this->Single_Statement($input, $charPos);
if ($ruleOut12->hadError) {
$this->giveError(1, "Block, Single_Statement", $currentChar);}else{
$ruleOutCast12 = &_c_lib__mapUtils::readIndex($ruleOut12->data, "data");
$charPos = $this->offset;
$data["body"] = $ruleOutCast12;
if (true) {
$castacbody0 = &_c_lib__mapUtils::readIndex($data, "body");
$actionCap0define = &_c_lib__mapUtils::readIndex($data, "define");
$actionCap0iterate = &_c_lib__mapUtils::readIndex($data, "iterate");
$actionCap0body = &_c_lib__mapUtils::readIndex($data, "body");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "for";
_c_lib__mapUtils::readIndex($dataStore, "data")["in"] = true;
_c_lib__mapUtils::readIndex($dataStore, "data")["define"] = $actionCap0define;
_c_lib__mapUtils::readIndex($dataStore, "data")["iterate"] = $actionCap0iterate;
_c_lib__mapUtils::readIndex($dataStore, "data")["body"] = $actionCap0body;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function _c__Break(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [98, 114, 101, 97, 107];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 5) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
if ($currentCode == 59) {
if (true) {
$castac0 = &$data;
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "break";}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, ";", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function _c__Continue(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [99, 111, 110, 116, 105, 110, 117, 101];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 8) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
if ($currentCode == 59) {
if (true) {
$castac0 = &$data;
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "continue";}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, ";", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function _c__While(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [119, 104, 105, 108, 101];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 5) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Group($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "Group(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["check"] = $ruleOutCast2;
$c = 3;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
$ruleOut4 = $this->Block($input, $charPos);
if ($ruleOut4->hadError) {
$c = 5;
$charPos--;
$this->offset--;}else{
$ruleOutCast4 = &_c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$data["body"] = $ruleOutCast4;
if (true) {
$castacbody0 = &_c_lib__mapUtils::readIndex($data, "body");
$actionCap0check = &_c_lib__mapUtils::readIndex($data, "check");
$actionCap0body = &_c_lib__mapUtils::readIndex($data, "body");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "while";
_c_lib__mapUtils::readIndex($dataStore, "data")["check"] = $actionCap0check;
_c_lib__mapUtils::readIndex($dataStore, "data")["body"] = $actionCap0body;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 5) {
$ruleOut5 = $this->Single_Statement($input, $charPos);
if ($ruleOut5->hadError) {
$this->giveError(1, "Block, Single_Statement", $currentChar);}else{
$ruleOutCast5 = &_c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$data["body"] = $ruleOutCast5;
if (true) {
$castacbody0 = &_c_lib__mapUtils::readIndex($data, "body");
$actionCap0check = &_c_lib__mapUtils::readIndex($data, "check");
$actionCap0body = &_c_lib__mapUtils::readIndex($data, "body");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "while";
_c_lib__mapUtils::readIndex($dataStore, "data")["check"] = $actionCap0check;
_c_lib__mapUtils::readIndex($dataStore, "data")["body"] = $actionCap0body;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function _c__Try(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["catch"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [116, 114, 121];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 3) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Block($input, $charPos);
if ($ruleOut2->hadError) {
$c = 3;
$charPos--;
$this->offset--;}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["body"] = $ruleOutCast2;
$c = 4;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->Single_Statement($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError(1, "Block, Single_Statement", $currentChar);}else{
$ruleOutCast3 = &_c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$data["body"] = $ruleOutCast3;
$c = 4;
$this->error->vested++;}}else if ($c == 4) {
$ruleOut4 = $this->_($input, $charPos);
if ($ruleOut4->hadError) {
$this->giveError($ruleOut4->error->code, "White space(optional)(" . $ruleOut4->error->expected . ")", $ruleOut4->error->found);}else{
$ruleOutCast4 = _c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$c = 5;}}else if ($c == 5) {
$ruleOut5 = $this->_c__Catch($input, $charPos);
if ($ruleOut5->hadError) {
if (true) {
$castaccatch0 = &_c_lib__mapUtils::readIndex($data, "catch");
$actionCap0catch = &_c_lib__mapUtils::readIndex($data, "catch");
$actionCap0body = &_c_lib__mapUtils::readIndex($data, "body");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "try";
_c_lib__mapUtils::readIndex($dataStore, "data")["catch"] = $actionCap0catch;
_c_lib__mapUtils::readIndex($dataStore, "data")["body"] = $actionCap0body;}
$c = 0 - 1;
$charPos--;
$this->offset--;
if ($ruleOut5->error->vested > 1) {
$this->giveError($ruleOut5->error->code, $ruleOut5->error->expected, $ruleOut5->error->found);}}else{
$ruleOutCast5 = &_c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$castcatch5 = &_c_lib__mapUtils::readIndex($data, "catch");
array_push($castcatch5, $ruleOutCast5);
if (true) {
$castaccatch0 = &_c_lib__mapUtils::readIndex($data, "catch");
$actionCap0catch = &_c_lib__mapUtils::readIndex($data, "catch");
$actionCap0body = &_c_lib__mapUtils::readIndex($data, "body");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "try";
_c_lib__mapUtils::readIndex($dataStore, "data")["catch"] = $actionCap0catch;
_c_lib__mapUtils::readIndex($dataStore, "data")["body"] = $actionCap0body;}
$c = 5;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function _c__Catch(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [99, 97, 116, 99, 104];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 5) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
if ($currentCode == 40) {
$c = 3;
$this->error->vested++;}else{
$this->giveError(1, "(", $currentChar);}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
$ruleOut4 = $this->Parameter($input, $charPos);
if ($ruleOut4->hadError) {
$this->giveError($ruleOut4->error->code, "Parameter(" . $ruleOut4->error->expected . ")", $ruleOut4->error->found);}else{
$ruleOutCast4 = &_c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$data["input"] = $ruleOutCast4;
$c = 5;
$this->error->vested++;}}else if ($c == 5) {
$ruleOut5 = $this->_($input, $charPos);
if ($ruleOut5->hadError) {
$this->giveError($ruleOut5->error->code, "White space(optional)(" . $ruleOut5->error->expected . ")", $ruleOut5->error->found);}else{
$ruleOutCast5 = _c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$c = 6;}}else if ($c == 6) {
if ($currentCode == 41) {
$c = 7;
$this->error->vested++;}else{
$this->giveError(1, ")", $currentChar);}}else if ($c == 7) {
$ruleOut7 = $this->_($input, $charPos);
if ($ruleOut7->hadError) {
$this->giveError($ruleOut7->error->code, "White space(optional)(" . $ruleOut7->error->expected . ")", $ruleOut7->error->found);}else{
$ruleOutCast7 = _c_lib__mapUtils::readIndex($ruleOut7->data, "data");
$charPos = $this->offset;
$c = 8;}}else if ($c == 8) {
$ruleOut8 = $this->Block($input, $charPos);
if ($ruleOut8->hadError) {
$c = 9;
$charPos--;
$this->offset--;}else{
$ruleOutCast8 = &_c_lib__mapUtils::readIndex($ruleOut8->data, "data");
$charPos = $this->offset;
$data["body"] = $ruleOutCast8;
if (true) {
$castacbody0 = &_c_lib__mapUtils::readIndex($data, "body");
$actionCap0input = &_c_lib__mapUtils::readIndex($data, "input");
$actionCap0body = &_c_lib__mapUtils::readIndex($data, "body");
_c_lib__mapUtils::readIndex($dataStore, "data")["input"] = $actionCap0input;
_c_lib__mapUtils::readIndex($dataStore, "data")["body"] = $actionCap0body;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 9) {
$ruleOut9 = $this->Single_Statement($input, $charPos);
if ($ruleOut9->hadError) {
$this->giveError(1, "Block, Single_Statement", $currentChar);}else{
$ruleOutCast9 = &_c_lib__mapUtils::readIndex($ruleOut9->data, "data");
$charPos = $this->offset;
$data["body"] = $ruleOutCast9;
if (true) {
$castacbody0 = &_c_lib__mapUtils::readIndex($data, "body");
$actionCap0input = &_c_lib__mapUtils::readIndex($data, "input");
$actionCap0body = &_c_lib__mapUtils::readIndex($data, "body");
_c_lib__mapUtils::readIndex($dataStore, "data")["input"] = $actionCap0input;
_c_lib__mapUtils::readIndex($dataStore, "data")["body"] = $actionCap0body;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function _c__Throw(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [116, 104, 114, 111, 119, 32];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 6) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Expression($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "Expression(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast2;
$c = 3;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
if ($currentCode == 59) {
if (true) {
$castac0 = &$data;
$actionCap0exp = &_c_lib__mapUtils::readIndex($data, "exp");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "throw";
_c_lib__mapUtils::readIndex($dataStore, "data")["expression"] = $actionCap0exp;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, ";", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function _c__Return(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [114, 101, 116, 117, 114, 110, 32];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 7) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Expression($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "Expression(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast2;
$c = 3;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
if ($currentCode == 59) {
if (true) {
$castac0 = &$data;
$actionCap0exp = &_c_lib__mapUtils::readIndex($data, "exp");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "return";
_c_lib__mapUtils::readIndex($dataStore, "data")["expression"] = $actionCap0exp;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, ";", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Native(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["content"] = "";
$inString = false;
$open = 0;
$escape = false;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [110, 97, 116, 105, 118, 101, 32];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 7) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Safe_Name($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "Safe_Name(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["platform"] = $ruleOutCast2;
$c = 3;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
if ($currentCode == 123) {
$c = 5;
$this->error->vested++;}else{
$this->giveError(1, "{", $currentChar);}}else if ($c == 5) {
$castnaccontent5 = _c_lib__mapUtils::readIndex($data, "content");
$doCap = true;
$setEscape = false;
$isString = false;
if ($currentChar == "\"") {
$isString = true;}
if ($currentChar == "'") {
$isString = true;}
if ($currentChar == "`") {
$isString = true;}
if ($currentChar == "{") {
if ($inString == false) {
$open++;}}else if ($currentChar == "}") {
if ($inString == false) {
if ($open == 0) {
$c = 6;
$charPos--;
$this->offset--;
$doCap = false;}
$open--;}}else if ($isString) {
if ($escape == false) {
if ($inString) {
$inString = false;}else{
$inString = true;}}}else if ($currentChar == "\\") {
if ($escape == false) {
$setEscape = true;}}
if ($doCap) {
$data["content"] .= $currentChar;}
$escape = false;
if ($setEscape) {
$escape = true;}}else if ($c == 6) {
if ($currentCode == 125) {
if (true) {
$castac0 = &$data;
$actionCap0platform = _c_lib__mapUtils::readIndex($data, "platform");
$actionCap0content = _c_lib__mapUtils::readIndex($data, "content");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "native";
_c_lib__mapUtils::readIndex($dataStore, "data")["platform"] = $actionCap0platform;
_c_lib__mapUtils::readIndex($dataStore, "data")["content"] = $actionCap0content;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "}", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Define_Auto(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [118, 97, 114, 32];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 4) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Type($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "Type(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["type"] = $ruleOutCast2;
$c = 3;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
$ruleOut4 = $this->Safe_Name($input, $charPos);
if ($ruleOut4->hadError) {
$this->giveError($ruleOut4->error->code, "Safe_Name(" . $ruleOut4->error->expected . ")", $ruleOut4->error->found);}else{
$ruleOutCast4 = _c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$data["name"] = $ruleOutCast4;
$c = 5;
$this->error->vested++;}}else if ($c == 5) {
$ruleOut5 = $this->_($input, $charPos);
if ($ruleOut5->hadError) {
$this->giveError($ruleOut5->error->code, "White space(optional)(" . $ruleOut5->error->expected . ")", $ruleOut5->error->found);}else{
$ruleOutCast5 = _c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$c = 6;}}else if ($c == 6) {
if ($currentCode == 61) {
$c = 7;
$this->error->vested++;}else{
$this->giveError(1, "=", $currentChar);}}else if ($c == 7) {
$ruleOut7 = $this->_($input, $charPos);
if ($ruleOut7->hadError) {
$this->giveError($ruleOut7->error->code, "White space(optional)(" . $ruleOut7->error->expected . ")", $ruleOut7->error->found);}else{
$ruleOutCast7 = _c_lib__mapUtils::readIndex($ruleOut7->data, "data");
$charPos = $this->offset;
$c = 8;}}else if ($c == 8) {
$ruleOut8 = $this->Expression($input, $charPos);
if ($ruleOut8->hadError) {
$this->giveError($ruleOut8->error->code, "Expression(" . $ruleOut8->error->expected . ")", $ruleOut8->error->found);}else{
$ruleOutCast8 = &_c_lib__mapUtils::readIndex($ruleOut8->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast8;
$c = 9;
$this->error->vested++;}}else if ($c == 9) {
$ruleOut9 = $this->_($input, $charPos);
if ($ruleOut9->hadError) {
$this->giveError($ruleOut9->error->code, "White space(optional)(" . $ruleOut9->error->expected . ")", $ruleOut9->error->found);}else{
$ruleOutCast9 = _c_lib__mapUtils::readIndex($ruleOut9->data, "data");
$charPos = $this->offset;
$c = 10;}}else if ($c == 10) {
if ($currentCode == 59) {
if (true) {
$castac0 = &$data;
$actionCap0name = _c_lib__mapUtils::readIndex($data, "name");
$actionCap0type = &_c_lib__mapUtils::readIndex($data, "type");
$actionCap0exp = &_c_lib__mapUtils::readIndex($data, "exp");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "define";
_c_lib__mapUtils::readIndex($dataStore, "data")["name"] = $actionCap0name;
_c_lib__mapUtils::readIndex($dataStore, "data")["valueType"] = $actionCap0type;
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0exp;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, ";", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Define(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [118, 97, 114, 32];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 4) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Safe_Name($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "Safe_Name(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["name"] = $ruleOutCast2;
$c = 3;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
if ($currentCode == 61) {
$c = 5;
$this->error->vested++;}else{
$this->giveError(1, "=", $currentChar);}}else if ($c == 5) {
$ruleOut5 = $this->_($input, $charPos);
if ($ruleOut5->hadError) {
$this->giveError($ruleOut5->error->code, "White space(optional)(" . $ruleOut5->error->expected . ")", $ruleOut5->error->found);}else{
$ruleOutCast5 = _c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$c = 6;}}else if ($c == 6) {
$ruleOut6 = $this->Expression($input, $charPos);
if ($ruleOut6->hadError) {
$this->giveError($ruleOut6->error->code, "Expression(" . $ruleOut6->error->expected . ")", $ruleOut6->error->found);}else{
$ruleOutCast6 = &_c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast6;
$c = 7;
$this->error->vested++;}}else if ($c == 7) {
$ruleOut7 = $this->_($input, $charPos);
if ($ruleOut7->hadError) {
$this->giveError($ruleOut7->error->code, "White space(optional)(" . $ruleOut7->error->expected . ")", $ruleOut7->error->found);}else{
$ruleOutCast7 = _c_lib__mapUtils::readIndex($ruleOut7->data, "data");
$charPos = $this->offset;
$c = 8;}}else if ($c == 8) {
if ($currentCode == 59) {
if (true) {
$castac0 = &$data;
$actionCap0name = _c_lib__mapUtils::readIndex($data, "name");
$actionCap0exp = &_c_lib__mapUtils::readIndex($data, "exp");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "define";
_c_lib__mapUtils::readIndex($dataStore, "data")["name"] = $actionCap0name;
_c_lib__mapUtils::readIndex($dataStore, "data")["valueType"] = "";
_c_lib__mapUtils::readIndex($dataStore, "data")["auto"] = true;
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0exp;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, ";", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Inline_Def(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->Inline_Define($input, $charPos);
if ($ruleOut0->hadError) {
$c = 1;
$charPos--;
$this->offset--;}else{
$ruleOutCast0 = &_c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["def"] = $ruleOutCast0;
if (true) {
$castacdef0 = &_c_lib__mapUtils::readIndex($data, "def");
$actionCap0def = &_c_lib__mapUtils::readIndex($data, "def");
$dataStore["data"] = $actionCap0def;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 1) {
$ruleOut1 = $this->Inline_Define_Auto($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError(1, "Inline_Define, Inline_Define_Auto", $currentChar);}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["def"] = $ruleOutCast1;
if (true) {
$castacdef0 = &_c_lib__mapUtils::readIndex($data, "def");
$actionCap0def = &_c_lib__mapUtils::readIndex($data, "def");
$dataStore["data"] = $actionCap0def;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Inline_Define(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [118, 97, 114];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 3) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->__($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Type($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "Type(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["type"] = $ruleOutCast2;
$c = 3;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->__($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
$ruleOut4 = $this->Safe_Name($input, $charPos);
if ($ruleOut4->hadError) {
$this->giveError($ruleOut4->error->code, "Safe_Name(" . $ruleOut4->error->expected . ")", $ruleOut4->error->found);}else{
$ruleOutCast4 = _c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$data["name"] = $ruleOutCast4;
if (true) {
$castacname0 = &_c_lib__mapUtils::readIndex($data, "name");
$actionCap0name = _c_lib__mapUtils::readIndex($data, "name");
$actionCap0type = &_c_lib__mapUtils::readIndex($data, "type");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "define";
_c_lib__mapUtils::readIndex($dataStore, "data")["name"] = $actionCap0name;
_c_lib__mapUtils::readIndex($dataStore, "data")["valueType"] = $actionCap0type;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Inline_Define_Auto(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [118, 97, 114];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 3) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->__($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Safe_Name($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "Safe_Name(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["name"] = $ruleOutCast2;
if (true) {
$castacname0 = &_c_lib__mapUtils::readIndex($data, "name");
$actionCap0name = _c_lib__mapUtils::readIndex($data, "name");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "define";
_c_lib__mapUtils::readIndex($dataStore, "data")["name"] = $actionCap0name;
_c_lib__mapUtils::readIndex($dataStore, "data")["valueType"] = "";
_c_lib__mapUtils::readIndex($dataStore, "data")["auto"] = true;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function String_Tick(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["str"] = "";
$escaped = false;
$escapeCodes = ['_c__mapC' => true];
$escapeCodes["n"] = "\n";
$escapeCodes["b"] = "";
$escapeCodes["f"] = "";
$escapeCodes["r"] = "\\ r";
$escapeCodes["t"] = "\t";
$escapeCodes["v"] = "";
$escapeCodes["\\"] = "\\";
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 96) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "`", $currentChar);}}else if ($c == 1) {
$castnacstr1 = $data["str"];
$doCapture = true;
if ($currentChar == "\\") {
if ($escaped == false) {
$escaped = true;
$doCapture = false;}}
if ($currentChar == "`") {
if ($escaped == false) {
$doCapture = false;
$c = 2;
$charPos--;
$this->offset--;}
$escaped = false;}else if ($escaped and $doCapture == true) {
$doCapture = false;
$data["str"] .= _c_lib__mapUtils::readIndex($escapeCodes, $currentChar);
$escaped = false;}
if ($doCapture) {
$data["str"] .= $currentChar;}}else if ($c == 2) {
if ($currentCode == 96) {
if (true) {
$castac0 = $data;
$actionCap0str = $data["str"];
$dataStore["data"] = $actionCap0str;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "`", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function _(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$passed0 = false;
if ($currentCode == 32) {
$passed0 = true;}else if ($currentCode == 9) {
$passed0 = true;}else if ($currentCode == 13) {
$passed0 = true;}else if ($currentCode == 10) {
$passed0 = true;}
if ($passed0 == false) {
}
if ($passed0) {
$c = 0;
$this->error->vested++;}else{
$c = 0 - 1;
$charPos--;
$this->offset--;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function __(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["w"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$passed0 = false;
if ($currentCode == 32) {
$passed0 = true;}else if ($currentCode == 9) {
$passed0 = true;}else if ($currentCode == 13) {
$passed0 = true;}else if ($currentCode == 10) {
$passed0 = true;}
if ($passed0 == false) {
}
if ($passed0) {
$castw0 = &$data["w"];
array_push($castw0, $currentChar);
$c = 0;
$this->error->vested++;}else{
$castw0 = &$data["w"];
if (count($castw0) >= 1) {
$c = 0 - 1;
$charPos--;
$this->offset--;}else{
$this->giveError(1, " , \t, \\ r, \n", $currentChar);}}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function String(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->String_Double($input, $charPos);
if ($ruleOut0->hadError) {
$c = 1;
$charPos--;
$this->offset--;}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["str"] = $ruleOutCast0;
if (true) {
$castacstr0 = &$data["str"];
$actionCap0str = &$data["str"];
$dataStore["data"] = $actionCap0str;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 1) {
$ruleOut1 = $this->String_Single($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError(1, "String_Double, String_Single", $currentChar);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["str"] = $ruleOutCast1;
if (true) {
$castacstr0 = &$data["str"];
$actionCap0str = &$data["str"];
$dataStore["data"] = $actionCap0str;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function String_Double(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["str"] = "";
$escaped = false;
$escapeCodes = ['_c__mapC' => true];
$escapeCodes["n"] = "\n";
$escapeCodes["b"] = "";
$escapeCodes["f"] = "";
$escapeCodes["r"] = "\\ r";
$escapeCodes["t"] = "\t";
$escapeCodes["v"] = "";
$escapeCodes["\\"] = "\\";
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 34) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "\"", $currentChar);}}else if ($c == 1) {
$castnacstr1 = $data["str"];
$doCapture = true;
if ($currentChar == "\\") {
if ($escaped == false) {
$escaped = true;
$doCapture = false;}}
if ($currentChar == "\"") {
if ($escaped == false) {
$doCapture = false;
$c = 2;
$charPos--;
$this->offset--;}
$escaped = false;}else if ($escaped and $doCapture == true) {
$doCapture = false;
$data["str"] .= _c_lib__mapUtils::readIndex($escapeCodes, $currentChar);
$escaped = false;}
if ($doCapture) {
$data["str"] .= $currentChar;}}else if ($c == 2) {
if ($currentCode == 34) {
if (true) {
$castac0 = $data;
$actionCap0str = $data["str"];
$dataStore["data"] = $actionCap0str;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "\"", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function String_Single(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["str"] = "";
$escaped = false;
$escapeCodes = ['_c__mapC' => true];
$escapeCodes["n"] = "\n";
$escapeCodes["b"] = "";
$escapeCodes["f"] = "";
$escapeCodes["r"] = "\\ r";
$escapeCodes["t"] = "\t";
$escapeCodes["v"] = "";
$escapeCodes["\\"] = "\\";
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 39) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "'", $currentChar);}}else if ($c == 1) {
$castnacstr1 = $data["str"];
$doCapture = true;
if ($currentChar == "\\") {
if ($escaped == false) {
$escaped = true;
$doCapture = false;}}
if ($currentChar == "'") {
if ($escaped == false) {
$doCapture = false;
$c = 2;
$charPos--;
$this->offset--;}
$escaped = false;}else if ($escaped and $doCapture == true) {
$doCapture = false;
$data["str"] .= _c_lib__mapUtils::readIndex($escapeCodes, $currentChar);
$escaped = false;}
if ($doCapture) {
$data["str"] .= $currentChar;}}else if ($c == 2) {
if ($currentCode == 39) {
if (true) {
$castac0 = $data;
$actionCap0str = $data["str"];
$dataStore["data"] = $actionCap0str;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "'", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Json(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["keys"] = [];
$captureRoot1 = ['_c__mapC' => true];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 123) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "{", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->_($input, $charPos);
if ($ruleOut2->hadError) {
$c = 9;
$charPos--;
$this->offset--;}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$c = 3;}}else if ($c == 3) {
$ruleOut3 = $this->String($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "String(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$captureRoot1["key"] = $ruleOutCast3;
$c = 4;
$this->error->vested++;}}else if ($c == 4) {
$ruleOut4 = $this->_($input, $charPos);
if ($ruleOut4->hadError) {
$this->giveError($ruleOut4->error->code, "White space(optional)(" . $ruleOut4->error->expected . ")", $ruleOut4->error->found);}else{
$ruleOutCast4 = _c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$c = 5;}}else if ($c == 5) {
if ($currentCode == 58) {
$c = 6;
$this->error->vested++;}else{
$this->giveError(1, ":", $currentChar);}}else if ($c == 6) {
$ruleOut6 = $this->_($input, $charPos);
if ($ruleOut6->hadError) {
$this->giveError($ruleOut6->error->code, "White space(optional)(" . $ruleOut6->error->expected . ")", $ruleOut6->error->found);}else{
$ruleOutCast6 = _c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$c = 7;}}else if ($c == 7) {
$ruleOut7 = $this->Json_Value($input, $charPos);
if ($ruleOut7->hadError) {
$this->giveError($ruleOut7->error->code, "Json_Value(" . $ruleOut7->error->expected . ")", $ruleOut7->error->found);}else{
$ruleOutCast7 = _c_lib__mapUtils::readIndex($ruleOut7->data, "data");
$charPos = $this->offset;
$captureRoot1["val"] = $ruleOutCast7;
$c = 8;
$this->error->vested++;}}else if ($c == 8) {
$ruleOut8 = $this->_($input, $charPos);
if ($ruleOut8->hadError) {
$c = 9;
$charPos--;
$this->offset--;}else{
$ruleOutCast8 = _c_lib__mapUtils::readIndex($ruleOut8->data, "data");
$charPos = $this->offset;
$castkeys2 = &_c_lib__mapUtils::readIndex($data, "keys");
array_push($castkeys2, $captureRoot1);
if (ord($input[$charPos + 1]) != 44) {
$c = 9;
continue;}else{
$charPos++;}
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$captureRoot1 = ['_c__mapC' => true];
$c = 2;}}else if ($c == 9) {
$ruleOut9 = $this->_($input, $charPos);
if ($ruleOut9->hadError) {
$this->giveError($ruleOut9->error->code, "White space(optional)(" . $ruleOut9->error->expected . ")", $ruleOut9->error->found);}else{
$ruleOutCast9 = _c_lib__mapUtils::readIndex($ruleOut9->data, "data");
$charPos = $this->offset;
$c = 10;}}else if ($c == 10) {
if ($currentCode == 125) {
if (true) {
$castac0 = &$data;
$actionCap0keys = &_c_lib__mapUtils::readIndex($data, "keys");
for ($i = 0; $i < count($actionCap0keys); $i++) {
$k = &_c_lib__arrUtils::readIndex($actionCap0keys, $i);
$key = _c_lib__mapUtils::readIndex($k, "key");
_c_lib__mapUtils::readIndex($dataStore, "data")[$key] = _c_lib__mapUtils::readIndex($k, "val");}}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "}", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Json_Array(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["vals"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 91) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "[", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Json_Value($input, $charPos);
if ($ruleOut2->hadError) {
$c = 3;
$charPos--;
$this->offset--;
if ($ruleOut2->error->vested > 1) {
$this->giveError($ruleOut2->error->code, $ruleOut2->error->expected, $ruleOut2->error->found);}}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$castvals2 = &_c_lib__mapUtils::readIndex($data, "vals");
array_push($castvals2, $ruleOutCast2);
if (ord($input[$charPos + 1]) != 44) {
$c = 3;
continue;}else{
$charPos++;}
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 2;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
if ($currentCode == 93) {
if (true) {
$castac0 = &$data;
$actionCap0vals = &_c_lib__mapUtils::readIndex($data, "vals");
$dataStore["data"] = $actionCap0vals;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "]", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Json_EmptyArray(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = [];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 91) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "[", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
if ($currentCode == 93) {
if (true) {
$castac0 = &$data;
$data = [];}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "]", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Json_EmptyMap(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 123) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "{", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
if ($currentCode == 125) {
if (true) {
$castac0 = &$data;
$data = ['_c__mapC' => true];}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "}", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Json_Value(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = 0;
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
$lit1 = [110, 117, 108, 108];
if ($currentCode == _c_lib__arrUtils::readIndex($lit1, $literalChar)) {
$literalChar++;
if ($literalChar == 4) {
if (true) {
$castacexp1 = $data["exp"];
$data["exp"] = null;}
$c = 10;
$literalChar = 0;}
$this->error->vested++;}else{
$c = 2;
$charPos--;
$this->offset--;}}else if ($c == 2) {
$lit2 = [116, 114, 117, 101];
if ($currentCode == _c_lib__arrUtils::readIndex($lit2, $literalChar)) {
$literalChar++;
if ($literalChar == 4) {
if (true) {
$castacexp2 = $data["exp"];
$data["exp"] = true;}
$c = 10;
$literalChar = 0;}
$this->error->vested++;}else{
$c = 3;
$charPos--;
$this->offset--;}}else if ($c == 3) {
$lit3 = [102, 97, 108, 115, 101];
if ($currentCode == _c_lib__arrUtils::readIndex($lit3, $literalChar)) {
$literalChar++;
if ($literalChar == 5) {
if (true) {
$castacexp3 = $data["exp"];
$data["exp"] = false;}
$c = 10;
$literalChar = 0;}
$this->error->vested++;}else{
$c = 4;
$charPos--;
$this->offset--;}}else if ($c == 4) {
$ruleOut4 = $this->Json_EmptyArray($input, $charPos);
if ($ruleOut4->hadError) {
$c = 5;
$charPos--;
$this->offset--;}else{
$ruleOutCast4 = &_c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast4;
$c = 10;
$this->error->vested++;}}else if ($c == 5) {
$ruleOut5 = $this->Json_EmptyMap($input, $charPos);
if ($ruleOut5->hadError) {
$c = 6;
$charPos--;
$this->offset--;}else{
$ruleOutCast5 = &_c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast5;
$c = 10;
$this->error->vested++;}}else if ($c == 6) {
$ruleOut6 = $this->Json_Array($input, $charPos);
if ($ruleOut6->hadError) {
$c = 7;
$charPos--;
$this->offset--;}else{
$ruleOutCast6 = &_c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast6;
$c = 10;
$this->error->vested++;}}else if ($c == 7) {
$ruleOut7 = $this->Json($input, $charPos);
if ($ruleOut7->hadError) {
$c = 8;
$charPos--;
$this->offset--;}else{
$ruleOutCast7 = &_c_lib__mapUtils::readIndex($ruleOut7->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast7;
$c = 10;
$this->error->vested++;}}else if ($c == 8) {
$ruleOut8 = $this->String($input, $charPos);
if ($ruleOut8->hadError) {
$c = 9;
$charPos--;
$this->offset--;}else{
$ruleOutCast8 = _c_lib__mapUtils::readIndex($ruleOut8->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast8;
$c = 10;
$this->error->vested++;}}else if ($c == 9) {
$ruleOut9 = $this->Json_Number($input, $charPos);
if ($ruleOut9->hadError) {
$this->giveError(1, "null, true, false, Json_EmptyArray, Json_EmptyMap, Json_Array, Json, String, Json_Number", $currentChar);}else{
$ruleOutCast9 = _c_lib__mapUtils::readIndex($ruleOut9->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast9;
$c = 10;}}else if ($c == 10) {
$ruleOut10 = $this->_($input, $charPos);
if ($ruleOut10->hadError) {
$this->giveError($ruleOut10->error->code, "White space(optional)(" . $ruleOut10->error->expected . ")", $ruleOut10->error->found);}else{
$ruleOutCast10 = _c_lib__mapUtils::readIndex($ruleOut10->data, "data");
$charPos = $this->offset;
if (true) {
$castac0 = $data;
$actionCap0exp = &$data["exp"];
$dataStore["data"] = $actionCap0exp;}
$c = 0 - 1;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Json_Number(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = 0;
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["nums"] = "";
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$passed0 = false;
if ($currentCode == 45) {
$passed0 = true;}else if ($currentCode == 46) {
$passed0 = true;}
if ($passed0 == false) {
if ($currentCode >= 48 and $currentCode <= 57) {
$passed0 = true;}}
if ($passed0) {
$data["nums"] .= $currentChar;
if (true) {
$castacnums0 = $data["nums"];
$actionCap0nums = $data["nums"];
$dataStore["data"] = intval($actionCap0nums);}
$c = 0;
$this->error->vested++;}else{
$castnums0 = $data["nums"];
if (strlen($castnums0) >= 1) {
if (true) {
$castacnums0 = $data["nums"];
$actionCap0nums = $data["nums"];
$dataStore["data"] = intval($actionCap0nums);}
$c = 0 - 1;
$charPos--;
$this->offset--;}else{
$this->giveError(1, "0-9, -, .", $currentChar);}}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarboniteCarbonParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}


}class Carbonite_SourceCache {
public $path;

public $timeStamp;

public $parsed;

function __construct(...$arguments) {
$this->path = "";
$this->timeStamp = 0;
$this->parsed = [];

if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\uint64') or gettype($arguments[1]) == 'NULL') and ((gettype($arguments[2]) == 'array' and !isset($arguments[2]['_c__mapC'])) or gettype($arguments[2]) == 'NULL')) {
$path = $arguments[0];
$timeStamp = $arguments[1];
$parsed = $arguments[2];
$this->path = $path;
$this->timeStamp = $timeStamp;
$this->parsed = $parsed;
}

}
function serialize(...$arguments) {
if (count($arguments) == 0) {
$out = [];
for ($i = 0; $i < count($this->parsed); $i++) {
array_push($out, json_encode(_c_lib__arrUtils::readIndex($this->parsed, $i)));}
return "{\"timeStamp\": " . $this->timeStamp . ", \"path\": \"" . str_replace("\\", "\\\\", $this->path) . "\", \"parsed\": [" . implode(", ", $out) . "]}";
}
}

function update(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\uint64') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$timeStamp = $arguments[0];
$raw = $arguments[1];
$this->timeStamp = $timeStamp;
$this->parsed = $raw;
}
}


}class CarbonitePreprocessorLocation {
public $offset;

public $line;

public $column;

function __construct(...$arguments) {
$this->offset = 0;
$this->line = 1;
$this->column = 0;

if (count($arguments) == 3 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'integer' or gettype($arguments[2]) == 'NULL')) {
$offset = $arguments[0];
$line = $arguments[1];
$column = $arguments[2];
$this->offset = $offset;
$this->line = $line;
$this->column = $column;
}

}

}class CarbonitePreprocessorError {
public $code;

public $found;

public $expected;

public $vested;

public $path;

public $offset;

public $line;

public $column;

function __construct(...$arguments) {
$this->code = 0;
$this->found = 0;
$this->expected = 0;
$this->vested = 0;
$this->path = [];
$this->offset = 0;
$this->line = 1;
$this->column = 0;

if (count($arguments) == 3 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'integer' or gettype($arguments[2]) == 'NULL')) {
$offset = $arguments[0];
$line = $arguments[1];
$column = $arguments[2];
$this->offset = $offset;
$this->line = $line;
$this->column = $column;
}

}
function _c__clone(...$arguments) {
if (count($arguments) == 0) {
$_c__clone = new CarbonitePreprocessorError($this->offset, $this->line, $this->column);
$_c__clone->code = $this->code;
$_c__clone->found = $this->found;
$_c__clone->expected = $this->expected;
$_c__clone->vested = $this->vested;
for ($i = 0; $i < count($this->path); $i++) {
$current = _c_lib__arrUtils::readIndex($this->path, $i);
array_push($_c__clone->path, $current->_c__clone());}
return $_c__clone;
}
}


}class CarbonitePreprocessorOutput {
public $error;

public $hadError;

public $data;

function __construct(...$arguments) {
$this->error = null;
$this->hadError = false;
$this->data = ['_c__mapC' => true];

if (count($arguments) == 3 and (gettype($arguments[0]) == 'boolean' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\CarbonitePreprocessorError') or gettype($arguments[1]) == 'NULL') and ((gettype($arguments[2]) == 'array' and isset($arguments[2]['_c__mapC'])) or gettype($arguments[2]) == 'NULL')) {
$hadError = $arguments[0];
$error = $arguments[1];
$data = $arguments[2];
$this->hadError = $hadError;
$this->error = $error;
$this->data = $data;
}

}

}class CarbonitePreprocessor {
public $lastErrors;

public $hadError;

public $parsedChars;

public $currentInput;

public $data;

public $error;

public $offset;

public $line;

public $column;

function __construct(...$arguments) {
$this->lastErrors = [];
$this->hadError = false;
$this->parsedChars = 0;
$this->currentInput = "";
$this->data = ['_c__mapC' => true];
$this->error = new CarbonitePreprocessorError(0, 0, 0);
$this->offset = 0;
$this->line = 1;
$this->column = 0;

if (count($arguments) == 0) {

}

}
static function parse(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$input = $arguments[0];
$parser = new CarbonitePreprocessor();
$output = &$parser->start($input);
if ($parser->hadError and $parser->error->found == chr(1)) {
$parser->error->found = "End of input";}
$rtn = new CarbonitePreprocessorOutput($parser->hadError, $parser->error, _c_lib__mapUtils::readIndex($parser->data, "data"));
return $rtn;
}
else if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL')) {
$rule = $arguments[0];
$input = $arguments[1];
$parser = new CarbonitePreprocessor();
$input .= chr(1);
$parser->currentInput = $input;
$parser->data["data"] = ['_c__mapC' => true];
$output = null;
if ($rule == "Source") {
$output = $parser->Source($input, 0);}else{
if ($rule == "Pre") {
$output = $parser->Pre($input, 0);}else{
if ($rule == "Raw") {
$output = $parser->Raw($input, 0);}else{
if ($rule == "SourceLine") {
$output = $parser->SourceLine($input, 0);}else{
if ($rule == "RawLine") {
$output = $parser->RawLine($input, 0);}else{
if ($rule == "If") {
$output = $parser->_c__If($input, 0);}else{
if ($rule == "As") {
$output = $parser->_c__As($input, 0);}else{
if ($rule == "Include") {
$output = $parser->_c__Include($input, 0);}else{
if ($rule == "Output") {
$output = $parser->Output($input, 0);}else{
if ($rule == "Return") {
$output = $parser->_c__Return($input, 0);}else{
if ($rule == "On") {
$output = $parser->On($input, 0);}else{
if ($rule == "DocName") {
$output = $parser->DocName($input, 0);}else{
if ($rule == "DocNameLine") {
$output = $parser->DocNameLine($input, 0);}else{
if ($rule == "Doc") {
$output = $parser->Doc($input, 0);}else{
if ($rule == "Doc_Line") {
$output = $parser->Doc_Line($input, 0);}else{
if ($rule == "Script") {
$output = $parser->Script($input, 0);}else{
if ($rule == "Function") {
$output = $parser->_c__Function($input, 0);}else{
if ($rule == "For") {
$output = $parser->_c__For($input, 0);}else{
if ($rule == "ForIn") {
$output = $parser->ForIn($input, 0);}else{
if ($rule == "Define") {
$output = $parser->Define($input, 0);}else{
if ($rule == "Var") {
$output = $parser->_c__Var($input, 0);}else{
if ($rule == "Backslash") {
$output = $parser->Backslash($input, 0);}else{
if ($rule == "Lost") {
$output = $parser->Lost($input, 0);}else{
if ($rule == "Sub") {
$output = $parser->Sub($input, 0);}else{
if ($rule == "Expression") {
$output = $parser->Expression($input, 0);}else{
if ($rule == "If_Expression") {
$output = $parser->If_Expression($input, 0);}else{
if ($rule == "Safe_Name") {
$output = $parser->Safe_Name($input, 0);}else{
if ($rule == "Argument") {
$output = $parser->Argument($input, 0);}else{
if ($rule == "Literal_Map") {
$output = $parser->Literal_Map($input, 0);}else{
if ($rule == "Value") {
$output = $parser->Value($input, 0);}else{
if ($rule == "Literal_String") {
$output = $parser->Literal_String($input, 0);}else{
if ($rule == "Number") {
$output = $parser->Number($input, 0);}else{
if ($rule == "Literal_Array") {
$output = $parser->Literal_Array($input, 0);}else{
if ($rule == "Bool") {
$output = $parser->Bool($input, 0);}else{
if ($rule == "Constant") {
$output = $parser->Constant($input, 0);}else{
if ($rule == "Group") {
$output = $parser->Group($input, 0);}else{
if ($rule == "Operation") {
$output = $parser->Operation($input, 0);}else{
if ($rule == "Check") {
$output = $parser->Check($input, 0);}else{
if ($rule == "Call") {
$output = $parser->Call($input, 0);}else{
if ($rule == "_") {
$output = $parser->_($input, 0);}else{
if ($rule == "__") {
$output = $parser->__($input, 0);}else{
if ($rule == "String") {
$output = $parser->String($input, 0);}else{
if ($rule == "String_Double") {
$output = $parser->String_Double($input, 0);}else{
if ($rule == "String_Single") {
$output = $parser->String_Single($input, 0);}else{
if ($rule == "Json") {
$output = $parser->Json($input, 0);}else{
if ($rule == "Json_Array") {
$output = $parser->Json_Array($input, 0);}else{
if ($rule == "Json_EmptyArray") {
$output = $parser->Json_EmptyArray($input, 0);}else{
if ($rule == "Json_EmptyMap") {
$output = $parser->Json_EmptyMap($input, 0);}else{
if ($rule == "Json_Value") {
$output = $parser->Json_Value($input, 0);}else{
if ($rule == "Json_Number") {
$output = $parser->Json_Number($input, 0);}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
if ($parser->hadError and $parser->error->found == chr(1)) {
$parser->error->found = "End of input";}
for ($i = 0;$i < $parser->error->offset;$i++) {
$parser->error->column++;
if ($parser->currentInput[$i] == "\n") {
$parser->error->line++;
$parser->error->column = 0;}}
$rtn = new CarbonitePreprocessorOutput($output->hadError, $output->error, $output->data);
return $rtn;
}
}

function assembleCodes(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$codes = $arguments[0];
$rtn = "";
for ($i = 0; $i < count($codes); $i++) {
$rtn .= chr(_c_lib__arrUtils::readIndex($codes, $i));}
return $rtn;
}
}

function giveError(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'string' or gettype($arguments[2]) == 'NULL')) {
$code = $arguments[0];
$expected = $arguments[1];
$found = $arguments[2];
$this->hadError = true;
$this->error->code = $code;
$this->error->expected = $expected;
$this->error->found = $found;
$this->error->offset = $this->offset;
$this->error->line = 1;
$this->error->column = 0;
}
}

function &start(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$input = $arguments[0];
$this->currentInput = $input;
$input .= chr(1);
$this->data["data"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($this->data, "data");
$c = 0;
$literalChar = 0;
for ($charPos = 0;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($c == 0 - 1) {
if ($currentChar != chr(1)) {
$this->giveError(2, "EOF", $currentChar);}}
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->Source($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "Source(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = &_c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["document"] = $ruleOutCast0;
$c = 0 - 1;}}
$this->offset++;
$this->column++;
if ($this->hadError) {
break;}}
for ($i = 0;$i < $this->error->offset;$i++) {
$this->error->column++;
if ($this->currentInput[$i] == "\n") {
$this->error->line++;
$this->error->column = 0;}}
if (false and $this->hadError == false) {
if ($this->offset < strlen($input) - 1) {
$this->giveError(2, "EOF", $input[$this->offset + 1]);}}
}
}

function Source(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["s"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->Raw($input, $charPos);
if ($ruleOut0->hadError) {
$c = 1;
$charPos--;
$this->offset--;}else{
$ruleOutCast0 = &_c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$casts0 = &_c_lib__mapUtils::readIndex($data, "s");
array_push($casts0, $ruleOutCast0);
if (true) {
$castacs0 = &_c_lib__mapUtils::readIndex($data, "s");
$actionCap0s = &_c_lib__mapUtils::readIndex($data, "s");
$dataStore["data"] = $actionCap0s;}
$c = 0;}}else if ($c == 1) {
$ruleOut1 = $this->Pre($input, $charPos);
if ($ruleOut1->hadError) {
if (true) {
$castacs0 = &_c_lib__mapUtils::readIndex($data, "s");
$actionCap0s = &_c_lib__mapUtils::readIndex($data, "s");
$dataStore["data"] = $actionCap0s;}
$c = 0 - 1;
$charPos--;
$this->offset--;}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$casts0 = &_c_lib__mapUtils::readIndex($data, "s");
array_push($casts0, $ruleOutCast1);
if (true) {
$castacs0 = &_c_lib__mapUtils::readIndex($data, "s");
$actionCap0s = &_c_lib__mapUtils::readIndex($data, "s");
$dataStore["data"] = $actionCap0s;}
$c = 0;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Pre(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_c__If($input, $charPos);
if ($ruleOut0->hadError) {
$c = 1;
$charPos--;
$this->offset--;}else{
$ruleOutCast0 = &_c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["p"] = $ruleOutCast0;
if (true) {
$castacp0 = &_c_lib__mapUtils::readIndex($data, "p");
$actionCap0p = &_c_lib__mapUtils::readIndex($data, "p");
$dataStore["data"] = $actionCap0p;
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 1) {
$ruleOut1 = $this->Define($input, $charPos);
if ($ruleOut1->hadError) {
$c = 2;
$charPos--;
$this->offset--;}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["p"] = $ruleOutCast1;
if (true) {
$castacp0 = &_c_lib__mapUtils::readIndex($data, "p");
$actionCap0p = &_c_lib__mapUtils::readIndex($data, "p");
$dataStore["data"] = $actionCap0p;
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->_c__Return($input, $charPos);
if ($ruleOut2->hadError) {
$c = 3;
$charPos--;
$this->offset--;}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["p"] = $ruleOutCast2;
if (true) {
$castacp0 = &_c_lib__mapUtils::readIndex($data, "p");
$actionCap0p = &_c_lib__mapUtils::readIndex($data, "p");
$dataStore["data"] = $actionCap0p;
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->Doc($input, $charPos);
if ($ruleOut3->hadError) {
$c = 4;
$charPos--;
$this->offset--;}else{
$ruleOutCast3 = &_c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$data["p"] = $ruleOutCast3;
if (true) {
$castacp0 = &_c_lib__mapUtils::readIndex($data, "p");
$actionCap0p = &_c_lib__mapUtils::readIndex($data, "p");
$dataStore["data"] = $actionCap0p;
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 4) {
$ruleOut4 = $this->Doc_Line($input, $charPos);
if ($ruleOut4->hadError) {
$c = 5;
$charPos--;
$this->offset--;}else{
$ruleOutCast4 = &_c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$data["p"] = $ruleOutCast4;
if (true) {
$castacp0 = &_c_lib__mapUtils::readIndex($data, "p");
$actionCap0p = &_c_lib__mapUtils::readIndex($data, "p");
$dataStore["data"] = $actionCap0p;
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 5) {
$ruleOut5 = $this->Output($input, $charPos);
if ($ruleOut5->hadError) {
$c = 6;
$charPos--;
$this->offset--;}else{
$ruleOutCast5 = &_c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$data["p"] = $ruleOutCast5;
if (true) {
$castacp0 = &_c_lib__mapUtils::readIndex($data, "p");
$actionCap0p = &_c_lib__mapUtils::readIndex($data, "p");
$dataStore["data"] = $actionCap0p;
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 6) {
$ruleOut6 = $this->_c__Function($input, $charPos);
if ($ruleOut6->hadError) {
$c = 7;
$charPos--;
$this->offset--;}else{
$ruleOutCast6 = &_c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$data["p"] = $ruleOutCast6;
if (true) {
$castacp0 = &_c_lib__mapUtils::readIndex($data, "p");
$actionCap0p = &_c_lib__mapUtils::readIndex($data, "p");
$dataStore["data"] = $actionCap0p;
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 7) {
$ruleOut7 = $this->On($input, $charPos);
if ($ruleOut7->hadError) {
$c = 8;
$charPos--;
$this->offset--;}else{
$ruleOutCast7 = &_c_lib__mapUtils::readIndex($ruleOut7->data, "data");
$charPos = $this->offset;
$data["p"] = $ruleOutCast7;
if (true) {
$castacp0 = &_c_lib__mapUtils::readIndex($data, "p");
$actionCap0p = &_c_lib__mapUtils::readIndex($data, "p");
$dataStore["data"] = $actionCap0p;
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 8) {
$ruleOut8 = $this->Script($input, $charPos);
if ($ruleOut8->hadError) {
$c = 9;
$charPos--;
$this->offset--;}else{
$ruleOutCast8 = &_c_lib__mapUtils::readIndex($ruleOut8->data, "data");
$charPos = $this->offset;
$data["p"] = $ruleOutCast8;
if (true) {
$castacp0 = &_c_lib__mapUtils::readIndex($data, "p");
$actionCap0p = &_c_lib__mapUtils::readIndex($data, "p");
$dataStore["data"] = $actionCap0p;
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 9) {
$ruleOut9 = $this->_c__Var($input, $charPos);
if ($ruleOut9->hadError) {
$c = 10;
$charPos--;
$this->offset--;}else{
$ruleOutCast9 = &_c_lib__mapUtils::readIndex($ruleOut9->data, "data");
$charPos = $this->offset;
$data["p"] = $ruleOutCast9;
if (true) {
$castacp0 = &_c_lib__mapUtils::readIndex($data, "p");
$actionCap0p = &_c_lib__mapUtils::readIndex($data, "p");
$dataStore["data"] = $actionCap0p;
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 10) {
$ruleOut10 = $this->_c__Include($input, $charPos);
if ($ruleOut10->hadError) {
$c = 11;
$charPos--;
$this->offset--;}else{
$ruleOutCast10 = &_c_lib__mapUtils::readIndex($ruleOut10->data, "data");
$charPos = $this->offset;
$data["p"] = $ruleOutCast10;
if (true) {
$castacp0 = &_c_lib__mapUtils::readIndex($data, "p");
$actionCap0p = &_c_lib__mapUtils::readIndex($data, "p");
$dataStore["data"] = $actionCap0p;
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 11) {
$ruleOut11 = $this->_c__For($input, $charPos);
if ($ruleOut11->hadError) {
$c = 12;
$charPos--;
$this->offset--;}else{
$ruleOutCast11 = &_c_lib__mapUtils::readIndex($ruleOut11->data, "data");
$charPos = $this->offset;
$data["p"] = $ruleOutCast11;
if (true) {
$castacp0 = &_c_lib__mapUtils::readIndex($data, "p");
$actionCap0p = &_c_lib__mapUtils::readIndex($data, "p");
$dataStore["data"] = $actionCap0p;
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 12) {
$ruleOut12 = $this->ForIn($input, $charPos);
if ($ruleOut12->hadError) {
$c = 13;
$charPos--;
$this->offset--;}else{
$ruleOutCast12 = &_c_lib__mapUtils::readIndex($ruleOut12->data, "data");
$charPos = $this->offset;
$data["p"] = $ruleOutCast12;
if (true) {
$castacp0 = &_c_lib__mapUtils::readIndex($data, "p");
$actionCap0p = &_c_lib__mapUtils::readIndex($data, "p");
$dataStore["data"] = $actionCap0p;
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 13) {
$ruleOut13 = $this->Lost($input, $charPos);
if ($ruleOut13->hadError) {
$this->giveError(1, "If, Define, Return, Doc, Doc_Line, Output, Function, On, Script, Var, Include, For, ForIn, Lost", $currentChar);}else{
$ruleOutCast13 = &_c_lib__mapUtils::readIndex($ruleOut13->data, "data");
$charPos = $this->offset;
$data["p"] = $ruleOutCast13;
if (true) {
$castacp0 = &_c_lib__mapUtils::readIndex($data, "p");
$actionCap0p = &_c_lib__mapUtils::readIndex($data, "p");
$dataStore["data"] = $actionCap0p;
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Raw(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["c"] = "";
$inString = "";
$lineComment = false;
$checkComment = false;
$openComment = false;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$castnacc0 = _c_lib__mapUtils::readIndex($data, "c");
if ($checkComment and $openComment == false) {
if ($currentChar == "*") {
$openComment = true;
$data["c"] .= " ";
if (true) {
$castacc0 = _c_lib__mapUtils::readIndex($data, "c");
$actionCap0c = _c_lib__mapUtils::readIndex($data, "c");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "raw";
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["content"] = $actionCap0c;}}else if ($currentChar == "/") {
$openComment = true;
$lineComment = true;
$data["c"] .= " ";
if (true) {
$castacc0 = _c_lib__mapUtils::readIndex($data, "c");
$actionCap0c = _c_lib__mapUtils::readIndex($data, "c");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "raw";
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["content"] = $actionCap0c;}}else{
$data["c"] .= "/" . $currentChar;
if (true) {
$castacc0 = _c_lib__mapUtils::readIndex($data, "c");
$actionCap0c = _c_lib__mapUtils::readIndex($data, "c");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "raw";
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["content"] = $actionCap0c;}}
$checkComment = false;}else if ($openComment) {
if ($lineComment) {
if ($currentCode == 10) {
$data["c"] .= "\n";
if (true) {
$castacc0 = _c_lib__mapUtils::readIndex($data, "c");
$actionCap0c = _c_lib__mapUtils::readIndex($data, "c");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "raw";
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["content"] = $actionCap0c;}
$openComment = false;
$lineComment = false;}else{
$data["c"] .= " ";
if (true) {
$castacc0 = _c_lib__mapUtils::readIndex($data, "c");
$actionCap0c = _c_lib__mapUtils::readIndex($data, "c");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "raw";
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["content"] = $actionCap0c;}}}else{
if ($checkComment) {
if ($currentCode == 47) {
$data["c"] .= " ";
if (true) {
$castacc0 = _c_lib__mapUtils::readIndex($data, "c");
$actionCap0c = _c_lib__mapUtils::readIndex($data, "c");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "raw";
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["content"] = $actionCap0c;}
$openComment = false;}
$checkComment = false;}else{
if ($currentCode == 10) {
$data["c"] .= "\n";
if (true) {
$castacc0 = _c_lib__mapUtils::readIndex($data, "c");
$actionCap0c = _c_lib__mapUtils::readIndex($data, "c");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "raw";
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["content"] = $actionCap0c;}}else if ($currentChar == "*") {
$checkComment = true;
$data["c"] .= " ";
if (true) {
$castacc0 = _c_lib__mapUtils::readIndex($data, "c");
$actionCap0c = _c_lib__mapUtils::readIndex($data, "c");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "raw";
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["content"] = $actionCap0c;}}else{
$data["c"] .= " ";
if (true) {
$castacc0 = _c_lib__mapUtils::readIndex($data, "c");
$actionCap0c = _c_lib__mapUtils::readIndex($data, "c");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "raw";
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["content"] = $actionCap0c;}}}}}else{
if ($currentCode == 47) {
$checkComment = true;}else if ($currentCode == 35) {
if ($inString == "") {
$castc0 = _c_lib__mapUtils::readIndex($data, "c");
if (strlen($castc0) >= 1) {
if (true) {
$castacc0 = _c_lib__mapUtils::readIndex($data, "c");
$actionCap0c = _c_lib__mapUtils::readIndex($data, "c");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "raw";
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["content"] = $actionCap0c;}
$c = 0 - 1;
$charPos--;
$this->offset--;}else{
$this->giveError(1, "Native", $currentChar);}}else{
$data["c"] .= $currentChar;
if (true) {
$castacc0 = _c_lib__mapUtils::readIndex($data, "c");
$actionCap0c = _c_lib__mapUtils::readIndex($data, "c");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "raw";
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["content"] = $actionCap0c;}}}else if ($currentCode == 1) {
$castc0 = _c_lib__mapUtils::readIndex($data, "c");
if (strlen($castc0) >= 1) {
if (true) {
$castacc0 = _c_lib__mapUtils::readIndex($data, "c");
$actionCap0c = _c_lib__mapUtils::readIndex($data, "c");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "raw";
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["content"] = $actionCap0c;}
$c = 0 - 1;
$charPos--;
$this->offset--;}else{
$this->giveError(1, "Native", $currentChar);}}else{
$data["c"] .= $currentChar;
if (true) {
$castacc0 = _c_lib__mapUtils::readIndex($data, "c");
$actionCap0c = _c_lib__mapUtils::readIndex($data, "c");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "raw";
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["content"] = $actionCap0c;}
if ($currentCode == 34) {
if ($inString == "") {
$inString = "\"";}else{
if ($inString == "\"") {
$inString = "";}}}else if ($currentCode == 39) {
if ($inString == "") {
$inString = "'";}else{
if ($inString == "'") {
$inString = "";}}}}}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function SourceLine(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["s"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->RawLine($input, $charPos);
if ($ruleOut0->hadError) {
$c = 1;
$charPos--;
$this->offset--;}else{
$ruleOutCast0 = &_c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$casts0 = &_c_lib__mapUtils::readIndex($data, "s");
array_push($casts0, $ruleOutCast0);
if (true) {
$castacs0 = &_c_lib__mapUtils::readIndex($data, "s");
$actionCap0s = &_c_lib__mapUtils::readIndex($data, "s");
$dataStore["data"] = $actionCap0s;}
$c = 0;}}else if ($c == 1) {
$ruleOut1 = $this->Lost($input, $charPos);
if ($ruleOut1->hadError) {
if (true) {
$castacs0 = &_c_lib__mapUtils::readIndex($data, "s");
$actionCap0s = &_c_lib__mapUtils::readIndex($data, "s");
$dataStore["data"] = $actionCap0s;}
$c = 0 - 1;
$charPos--;
$this->offset--;}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$casts0 = &_c_lib__mapUtils::readIndex($data, "s");
array_push($casts0, $ruleOutCast1);
if (true) {
$castacs0 = &_c_lib__mapUtils::readIndex($data, "s");
$actionCap0s = &_c_lib__mapUtils::readIndex($data, "s");
$dataStore["data"] = $actionCap0s;}
$c = 0;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function RawLine(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["c"] = "";
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$passed0 = false;
if ($currentCode == 35) {
$passed0 = true;}else if ($currentCode == 10) {
$passed0 = true;}
if ($passed0 == false) {
}
if ($passed0) {
$castc0 = _c_lib__mapUtils::readIndex($data, "c");
if (strlen($castc0) >= 1) {
if (true) {
$castacc0 = _c_lib__mapUtils::readIndex($data, "c");
$actionCap0c = _c_lib__mapUtils::readIndex($data, "c");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "raw";
_c_lib__mapUtils::readIndex($dataStore, "data")["content"] = $actionCap0c;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;}
$c = 0 - 1;
$charPos--;
$this->offset--;}else{
$this->giveError(1, "#, \n", $currentChar);}
$this->error->vested++;}else{
$data["c"] .= $currentChar;
if (true) {
$castacc0 = _c_lib__mapUtils::readIndex($data, "c");
$actionCap0c = _c_lib__mapUtils::readIndex($data, "c");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "raw";
_c_lib__mapUtils::readIndex($dataStore, "data")["content"] = $actionCap0c;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;}
$c = 0;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function _c__If(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["checks"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [35, 105, 102];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 3) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->If_Expression($input, $charPos);
if ($ruleOut1->hadError) {
$castchecks1 = &_c_lib__mapUtils::readIndex($data, "checks");
if (count($castchecks1) >= 1) {
$c = 2;
$charPos--;
$this->offset--;}else{
$this->giveError(1, "If_Expression", $currentChar);}}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$castchecks1 = &_c_lib__mapUtils::readIndex($data, "checks");
array_push($castchecks1, $ruleOutCast1);
if (ord($input[$charPos + 1]) != 97) {
$c = 2;
continue;}else{
$charPos++;}
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 1;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->Source($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "Source(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["content"] = $ruleOutCast2;
$c = 3;}}else if ($c == 3) {
$lit3 = [35, 101, 110, 100, 32, 105, 102];
if ($currentCode == _c_lib__arrUtils::readIndex($lit3, $literalChar)) {
$literalChar++;
if ($literalChar == 7) {
if (true) {
$castac0 = &$data;
$actionCap0checks = &_c_lib__mapUtils::readIndex($data, "checks");
$actionCap0content = &_c_lib__mapUtils::readIndex($data, "content");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "if";
_c_lib__mapUtils::readIndex($dataStore, "data")["checks"] = $actionCap0checks;
_c_lib__mapUtils::readIndex($dataStore, "data")["content"] = $actionCap0content;}
$c = 0 - 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit3) . "", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function _c__As(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
$lit1 = [97, 115];
if ($currentCode == _c_lib__arrUtils::readIndex($lit1, $literalChar)) {
$literalChar++;
if ($literalChar == 2) {
$c = 2;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit1) . "", $currentChar);}}else if ($c == 2) {
$ruleOut2 = $this->__($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "White space(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$c = 3;}}else if ($c == 3) {
$ruleOut3 = $this->Safe_Name($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "Safe_Name(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$data["name"] = $ruleOutCast3;
if (true) {
$castacname0 = &$data["name"];
$actionCap0name = $data["name"];
$dataStore["data"] = $actionCap0name;}
$c = 0 - 1;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function _c__Include(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["as"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [35, 105, 110, 99, 108, 117, 100, 101];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 8) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->Expression($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "Expression(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["file"] = $ruleOutCast1;
$c = 2;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->_c__As($input, $charPos);
if ($ruleOut2->hadError) {
if (true) {
$castacas0 = &_c_lib__mapUtils::readIndex($data, "as");
$actionCap0as = &_c_lib__mapUtils::readIndex($data, "as");
$actionCap0file = &_c_lib__mapUtils::readIndex($data, "file");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "include";
_c_lib__mapUtils::readIndex($dataStore, "data")["as"] = $actionCap0as;
_c_lib__mapUtils::readIndex($dataStore, "data")["file"] = $actionCap0file;}
$c = 0 - 1;
$charPos--;
$this->offset--;
if ($ruleOut2->error->vested > 1) {
$this->giveError($ruleOut2->error->code, $ruleOut2->error->expected, $ruleOut2->error->found);}}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$castas2 = &_c_lib__mapUtils::readIndex($data, "as");
array_push($castas2, $ruleOutCast2);
if (ord($input[$charPos + 1]) != 44) {
if (true) {
$castacas0 = &_c_lib__mapUtils::readIndex($data, "as");
$actionCap0as = &_c_lib__mapUtils::readIndex($data, "as");
$actionCap0file = &_c_lib__mapUtils::readIndex($data, "file");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "include";
_c_lib__mapUtils::readIndex($dataStore, "data")["as"] = $actionCap0as;
_c_lib__mapUtils::readIndex($dataStore, "data")["file"] = $actionCap0file;}
$c = 0 - 1;
continue;}else{
$charPos++;}
if (true) {
$castacas0 = &_c_lib__mapUtils::readIndex($data, "as");
$actionCap0as = &_c_lib__mapUtils::readIndex($data, "as");
$actionCap0file = &_c_lib__mapUtils::readIndex($data, "file");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "include";
_c_lib__mapUtils::readIndex($dataStore, "data")["as"] = $actionCap0as;
_c_lib__mapUtils::readIndex($dataStore, "data")["file"] = $actionCap0file;}
$c = 2;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Output(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [35, 111, 117, 116, 32];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 5) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->SourceLine($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "SourceLine(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["content"] = $ruleOutCast1;
if (true) {
$castaccontent0 = &_c_lib__mapUtils::readIndex($data, "content");
$actionCap0content = &_c_lib__mapUtils::readIndex($data, "content");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "output";
_c_lib__mapUtils::readIndex($dataStore, "data")["content"] = $actionCap0content;}
$c = 0 - 1;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function _c__Return(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [35, 114, 101, 116, 117, 114, 110, 32];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 8) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->Expression($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "Expression(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast1;
if (true) {
$castacexp0 = &_c_lib__mapUtils::readIndex($data, "exp");
$actionCap0exp = &_c_lib__mapUtils::readIndex($data, "exp");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "return";
_c_lib__mapUtils::readIndex($dataStore, "data")["expression"] = $actionCap0exp;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function On(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [35, 111, 110, 32];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 4) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->Expression($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "Expression(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast1;
$c = 2;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->Source($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "Source(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["content"] = $ruleOutCast2;
$c = 3;}}else if ($c == 3) {
$lit3 = [35, 101, 110, 100, 32, 111, 110];
if ($currentCode == _c_lib__arrUtils::readIndex($lit3, $literalChar)) {
$literalChar++;
if ($literalChar == 7) {
if (true) {
$castac0 = &$data;
$actionCap0exp = &_c_lib__mapUtils::readIndex($data, "exp");
$actionCap0content = &_c_lib__mapUtils::readIndex($data, "content");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "on";
_c_lib__mapUtils::readIndex($dataStore, "data")["expression"] = $actionCap0exp;
_c_lib__mapUtils::readIndex($dataStore, "data")["content"] = $actionCap0content;}
$c = 0 - 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit3) . "", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function DocName(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [110, 97, 118, 68, 114, 111, 112];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 7) {
$data["name"] = $this->assembleCodes($lit0);
if (true) {
$castacname0 = &$data["name"];
$actionCap0name = &$data["name"];
$dataStore["data"] = $actionCap0name;}
$c = 0 - 1;
$literalChar = 0;}
$this->error->vested++;}else{
$c = 1;
$charPos--;
$this->offset--;}}else if ($c == 1) {
$lit1 = [116, 114, 101, 101];
if ($currentCode == _c_lib__arrUtils::readIndex($lit1, $literalChar)) {
$literalChar++;
if ($literalChar == 4) {
$data["name"] = $this->assembleCodes($lit1);
if (true) {
$castacname0 = &$data["name"];
$actionCap0name = &$data["name"];
$dataStore["data"] = $actionCap0name;}
$c = 0 - 1;
$literalChar = 0;}
$this->error->vested++;}else{
$c = 2;
$charPos--;
$this->offset--;}}else if ($c == 2) {
$lit2 = [112, 97, 103, 101];
if ($currentCode == _c_lib__arrUtils::readIndex($lit2, $literalChar)) {
$literalChar++;
if ($literalChar == 4) {
$data["name"] = $this->assembleCodes($lit2);
if (true) {
$castacname0 = &$data["name"];
$actionCap0name = &$data["name"];
$dataStore["data"] = $actionCap0name;}
$c = 0 - 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "navDrop, tree, page", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function DocNameLine(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [110, 97, 118, 76, 105, 110, 107];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 7) {
$data["name"] = $this->assembleCodes($lit0);
if (true) {
$castacname0 = &$data["name"];
$actionCap0name = &$data["name"];
$dataStore["data"] = $actionCap0name;}
$c = 0 - 1;
$literalChar = 0;}
$this->error->vested++;}else{
$c = 1;
$charPos--;
$this->offset--;}}else if ($c == 1) {
$lit1 = [105, 110, 99, 108, 117, 100, 101];
if ($currentCode == _c_lib__arrUtils::readIndex($lit1, $literalChar)) {
$literalChar++;
if ($literalChar == 7) {
$data["name"] = $this->assembleCodes($lit1);
if (true) {
$castacname0 = &$data["name"];
$actionCap0name = &$data["name"];
$dataStore["data"] = $actionCap0name;}
$c = 0 - 1;
$literalChar = 0;}
$this->error->vested++;}else{
$c = 2;
$charPos--;
$this->offset--;}}else if ($c == 2) {
$lit2 = [116, 97, 103];
if ($currentCode == _c_lib__arrUtils::readIndex($lit2, $literalChar)) {
$literalChar++;
if ($literalChar == 3) {
$data["name"] = $this->assembleCodes($lit2);
if (true) {
$castacname0 = &$data["name"];
$actionCap0name = &$data["name"];
$dataStore["data"] = $actionCap0name;}
$c = 0 - 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "navLink, include, tag", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Doc(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["arguments"] = "";
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [35, 100, 111, 99, 32];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 5) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->DocName($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "DocName(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["opt"] = $ruleOutCast1;
$c = 2;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->_($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "White space(optional)(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$c = 3;}}else if ($c == 3) {
$passed3 = false;
if ($currentCode == 10) {
$passed3 = true;}
if ($passed3 == false) {
}
if ($passed3) {
$c = 4;
$charPos--;
$this->offset--;
$this->error->vested++;}else{
$data["arguments"] .= $currentChar;
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 3;}}else if ($c == 4) {
$ruleOut4 = $this->Source($input, $charPos);
if ($ruleOut4->hadError) {
$this->giveError($ruleOut4->error->code, "Source(" . $ruleOut4->error->expected . ")", $ruleOut4->error->found);}else{
$ruleOutCast4 = &_c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$data["content"] = $ruleOutCast4;
$c = 5;}}else if ($c == 5) {
$lit5 = [35, 101, 110, 100, 32, 100, 111, 99];
if ($currentCode == _c_lib__arrUtils::readIndex($lit5, $literalChar)) {
$literalChar++;
if ($literalChar == 8) {
if (true) {
$castac0 = &$data;
$actionCap0opt = _c_lib__mapUtils::readIndex($data, "opt");
$actionCap0arguments = _c_lib__mapUtils::readIndex($data, "arguments");
$actionCap0content = &_c_lib__mapUtils::readIndex($data, "content");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "doc";
_c_lib__mapUtils::readIndex($dataStore, "data")["name"] = $actionCap0opt;
_c_lib__mapUtils::readIndex($dataStore, "data")["arguments"] = $actionCap0arguments;
_c_lib__mapUtils::readIndex($dataStore, "data")["content"] = $actionCap0content;}
$c = 0 - 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit5) . "", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Doc_Line(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["arguments"] = "";
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [35, 100, 111, 99, 32];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 5) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->DocNameLine($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "DocNameLine(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["opt"] = $ruleOutCast1;
$c = 2;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->_($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "White space(optional)(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$c = 3;}}else if ($c == 3) {
$passed3 = false;
if ($currentCode == 10) {
$passed3 = true;}
if ($passed3 == false) {
}
if ($passed3) {
if (true) {
$castacarguments0 = &_c_lib__mapUtils::readIndex($data, "arguments");
$actionCap0opt = _c_lib__mapUtils::readIndex($data, "opt");
$actionCap0arguments = _c_lib__mapUtils::readIndex($data, "arguments");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "doc";
_c_lib__mapUtils::readIndex($dataStore, "data")["name"] = $actionCap0opt;
_c_lib__mapUtils::readIndex($dataStore, "data")["arguments"] = $actionCap0arguments;}
$c = 0 - 1;
$charPos--;
$this->offset--;
$this->error->vested++;}else{
$data["arguments"] .= $currentChar;
if (true) {
$castacarguments0 = &_c_lib__mapUtils::readIndex($data, "arguments");
$actionCap0opt = _c_lib__mapUtils::readIndex($data, "opt");
$actionCap0arguments = _c_lib__mapUtils::readIndex($data, "arguments");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "doc";
_c_lib__mapUtils::readIndex($dataStore, "data")["name"] = $actionCap0opt;
_c_lib__mapUtils::readIndex($dataStore, "data")["arguments"] = $actionCap0arguments;}
$c = 3;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Script(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["language"] = "";
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [35, 115, 99, 114, 105, 112, 116];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 7) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$passed2 = false;
if ($passed2 == false) {
if ($currentCode >= 97 and $currentCode <= 122) {
$passed2 = true;}else if ($currentCode >= 65 and $currentCode <= 90) {
$passed2 = true;}else if ($currentCode >= 48 and $currentCode <= 57) {
$passed2 = true;}}
if ($passed2) {
$data["language"] .= $currentChar;
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 2;
$this->error->vested++;}else{
$c = 3;
$charPos--;
$this->offset--;}}else if ($c == 3) {
$ruleOut3 = $this->Source($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "Source(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = &_c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$data["content"] = $ruleOutCast3;
$c = 4;}}else if ($c == 4) {
$lit4 = [35, 101, 110, 100, 32, 115, 99, 114, 105, 112, 116];
if ($currentCode == _c_lib__arrUtils::readIndex($lit4, $literalChar)) {
$literalChar++;
if ($literalChar == 11) {
if (true) {
$castac0 = &$data;
$actionCap0language = _c_lib__mapUtils::readIndex($data, "language");
$actionCap0content = &_c_lib__mapUtils::readIndex($data, "content");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "script";
_c_lib__mapUtils::readIndex($dataStore, "data")["language"] = $actionCap0language;
_c_lib__mapUtils::readIndex($dataStore, "data")["content"] = $actionCap0content;}
$c = 0 - 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit4) . "", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function _c__Function(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["args"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [35, 102, 117, 110, 99, 116, 105, 111, 110];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 9) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Safe_Name($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "Safe_Name(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["name"] = $ruleOutCast2;
$c = 3;}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
if ($currentCode == 40) {
$c = 5;
$this->error->vested++;}else{
$this->giveError(1, "(", $currentChar);}}else if ($c == 5) {
$ruleOut5 = $this->_($input, $charPos);
if ($ruleOut5->hadError) {
$this->giveError($ruleOut5->error->code, "White space(optional)(" . $ruleOut5->error->expected . ")", $ruleOut5->error->found);}else{
$ruleOutCast5 = _c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$c = 6;}}else if ($c == 6) {
$ruleOut6 = $this->Argument($input, $charPos);
if ($ruleOut6->hadError) {
$c = 7;
$charPos--;
$this->offset--;
if ($ruleOut6->error->vested > 1) {
$this->giveError($ruleOut6->error->code, $ruleOut6->error->expected, $ruleOut6->error->found);}}else{
$ruleOutCast6 = _c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$castargs6 = &_c_lib__mapUtils::readIndex($data, "args");
array_push($castargs6, $ruleOutCast6);
if (ord($input[$charPos + 1]) != 44) {
$c = 7;
continue;}else{
$charPos++;}
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 6;
$this->error->vested++;}}else if ($c == 7) {
$ruleOut7 = $this->_($input, $charPos);
if ($ruleOut7->hadError) {
$this->giveError($ruleOut7->error->code, "White space(optional)(" . $ruleOut7->error->expected . ")", $ruleOut7->error->found);}else{
$ruleOutCast7 = _c_lib__mapUtils::readIndex($ruleOut7->data, "data");
$charPos = $this->offset;
$c = 8;}}else if ($c == 8) {
if ($currentCode == 41) {
$c = 9;
$this->error->vested++;}else{
$this->giveError(1, ")", $currentChar);}}else if ($c == 9) {
$ruleOut9 = $this->Source($input, $charPos);
if ($ruleOut9->hadError) {
$this->giveError($ruleOut9->error->code, "Source(" . $ruleOut9->error->expected . ")", $ruleOut9->error->found);}else{
$ruleOutCast9 = &_c_lib__mapUtils::readIndex($ruleOut9->data, "data");
$charPos = $this->offset;
$data["content"] = $ruleOutCast9;
$c = 10;}}else if ($c == 10) {
$lit10 = [35, 101, 110, 100, 32, 102, 117, 110, 99, 116, 105, 111, 110];
if ($currentCode == _c_lib__arrUtils::readIndex($lit10, $literalChar)) {
$literalChar++;
if ($literalChar == 13) {
if (true) {
$castac0 = &$data;
$actionCap0name = _c_lib__mapUtils::readIndex($data, "name");
$actionCap0args = &_c_lib__mapUtils::readIndex($data, "args");
$actionCap0content = &_c_lib__mapUtils::readIndex($data, "content");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "function";
_c_lib__mapUtils::readIndex($dataStore, "data")["name"] = $actionCap0name;
_c_lib__mapUtils::readIndex($dataStore, "data")["arguments"] = $actionCap0args;
_c_lib__mapUtils::readIndex($dataStore, "data")["content"] = $actionCap0content;}
$c = 0 - 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit10) . "", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function _c__For(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [35, 102, 111, 114];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 4) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Safe_Name($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "Safe_Name(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["name"] = $ruleOutCast2;
$c = 3;}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
if ($currentCode == 61) {
$c = 5;
$this->error->vested++;}else{
$this->giveError(1, "=", $currentChar);}}else if ($c == 5) {
$ruleOut5 = $this->_($input, $charPos);
if ($ruleOut5->hadError) {
$this->giveError($ruleOut5->error->code, "White space(optional)(" . $ruleOut5->error->expected . ")", $ruleOut5->error->found);}else{
$ruleOutCast5 = _c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$c = 6;}}else if ($c == 6) {
$ruleOut6 = $this->Expression($input, $charPos);
if ($ruleOut6->hadError) {
$this->giveError($ruleOut6->error->code, "Expression(" . $ruleOut6->error->expected . ")", $ruleOut6->error->found);}else{
$ruleOutCast6 = &_c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$data["start"] = $ruleOutCast6;
$c = 7;
$this->error->vested++;}}else if ($c == 7) {
$ruleOut7 = $this->_($input, $charPos);
if ($ruleOut7->hadError) {
$this->giveError($ruleOut7->error->code, "White space(optional)(" . $ruleOut7->error->expected . ")", $ruleOut7->error->found);}else{
$ruleOutCast7 = _c_lib__mapUtils::readIndex($ruleOut7->data, "data");
$charPos = $this->offset;
$c = 8;}}else if ($c == 8) {
$lit8 = [116, 111];
if ($currentCode == _c_lib__arrUtils::readIndex($lit8, $literalChar)) {
$literalChar++;
if ($literalChar == 2) {
$c = 9;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit8) . "", $currentChar);}}else if ($c == 9) {
$ruleOut9 = $this->_($input, $charPos);
if ($ruleOut9->hadError) {
$this->giveError($ruleOut9->error->code, "White space(optional)(" . $ruleOut9->error->expected . ")", $ruleOut9->error->found);}else{
$ruleOutCast9 = _c_lib__mapUtils::readIndex($ruleOut9->data, "data");
$charPos = $this->offset;
$c = 10;}}else if ($c == 10) {
$ruleOut10 = $this->Expression($input, $charPos);
if ($ruleOut10->hadError) {
$this->giveError($ruleOut10->error->code, "Expression(" . $ruleOut10->error->expected . ")", $ruleOut10->error->found);}else{
$ruleOutCast10 = &_c_lib__mapUtils::readIndex($ruleOut10->data, "data");
$charPos = $this->offset;
$data["end"] = $ruleOutCast10;
$c = 11;
$this->error->vested++;}}else if ($c == 11) {
$ruleOut11 = $this->Source($input, $charPos);
if ($ruleOut11->hadError) {
$this->giveError($ruleOut11->error->code, "Source(" . $ruleOut11->error->expected . ")", $ruleOut11->error->found);}else{
$ruleOutCast11 = &_c_lib__mapUtils::readIndex($ruleOut11->data, "data");
$charPos = $this->offset;
$data["content"] = $ruleOutCast11;
$c = 12;}}else if ($c == 12) {
$lit12 = [35, 101, 110, 100, 32, 102, 111, 114];
if ($currentCode == _c_lib__arrUtils::readIndex($lit12, $literalChar)) {
$literalChar++;
if ($literalChar == 8) {
if (true) {
$castac0 = &$data;
$actionCap0name = _c_lib__mapUtils::readIndex($data, "name");
$actionCap0start = &_c_lib__mapUtils::readIndex($data, "start");
$actionCap0end = &_c_lib__mapUtils::readIndex($data, "end");
$actionCap0content = &_c_lib__mapUtils::readIndex($data, "content");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "for";
_c_lib__mapUtils::readIndex($dataStore, "data")["name"] = $actionCap0name;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $actionCap0start;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $actionCap0end;
_c_lib__mapUtils::readIndex($dataStore, "data")["content"] = $actionCap0content;}
$c = 0 - 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit12) . "", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function ForIn(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [35, 102, 111, 114];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 4) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Safe_Name($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "Safe_Name(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["name"] = $ruleOutCast2;
$c = 3;}}else if ($c == 3) {
$ruleOut3 = $this->__($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
$lit4 = [105, 110];
if ($currentCode == _c_lib__arrUtils::readIndex($lit4, $literalChar)) {
$literalChar++;
if ($literalChar == 2) {
$c = 5;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit4) . "", $currentChar);}}else if ($c == 5) {
$ruleOut5 = $this->__($input, $charPos);
if ($ruleOut5->hadError) {
$this->giveError($ruleOut5->error->code, "White space(" . $ruleOut5->error->expected . ")", $ruleOut5->error->found);}else{
$ruleOutCast5 = _c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$c = 6;}}else if ($c == 6) {
$ruleOut6 = $this->Expression($input, $charPos);
if ($ruleOut6->hadError) {
$this->giveError($ruleOut6->error->code, "Expression(" . $ruleOut6->error->expected . ")", $ruleOut6->error->found);}else{
$ruleOutCast6 = &_c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast6;
$c = 7;
$this->error->vested++;}}else if ($c == 7) {
$ruleOut7 = $this->Source($input, $charPos);
if ($ruleOut7->hadError) {
$this->giveError($ruleOut7->error->code, "Source(" . $ruleOut7->error->expected . ")", $ruleOut7->error->found);}else{
$ruleOutCast7 = &_c_lib__mapUtils::readIndex($ruleOut7->data, "data");
$charPos = $this->offset;
$data["content"] = $ruleOutCast7;
$c = 8;}}else if ($c == 8) {
$lit8 = [35, 101, 110, 100, 32, 102, 111, 114];
if ($currentCode == _c_lib__arrUtils::readIndex($lit8, $literalChar)) {
$literalChar++;
if ($literalChar == 8) {
if (true) {
$castac0 = &$data;
$actionCap0name = _c_lib__mapUtils::readIndex($data, "name");
$actionCap0exp = &_c_lib__mapUtils::readIndex($data, "exp");
$actionCap0content = &_c_lib__mapUtils::readIndex($data, "content");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "forin";
_c_lib__mapUtils::readIndex($dataStore, "data")["name"] = $actionCap0name;
_c_lib__mapUtils::readIndex($dataStore, "data")["in"] = $actionCap0exp;
_c_lib__mapUtils::readIndex($dataStore, "data")["content"] = $actionCap0content;}
$c = 0 - 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit8) . "", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Define(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [35, 100, 101, 102, 105, 110, 101];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 7) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Safe_Name($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "Safe_Name(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["name"] = $ruleOutCast2;
$c = 3;}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
if ($currentCode == 61) {
$c = 5;
$this->error->vested++;}else{
$this->giveError(1, "=", $currentChar);}}else if ($c == 5) {
$ruleOut5 = $this->_($input, $charPos);
if ($ruleOut5->hadError) {
$this->giveError($ruleOut5->error->code, "White space(optional)(" . $ruleOut5->error->expected . ")", $ruleOut5->error->found);}else{
$ruleOutCast5 = _c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$c = 6;}}else if ($c == 6) {
$ruleOut6 = $this->Expression($input, $charPos);
if ($ruleOut6->hadError) {
$this->giveError($ruleOut6->error->code, "Expression(" . $ruleOut6->error->expected . ")", $ruleOut6->error->found);}else{
$ruleOutCast6 = &_c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$data["value"] = $ruleOutCast6;
if (true) {
$castacvalue0 = &_c_lib__mapUtils::readIndex($data, "value");
$actionCap0name = _c_lib__mapUtils::readIndex($data, "name");
$actionCap0value = &_c_lib__mapUtils::readIndex($data, "value");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "define";
_c_lib__mapUtils::readIndex($dataStore, "data")["name"] = $actionCap0name;
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0value;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function _c__Var(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [35, 118, 97, 114];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 4) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Safe_Name($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "Safe_Name(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["name"] = $ruleOutCast2;
$c = 3;}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
if ($currentCode == 61) {
$c = 5;
$this->error->vested++;}else{
$this->giveError(1, "=", $currentChar);}}else if ($c == 5) {
$ruleOut5 = $this->_($input, $charPos);
if ($ruleOut5->hadError) {
$this->giveError($ruleOut5->error->code, "White space(optional)(" . $ruleOut5->error->expected . ")", $ruleOut5->error->found);}else{
$ruleOutCast5 = _c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$c = 6;}}else if ($c == 6) {
$ruleOut6 = $this->Expression($input, $charPos);
if ($ruleOut6->hadError) {
$this->giveError($ruleOut6->error->code, "Expression(" . $ruleOut6->error->expected . ")", $ruleOut6->error->found);}else{
$ruleOutCast6 = &_c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$data["value"] = $ruleOutCast6;
if (true) {
$castacvalue0 = &_c_lib__mapUtils::readIndex($data, "value");
$actionCap0name = _c_lib__mapUtils::readIndex($data, "name");
$actionCap0value = &_c_lib__mapUtils::readIndex($data, "value");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "var";
_c_lib__mapUtils::readIndex($dataStore, "data")["name"] = $actionCap0name;
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0value;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Backslash(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 35) {
if (true) {
$castac0 = &$data;
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "raw";
_c_lib__mapUtils::readIndex($dataStore, "data")["content"] = "#";}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "#", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Lost(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 35) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "#", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->Expression($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "Expression(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast1;
if (true) {
$castacexp0 = &_c_lib__mapUtils::readIndex($data, "exp");
$actionCap0exp = &_c_lib__mapUtils::readIndex($data, "exp");
$doSet = true;
if (_c_lib__mapUtils::readIndex($actionCap0exp, "type") == "constant") {
if (_c_lib__mapUtils::readIndex($actionCap0exp, "value") == "end") {
$this->giveError(1, "" . "" . "", "");
$doSet = false;}}
if ($doSet) {
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "lost";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0exp;}}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Sub(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 46) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, ".", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Call($input, $charPos);
if ($ruleOut2->hadError) {
$c = 3;
$charPos--;
$this->offset--;}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast2;
if (true) {
$castacexp0 = &_c_lib__mapUtils::readIndex($data, "exp");
$actionCap0exp = &_c_lib__mapUtils::readIndex($data, "exp");
$dataStore["data"] = $actionCap0exp;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->Value($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError(1, "Call, Value", $currentChar);}else{
$ruleOutCast3 = &_c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast3;
if (true) {
$castacexp0 = &_c_lib__mapUtils::readIndex($data, "exp");
$actionCap0exp = &_c_lib__mapUtils::readIndex($data, "exp");
$dataStore["data"] = $actionCap0exp;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Expression(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["subs"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
$ruleOut1 = $this->Operation($input, $charPos);
if ($ruleOut1->hadError) {
$c = 2;
$charPos--;
$this->offset--;}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["e"] = $ruleOutCast1;
$c = 4;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->Call($input, $charPos);
if ($ruleOut2->hadError) {
$c = 3;
$charPos--;
$this->offset--;}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["e"] = $ruleOutCast2;
$c = 4;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->Value($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError(1, "Operation, Call, Value", $currentChar);}else{
$ruleOutCast3 = &_c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$data["e"] = $ruleOutCast3;
$c = 4;
$this->error->vested++;}}else if ($c == 4) {
$ruleOut4 = $this->Sub($input, $charPos);
if ($ruleOut4->hadError) {
$c = 5;
$charPos--;
$this->offset--;}else{
$ruleOutCast4 = &_c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$castsubs4 = &_c_lib__mapUtils::readIndex($data, "subs");
array_push($castsubs4, $ruleOutCast4);
if (true) {
$castacsubs0 = &_c_lib__mapUtils::readIndex($data, "subs");
$actionCap0e = &_c_lib__mapUtils::readIndex($data, "e");
$actionCap0subs = &_c_lib__mapUtils::readIndex($data, "subs");
$dataStore["data"] = $actionCap0e;
_c_lib__mapUtils::readIndex($dataStore, "data")["subs"] = $actionCap0subs;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;}
$c = 4;
$this->error->vested++;}}else if ($c == 5) {
$ruleOut5 = $this->Literal_Array($input, $charPos);
if ($ruleOut5->hadError) {
if (true) {
$castacsubs0 = &_c_lib__mapUtils::readIndex($data, "subs");
$actionCap0e = &_c_lib__mapUtils::readIndex($data, "e");
$actionCap0subs = &_c_lib__mapUtils::readIndex($data, "subs");
$dataStore["data"] = $actionCap0e;
_c_lib__mapUtils::readIndex($dataStore, "data")["subs"] = $actionCap0subs;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;}
$c = 0 - 1;
$charPos--;
$this->offset--;}else{
$ruleOutCast5 = &_c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$castsubs4 = &_c_lib__mapUtils::readIndex($data, "subs");
array_push($castsubs4, $ruleOutCast5);
if (true) {
$castacsubs0 = &_c_lib__mapUtils::readIndex($data, "subs");
$actionCap0e = &_c_lib__mapUtils::readIndex($data, "e");
$actionCap0subs = &_c_lib__mapUtils::readIndex($data, "subs");
$dataStore["data"] = $actionCap0e;
_c_lib__mapUtils::readIndex($dataStore, "data")["subs"] = $actionCap0subs;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;}
$c = 4;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function If_Expression(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["subs"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
$ruleOut1 = $this->Operation($input, $charPos);
if ($ruleOut1->hadError) {
$c = 2;
$charPos--;
$this->offset--;}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["e"] = $ruleOutCast1;
$c = 5;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->Call($input, $charPos);
if ($ruleOut2->hadError) {
$c = 3;
$charPos--;
$this->offset--;}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["e"] = $ruleOutCast2;
$c = 5;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->Check($input, $charPos);
if ($ruleOut3->hadError) {
$c = 4;
$charPos--;
$this->offset--;}else{
$ruleOutCast3 = &_c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$data["e"] = $ruleOutCast3;
$c = 5;
$this->error->vested++;}}else if ($c == 4) {
$ruleOut4 = $this->Value($input, $charPos);
if ($ruleOut4->hadError) {
$this->giveError(1, "Operation, Call, Check, Value", $currentChar);}else{
$ruleOutCast4 = &_c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$data["e"] = $ruleOutCast4;
$c = 5;
$this->error->vested++;}}else if ($c == 5) {
$ruleOut5 = $this->Sub($input, $charPos);
if ($ruleOut5->hadError) {
$c = 6;
$charPos--;
$this->offset--;}else{
$ruleOutCast5 = &_c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$castsubs5 = &_c_lib__mapUtils::readIndex($data, "subs");
array_push($castsubs5, $ruleOutCast5);
if (true) {
$castacsubs0 = &_c_lib__mapUtils::readIndex($data, "subs");
$actionCap0e = &_c_lib__mapUtils::readIndex($data, "e");
$actionCap0subs = &_c_lib__mapUtils::readIndex($data, "subs");
$dataStore["data"] = $actionCap0e;
_c_lib__mapUtils::readIndex($dataStore, "data")["subs"] = $actionCap0subs;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;}
$c = 5;
$this->error->vested++;}}else if ($c == 6) {
$ruleOut6 = $this->Literal_Array($input, $charPos);
if ($ruleOut6->hadError) {
if (true) {
$castacsubs0 = &_c_lib__mapUtils::readIndex($data, "subs");
$actionCap0e = &_c_lib__mapUtils::readIndex($data, "e");
$actionCap0subs = &_c_lib__mapUtils::readIndex($data, "subs");
$dataStore["data"] = $actionCap0e;
_c_lib__mapUtils::readIndex($dataStore, "data")["subs"] = $actionCap0subs;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;}
$c = 0 - 1;
$charPos--;
$this->offset--;}else{
$ruleOutCast6 = &_c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$castsubs5 = &_c_lib__mapUtils::readIndex($data, "subs");
array_push($castsubs5, $ruleOutCast6);
if (true) {
$castacsubs0 = &_c_lib__mapUtils::readIndex($data, "subs");
$actionCap0e = &_c_lib__mapUtils::readIndex($data, "e");
$actionCap0subs = &_c_lib__mapUtils::readIndex($data, "subs");
$dataStore["data"] = $actionCap0e;
_c_lib__mapUtils::readIndex($dataStore, "data")["subs"] = $actionCap0subs;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;}
$c = 5;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Safe_Name(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["a"] = "";
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$passed0 = false;
if ($currentCode == 95) {
$passed0 = true;}
if ($passed0 == false) {
if ($currentCode >= 65 and $currentCode <= 90) {
$passed0 = true;}else if ($currentCode >= 97 and $currentCode <= 122) {
$passed0 = true;}else if ($currentCode >= 48 and $currentCode <= 57) {
$passed0 = true;}}
if ($passed0) {
$data["a"] .= $currentChar;
if (true) {
$castaca0 = $data["a"];
$actionCap0a = $data["a"];
$dataStore["data"] = $actionCap0a;}
$c = 0;
$this->error->vested++;}else{
$casta0 = $data["a"];
if (strlen($casta0) >= 1) {
if (true) {
$castaca0 = $data["a"];
$actionCap0a = $data["a"];
$dataStore["data"] = $actionCap0a;}
$c = 0 - 1;
$charPos--;
$this->offset--;}else{
$this->giveError(1, "A-Z, a-z, 0-9, _", $currentChar);}}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Argument(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["a"] = "";
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
$passed1 = false;
if ($currentCode == 95) {
$passed1 = true;}
if ($passed1 == false) {
if ($currentCode >= 65 and $currentCode <= 90) {
$passed1 = true;}else if ($currentCode >= 97 and $currentCode <= 122) {
$passed1 = true;}else if ($currentCode >= 48 and $currentCode <= 57) {
$passed1 = true;}}
if ($passed1) {
$data["a"] .= $currentChar;
if (true) {
$castaca0 = &$data["a"];
$actionCap0a = $data["a"];
$dataStore["data"] = $actionCap0a;}
$c = 1;
$this->error->vested++;}else{
$casta1 = $data["a"];
if (strlen($casta1) >= 1) {
if (true) {
$castaca0 = &$data["a"];
$actionCap0a = $data["a"];
$dataStore["data"] = $actionCap0a;}
$c = 0 - 1;
$charPos--;
$this->offset--;}else{
$this->giveError(1, "A-Z, a-z, 0-9, _", $currentChar);}}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Literal_Map(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->Json($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "Json(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = &_c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["m"] = $ruleOutCast0;
if (true) {
$castacm0 = &_c_lib__mapUtils::readIndex($data, "m");
$actionCap0m = &_c_lib__mapUtils::readIndex($data, "m");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "map";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0m;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Value(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->Literal_String($input, $charPos);
if ($ruleOut0->hadError) {
$c = 1;
$charPos--;
$this->offset--;}else{
$ruleOutCast0 = &_c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["v"] = $ruleOutCast0;
if (true) {
$castacv0 = &_c_lib__mapUtils::readIndex($data, "v");
$actionCap0v = &_c_lib__mapUtils::readIndex($data, "v");
$dataStore["data"] = $actionCap0v;
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 1) {
$ruleOut1 = $this->Number($input, $charPos);
if ($ruleOut1->hadError) {
$c = 2;
$charPos--;
$this->offset--;}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["v"] = $ruleOutCast1;
if (true) {
$castacv0 = &_c_lib__mapUtils::readIndex($data, "v");
$actionCap0v = &_c_lib__mapUtils::readIndex($data, "v");
$dataStore["data"] = $actionCap0v;
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->Literal_Array($input, $charPos);
if ($ruleOut2->hadError) {
$c = 3;
$charPos--;
$this->offset--;}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["v"] = $ruleOutCast2;
if (true) {
$castacv0 = &_c_lib__mapUtils::readIndex($data, "v");
$actionCap0v = &_c_lib__mapUtils::readIndex($data, "v");
$dataStore["data"] = $actionCap0v;
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->Literal_Map($input, $charPos);
if ($ruleOut3->hadError) {
$c = 4;
$charPos--;
$this->offset--;}else{
$ruleOutCast3 = &_c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$data["v"] = $ruleOutCast3;
if (true) {
$castacv0 = &_c_lib__mapUtils::readIndex($data, "v");
$actionCap0v = &_c_lib__mapUtils::readIndex($data, "v");
$dataStore["data"] = $actionCap0v;
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 4) {
$ruleOut4 = $this->Bool($input, $charPos);
if ($ruleOut4->hadError) {
$c = 5;
$charPos--;
$this->offset--;}else{
$ruleOutCast4 = &_c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$data["v"] = $ruleOutCast4;
if (true) {
$castacv0 = &_c_lib__mapUtils::readIndex($data, "v");
$actionCap0v = &_c_lib__mapUtils::readIndex($data, "v");
$dataStore["data"] = $actionCap0v;
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 5) {
$ruleOut5 = $this->Constant($input, $charPos);
if ($ruleOut5->hadError) {
$this->giveError(1, "Literal_String, Number, Literal_Array, Literal_Map, Bool, Constant", $currentChar);}else{
$ruleOutCast5 = &_c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$data["v"] = $ruleOutCast5;
if (true) {
$castacv0 = &_c_lib__mapUtils::readIndex($data, "v");
$actionCap0v = &_c_lib__mapUtils::readIndex($data, "v");
$dataStore["data"] = $actionCap0v;
_c_lib__mapUtils::readIndex($dataStore, "data")["offset"] = $charPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["startOffset"] = $startPos;}
$c = 0 - 1;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Literal_String(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->String($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "String(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["str"] = $ruleOutCast0;
if (true) {
$castacstr0 = _c_lib__mapUtils::readIndex($data, "str");
$actionCap0str = _c_lib__mapUtils::readIndex($data, "str");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "string";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0str;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Number(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["n"] = "";
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 45) {
$data["neg"] = "-";
$c = 1;
$this->error->vested++;}else{
$c = 1;
$charPos--;
$this->offset--;}}else if ($c == 1) {
$passed1 = false;
if ($currentCode == 46) {
$passed1 = true;}
if ($passed1 == false) {
if ($currentCode >= 48 and $currentCode <= 57) {
$passed1 = true;}}
if ($passed1) {
$data["n"] .= $currentChar;
if (true) {
$castacn0 = &_c_lib__mapUtils::readIndex($data, "n");
$actionCap0neg = _c_lib__mapUtils::readIndex($data, "neg");
$actionCap0n = _c_lib__mapUtils::readIndex($data, "n");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "number";
_c_lib__mapUtils::readIndex($dataStore, "data")["negative"] = $actionCap0neg;
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = floatval($actionCap0n);}
$c = 1;
$this->error->vested++;}else{
$castn1 = _c_lib__mapUtils::readIndex($data, "n");
if (strlen($castn1) >= 1) {
if (true) {
$castacn0 = &_c_lib__mapUtils::readIndex($data, "n");
$actionCap0neg = _c_lib__mapUtils::readIndex($data, "neg");
$actionCap0n = _c_lib__mapUtils::readIndex($data, "n");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "number";
_c_lib__mapUtils::readIndex($dataStore, "data")["negative"] = $actionCap0neg;
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = floatval($actionCap0n);}
$c = 0 - 1;
$charPos--;
$this->offset--;}else{
$this->giveError(1, "0-9, .", $currentChar);}}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Literal_Array(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["items"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 91) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "[", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Expression($input, $charPos);
if ($ruleOut2->hadError) {
$c = 3;
$charPos--;
$this->offset--;
if ($ruleOut2->error->vested > 1) {
$this->giveError($ruleOut2->error->code, $ruleOut2->error->expected, $ruleOut2->error->found);}}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$castitems2 = &_c_lib__mapUtils::readIndex($data, "items");
array_push($castitems2, $ruleOutCast2);
if (ord($input[$charPos + 1]) != 44) {
$c = 3;
continue;}else{
$charPos++;}
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 2;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
if ($currentCode == 93) {
if (true) {
$castac0 = &$data;
$actionCap0items = &_c_lib__mapUtils::readIndex($data, "items");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "array";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0items;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "]", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Bool(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [116, 114, 117, 101];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 4) {
if (true) {
$castacvalue0 = _c_lib__mapUtils::readIndex($data, "value");
$data["value"] = true;}
if (true) {
$castacvalue0 = &_c_lib__mapUtils::readIndex($data, "value");
$actionCap0value = &_c_lib__mapUtils::readIndex($data, "value");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "bool";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0value;}
if (true) {
$castacvalue0 = &_c_lib__mapUtils::readIndex($data, "value");
$actionCap0value = &_c_lib__mapUtils::readIndex($data, "value");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "bool";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0value;}
$c = 0 - 1;
$literalChar = 0;}
$this->error->vested++;}else{
$c = 1;
$charPos--;
$this->offset--;}}else if ($c == 1) {
$lit1 = [102, 97, 108, 115, 101];
if ($currentCode == _c_lib__arrUtils::readIndex($lit1, $literalChar)) {
$literalChar++;
if ($literalChar == 5) {
if (true) {
$castacvalue1 = _c_lib__mapUtils::readIndex($data, "value");
$data["value"] = false;}
if (true) {
$castacvalue0 = &_c_lib__mapUtils::readIndex($data, "value");
$actionCap0value = &_c_lib__mapUtils::readIndex($data, "value");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "bool";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0value;}
if (true) {
$castacvalue0 = &_c_lib__mapUtils::readIndex($data, "value");
$actionCap0value = &_c_lib__mapUtils::readIndex($data, "value");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "bool";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0value;}
$c = 0 - 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "true, false", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Constant(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->Safe_Name($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "Safe_Name(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["name"] = $ruleOutCast0;
if (true) {
$castacname0 = _c_lib__mapUtils::readIndex($data, "name");
$actionCap0name = _c_lib__mapUtils::readIndex($data, "name");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "constant";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0name;}
$c = 0 - 1;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Group(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 40) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "(", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->Expression($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "Expression(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast1;
$c = 2;
$this->error->vested++;}}else if ($c == 2) {
if ($currentCode == 41) {
if (true) {
$castac0 = &$data;
$actionCap0exp = &_c_lib__mapUtils::readIndex($data, "exp");
$dataStore["data"] = $actionCap0exp;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, ")", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Operation(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["o"] = "";
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->Group($input, $charPos);
if ($ruleOut0->hadError) {
$c = 1;
$charPos--;
$this->offset--;}else{
$ruleOutCast0 = &_c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["head"] = $ruleOutCast0;
$c = 3;
$this->error->vested++;}}else if ($c == 1) {
$ruleOut1 = $this->Call($input, $charPos);
if ($ruleOut1->hadError) {
$c = 2;
$charPos--;
$this->offset--;}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["head"] = $ruleOutCast1;
$c = 3;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->Value($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError(1, "Group, Call, Value", $currentChar);}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["head"] = $ruleOutCast2;
$c = 3;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
$passed4 = false;
if ($currentCode == 33) {
$passed4 = true;}else if ($currentCode == 64) {
$passed4 = true;}else if ($currentCode == 36) {
$passed4 = true;}else if ($currentCode == 37) {
$passed4 = true;}else if ($currentCode == 38) {
$passed4 = true;}else if ($currentCode == 94) {
$passed4 = true;}else if ($currentCode == 43) {
$passed4 = true;}else if ($currentCode == 42) {
$passed4 = true;}else if ($currentCode == 45) {
$passed4 = true;}else if ($currentCode == 47) {
$passed4 = true;}else if ($currentCode == 63) {
$passed4 = true;}else if ($currentCode == 62) {
$passed4 = true;}else if ($currentCode == 60) {
$passed4 = true;}else if ($currentCode == 124) {
$passed4 = true;}else if ($currentCode == 61) {
$passed4 = true;}
if ($passed4 == false) {
}
if ($passed4) {
$data["o"] .= $currentChar;
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 4;
$this->error->vested++;}else{
$casto4 = _c_lib__mapUtils::readIndex($data, "o");
if (strlen($casto4) >= 1) {
$c = 5;
$charPos--;
$this->offset--;}else{
$this->giveError(1, "!, @, \$, %, &, ^, +, *, -, /, ?, >, <, |, =", $currentChar);}}}else if ($c == 5) {
$ruleOut5 = $this->_($input, $charPos);
if ($ruleOut5->hadError) {
$this->giveError($ruleOut5->error->code, "White space(optional)(" . $ruleOut5->error->expected . ")", $ruleOut5->error->found);}else{
$ruleOutCast5 = _c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$c = 6;}}else if ($c == 6) {
$ruleOut6 = $this->Group($input, $charPos);
if ($ruleOut6->hadError) {
$c = 7;
$charPos--;
$this->offset--;}else{
$ruleOutCast6 = &_c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$data["tail"] = $ruleOutCast6;
if (true) {
$castactail0 = &_c_lib__mapUtils::readIndex($data, "tail");
$actionCap0head = &_c_lib__mapUtils::readIndex($data, "head");
$actionCap0o = _c_lib__mapUtils::readIndex($data, "o");
$actionCap0tail = &_c_lib__mapUtils::readIndex($data, "tail");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "operation";
_c_lib__mapUtils::readIndex($dataStore, "data")["head"] = $actionCap0head;
_c_lib__mapUtils::readIndex($dataStore, "data")["operator"] = $actionCap0o;
_c_lib__mapUtils::readIndex($dataStore, "data")["tail"] = $actionCap0tail;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 7) {
$ruleOut7 = $this->Call($input, $charPos);
if ($ruleOut7->hadError) {
$c = 8;
$charPos--;
$this->offset--;}else{
$ruleOutCast7 = &_c_lib__mapUtils::readIndex($ruleOut7->data, "data");
$charPos = $this->offset;
$data["tail"] = $ruleOutCast7;
if (true) {
$castactail0 = &_c_lib__mapUtils::readIndex($data, "tail");
$actionCap0head = &_c_lib__mapUtils::readIndex($data, "head");
$actionCap0o = _c_lib__mapUtils::readIndex($data, "o");
$actionCap0tail = &_c_lib__mapUtils::readIndex($data, "tail");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "operation";
_c_lib__mapUtils::readIndex($dataStore, "data")["head"] = $actionCap0head;
_c_lib__mapUtils::readIndex($dataStore, "data")["operator"] = $actionCap0o;
_c_lib__mapUtils::readIndex($dataStore, "data")["tail"] = $actionCap0tail;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 8) {
$ruleOut8 = $this->Value($input, $charPos);
if ($ruleOut8->hadError) {
$this->giveError(1, "Group, Call, Value", $currentChar);}else{
$ruleOutCast8 = &_c_lib__mapUtils::readIndex($ruleOut8->data, "data");
$charPos = $this->offset;
$data["tail"] = $ruleOutCast8;
if (true) {
$castactail0 = &_c_lib__mapUtils::readIndex($data, "tail");
$actionCap0head = &_c_lib__mapUtils::readIndex($data, "head");
$actionCap0o = _c_lib__mapUtils::readIndex($data, "o");
$actionCap0tail = &_c_lib__mapUtils::readIndex($data, "tail");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "operation";
_c_lib__mapUtils::readIndex($dataStore, "data")["head"] = $actionCap0head;
_c_lib__mapUtils::readIndex($dataStore, "data")["operator"] = $actionCap0o;
_c_lib__mapUtils::readIndex($dataStore, "data")["tail"] = $actionCap0tail;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Check(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->Value($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "Value(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = &_c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["what"] = $ruleOutCast0;
$c = 1;
$this->error->vested++;}}else if ($c == 1) {
$ruleOut1 = $this->__($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Value($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "Value(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["against"] = $ruleOutCast2;
if (true) {
$castacagainst0 = &_c_lib__mapUtils::readIndex($data, "against");
$actionCap0what = &_c_lib__mapUtils::readIndex($data, "what");
$actionCap0against = &_c_lib__mapUtils::readIndex($data, "against");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "check";
_c_lib__mapUtils::readIndex($dataStore, "data")["what"] = $actionCap0what;
_c_lib__mapUtils::readIndex($dataStore, "data")["against"] = $actionCap0against;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Call(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["params"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->Value($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "Value(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = &_c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["term"] = $ruleOutCast0;
$c = 1;
$this->error->vested++;}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
if ($currentCode == 40) {
$c = 3;
$this->error->vested++;}else{
$this->giveError(1, "(", $currentChar);}}else if ($c == 3) {
$ruleOut3 = $this->Expression($input, $charPos);
if ($ruleOut3->hadError) {
$c = 4;
$charPos--;
$this->offset--;
if ($ruleOut3->error->vested > 1) {
$this->giveError($ruleOut3->error->code, $ruleOut3->error->expected, $ruleOut3->error->found);}}else{
$ruleOutCast3 = &_c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$castparams3 = &_c_lib__mapUtils::readIndex($data, "params");
array_push($castparams3, $ruleOutCast3);
if (ord($input[$charPos + 1]) != 44) {
$c = 4;
continue;}else{
$charPos++;}
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 3;
$this->error->vested++;}}else if ($c == 4) {
$ruleOut4 = $this->_($input, $charPos);
if ($ruleOut4->hadError) {
$this->giveError($ruleOut4->error->code, "White space(optional)(" . $ruleOut4->error->expected . ")", $ruleOut4->error->found);}else{
$ruleOutCast4 = _c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$c = 5;}}else if ($c == 5) {
if ($currentCode == 41) {
if (true) {
$castac0 = &$data;
$actionCap0term = &_c_lib__mapUtils::readIndex($data, "term");
$actionCap0params = &_c_lib__mapUtils::readIndex($data, "params");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "call";
_c_lib__mapUtils::readIndex($dataStore, "data")["term"] = $actionCap0term;
_c_lib__mapUtils::readIndex($dataStore, "data")["args"] = $actionCap0params;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, ")", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function _(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$passed0 = false;
if ($currentCode == 32) {
$passed0 = true;}else if ($currentCode == 9) {
$passed0 = true;}else if ($currentCode == 13) {
$passed0 = true;}else if ($currentCode == 10) {
$passed0 = true;}
if ($passed0 == false) {
}
if ($passed0) {
$c = 0;
$this->error->vested++;}else{
$c = 0 - 1;
$charPos--;
$this->offset--;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function __(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["w"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$passed0 = false;
if ($currentCode == 32) {
$passed0 = true;}else if ($currentCode == 9) {
$passed0 = true;}else if ($currentCode == 13) {
$passed0 = true;}else if ($currentCode == 10) {
$passed0 = true;}
if ($passed0 == false) {
}
if ($passed0) {
$castw0 = &$data["w"];
array_push($castw0, $currentChar);
$c = 0;
$this->error->vested++;}else{
$castw0 = &$data["w"];
if (count($castw0) >= 1) {
$c = 0 - 1;
$charPos--;
$this->offset--;}else{
$this->giveError(1, " , \t, \\ r, \n", $currentChar);}}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function String(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->String_Double($input, $charPos);
if ($ruleOut0->hadError) {
$c = 1;
$charPos--;
$this->offset--;}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["str"] = $ruleOutCast0;
if (true) {
$castacstr0 = &$data["str"];
$actionCap0str = &$data["str"];
$dataStore["data"] = $actionCap0str;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 1) {
$ruleOut1 = $this->String_Single($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError(1, "String_Double, String_Single", $currentChar);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["str"] = $ruleOutCast1;
if (true) {
$castacstr0 = &$data["str"];
$actionCap0str = &$data["str"];
$dataStore["data"] = $actionCap0str;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function String_Double(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["str"] = "";
$escaped = false;
$escapeCodes = ['_c__mapC' => true];
$escapeCodes["n"] = "\n";
$escapeCodes["b"] = "";
$escapeCodes["f"] = "";
$escapeCodes["r"] = "\\ r";
$escapeCodes["t"] = "\t";
$escapeCodes["v"] = "";
$escapeCodes["\\"] = "\\";
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 34) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "\"", $currentChar);}}else if ($c == 1) {
$castnacstr1 = $data["str"];
$doCapture = true;
if ($currentChar == "\\") {
if ($escaped == false) {
$escaped = true;
$doCapture = false;}}
if ($currentChar == "\"") {
if ($escaped == false) {
$doCapture = false;
$c = 2;
$charPos--;
$this->offset--;}
$escaped = false;}else if ($escaped and $doCapture == true) {
$doCapture = false;
$data["str"] .= _c_lib__mapUtils::readIndex($escapeCodes, $currentChar);
$escaped = false;}
if ($doCapture) {
$data["str"] .= $currentChar;}}else if ($c == 2) {
if ($currentCode == 34) {
if (true) {
$castac0 = &$data;
$actionCap0str = $data["str"];
$dataStore["data"] = $actionCap0str;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "\"", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function String_Single(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["str"] = "";
$escaped = false;
$escapeCodes = ['_c__mapC' => true];
$escapeCodes["n"] = "\n";
$escapeCodes["b"] = "";
$escapeCodes["f"] = "";
$escapeCodes["r"] = "\\ r";
$escapeCodes["t"] = "\t";
$escapeCodes["v"] = "";
$escapeCodes["\\"] = "\\";
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 39) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "'", $currentChar);}}else if ($c == 1) {
$castnacstr1 = $data["str"];
$doCapture = true;
if ($currentChar == "\\") {
if ($escaped == false) {
$escaped = true;
$doCapture = false;}}
if ($currentChar == "'") {
if ($escaped == false) {
$doCapture = false;
$c = 2;
$charPos--;
$this->offset--;}
$escaped = false;}else if ($escaped and $doCapture == true) {
$doCapture = false;
$data["str"] .= _c_lib__mapUtils::readIndex($escapeCodes, $currentChar);
$escaped = false;}
if ($doCapture) {
$data["str"] .= $currentChar;}}else if ($c == 2) {
if ($currentCode == 39) {
if (true) {
$castac0 = &$data;
$actionCap0str = $data["str"];
$dataStore["data"] = $actionCap0str;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "'", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Json(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["keys"] = [];
$captureRoot1 = ['_c__mapC' => true];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 123) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "{", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->_($input, $charPos);
if ($ruleOut2->hadError) {
$c = 9;
$charPos--;
$this->offset--;}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$c = 3;}}else if ($c == 3) {
$ruleOut3 = $this->String($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "String(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$captureRoot1["key"] = $ruleOutCast3;
$c = 4;
$this->error->vested++;}}else if ($c == 4) {
$ruleOut4 = $this->_($input, $charPos);
if ($ruleOut4->hadError) {
$this->giveError($ruleOut4->error->code, "White space(optional)(" . $ruleOut4->error->expected . ")", $ruleOut4->error->found);}else{
$ruleOutCast4 = _c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$c = 5;}}else if ($c == 5) {
if ($currentCode == 58) {
$c = 6;
$this->error->vested++;}else{
$this->giveError(1, ":", $currentChar);}}else if ($c == 6) {
$ruleOut6 = $this->_($input, $charPos);
if ($ruleOut6->hadError) {
$this->giveError($ruleOut6->error->code, "White space(optional)(" . $ruleOut6->error->expected . ")", $ruleOut6->error->found);}else{
$ruleOutCast6 = _c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$c = 7;}}else if ($c == 7) {
$ruleOut7 = $this->Json_Value($input, $charPos);
if ($ruleOut7->hadError) {
$this->giveError($ruleOut7->error->code, "Json_Value(" . $ruleOut7->error->expected . ")", $ruleOut7->error->found);}else{
$ruleOutCast7 = _c_lib__mapUtils::readIndex($ruleOut7->data, "data");
$charPos = $this->offset;
$captureRoot1["val"] = $ruleOutCast7;
$c = 8;
$this->error->vested++;}}else if ($c == 8) {
$ruleOut8 = $this->_($input, $charPos);
if ($ruleOut8->hadError) {
$c = 9;
$charPos--;
$this->offset--;}else{
$ruleOutCast8 = _c_lib__mapUtils::readIndex($ruleOut8->data, "data");
$charPos = $this->offset;
$castkeys2 = &_c_lib__mapUtils::readIndex($data, "keys");
array_push($castkeys2, $captureRoot1);
if (ord($input[$charPos + 1]) != 44) {
$c = 9;
continue;}else{
$charPos++;}
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$captureRoot1 = ['_c__mapC' => true];
$c = 2;}}else if ($c == 9) {
$ruleOut9 = $this->_($input, $charPos);
if ($ruleOut9->hadError) {
$this->giveError($ruleOut9->error->code, "White space(optional)(" . $ruleOut9->error->expected . ")", $ruleOut9->error->found);}else{
$ruleOutCast9 = _c_lib__mapUtils::readIndex($ruleOut9->data, "data");
$charPos = $this->offset;
$c = 10;}}else if ($c == 10) {
if ($currentCode == 125) {
if (true) {
$castac0 = &$data;
$actionCap0keys = &_c_lib__mapUtils::readIndex($data, "keys");
for ($i = 0; $i < count($actionCap0keys); $i++) {
$k = &_c_lib__arrUtils::readIndex($actionCap0keys, $i);
$key = _c_lib__mapUtils::readIndex($k, "key");
_c_lib__mapUtils::readIndex($dataStore, "data")[$key] = _c_lib__mapUtils::readIndex($k, "val");}}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "}", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Json_Array(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["vals"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 91) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "[", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Json_Value($input, $charPos);
if ($ruleOut2->hadError) {
$c = 3;
$charPos--;
$this->offset--;
if ($ruleOut2->error->vested > 1) {
$this->giveError($ruleOut2->error->code, $ruleOut2->error->expected, $ruleOut2->error->found);}}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$castvals2 = &_c_lib__mapUtils::readIndex($data, "vals");
array_push($castvals2, $ruleOutCast2);
if (ord($input[$charPos + 1]) != 44) {
$c = 3;
continue;}else{
$charPos++;}
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 2;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
if ($currentCode == 93) {
if (true) {
$castac0 = &$data;
$actionCap0vals = &_c_lib__mapUtils::readIndex($data, "vals");
$dataStore["data"] = $actionCap0vals;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "]", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Json_EmptyArray(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = [];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 91) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "[", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
if ($currentCode == 93) {
if (true) {
$castac0 = &$data;
$data = [];}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "]", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Json_EmptyMap(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 123) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "{", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
if ($currentCode == 125) {
if (true) {
$castac0 = &$data;
$data = ['_c__mapC' => true];}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "}", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Json_Value(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = 0;
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
$lit1 = [110, 117, 108, 108];
if ($currentCode == _c_lib__arrUtils::readIndex($lit1, $literalChar)) {
$literalChar++;
if ($literalChar == 4) {
if (true) {
$castacexp1 = $data["exp"];
$data["exp"] = null;}
$c = 10;
$literalChar = 0;}
$this->error->vested++;}else{
$c = 2;
$charPos--;
$this->offset--;}}else if ($c == 2) {
$lit2 = [116, 114, 117, 101];
if ($currentCode == _c_lib__arrUtils::readIndex($lit2, $literalChar)) {
$literalChar++;
if ($literalChar == 4) {
if (true) {
$castacexp2 = $data["exp"];
$data["exp"] = true;}
$c = 10;
$literalChar = 0;}
$this->error->vested++;}else{
$c = 3;
$charPos--;
$this->offset--;}}else if ($c == 3) {
$lit3 = [102, 97, 108, 115, 101];
if ($currentCode == _c_lib__arrUtils::readIndex($lit3, $literalChar)) {
$literalChar++;
if ($literalChar == 5) {
if (true) {
$castacexp3 = $data["exp"];
$data["exp"] = false;}
$c = 10;
$literalChar = 0;}
$this->error->vested++;}else{
$c = 4;
$charPos--;
$this->offset--;}}else if ($c == 4) {
$ruleOut4 = $this->Json_EmptyArray($input, $charPos);
if ($ruleOut4->hadError) {
$c = 5;
$charPos--;
$this->offset--;}else{
$ruleOutCast4 = &_c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast4;
$c = 10;
$this->error->vested++;}}else if ($c == 5) {
$ruleOut5 = $this->Json_EmptyMap($input, $charPos);
if ($ruleOut5->hadError) {
$c = 6;
$charPos--;
$this->offset--;}else{
$ruleOutCast5 = &_c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast5;
$c = 10;
$this->error->vested++;}}else if ($c == 6) {
$ruleOut6 = $this->Json_Array($input, $charPos);
if ($ruleOut6->hadError) {
$c = 7;
$charPos--;
$this->offset--;}else{
$ruleOutCast6 = &_c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast6;
$c = 10;
$this->error->vested++;}}else if ($c == 7) {
$ruleOut7 = $this->Json($input, $charPos);
if ($ruleOut7->hadError) {
$c = 8;
$charPos--;
$this->offset--;}else{
$ruleOutCast7 = &_c_lib__mapUtils::readIndex($ruleOut7->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast7;
$c = 10;
$this->error->vested++;}}else if ($c == 8) {
$ruleOut8 = $this->String($input, $charPos);
if ($ruleOut8->hadError) {
$c = 9;
$charPos--;
$this->offset--;}else{
$ruleOutCast8 = _c_lib__mapUtils::readIndex($ruleOut8->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast8;
$c = 10;
$this->error->vested++;}}else if ($c == 9) {
$ruleOut9 = $this->Json_Number($input, $charPos);
if ($ruleOut9->hadError) {
$this->giveError(1, "null, true, false, Json_EmptyArray, Json_EmptyMap, Json_Array, Json, String, Json_Number", $currentChar);}else{
$ruleOutCast9 = _c_lib__mapUtils::readIndex($ruleOut9->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast9;
$c = 10;}}else if ($c == 10) {
$ruleOut10 = $this->_($input, $charPos);
if ($ruleOut10->hadError) {
$this->giveError($ruleOut10->error->code, "White space(optional)(" . $ruleOut10->error->expected . ")", $ruleOut10->error->found);}else{
$ruleOutCast10 = _c_lib__mapUtils::readIndex($ruleOut10->data, "data");
$charPos = $this->offset;
if (true) {
$castac0 = $data;
$actionCap0exp = &$data["exp"];
$dataStore["data"] = $actionCap0exp;}
$c = 0 - 1;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Json_Number(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = 0;
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["nums"] = "";
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$passed0 = false;
if ($currentCode == 45) {
$passed0 = true;}else if ($currentCode == 46) {
$passed0 = true;}
if ($passed0 == false) {
if ($currentCode >= 48 and $currentCode <= 57) {
$passed0 = true;}}
if ($passed0) {
$data["nums"] .= $currentChar;
if (true) {
$castacnums0 = $data["nums"];
$actionCap0nums = $data["nums"];
$dataStore["data"] = intval($actionCap0nums);}
$c = 0;
$this->error->vested++;}else{
$castnums0 = $data["nums"];
if (strlen($castnums0) >= 1) {
if (true) {
$castacnums0 = $data["nums"];
$actionCap0nums = $data["nums"];
$dataStore["data"] = intval($actionCap0nums);}
$c = 0 - 1;
$charPos--;
$this->offset--;}else{
$this->giveError(1, "0-9, -, .", $currentChar);}}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbonitePreprocessorOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}


}class PipelineParserLocation {
public $offset;

public $line;

public $column;

function __construct(...$arguments) {
$this->offset = 0;
$this->line = 1;
$this->column = 0;

if (count($arguments) == 3 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'integer' or gettype($arguments[2]) == 'NULL')) {
$offset = $arguments[0];
$line = $arguments[1];
$column = $arguments[2];
$this->offset = $offset;
$this->line = $line;
$this->column = $column;
}

}

}class PipelineParserError {
public $code;

public $found;

public $expected;

public $vested;

public $path;

public $offset;

public $line;

public $column;

function __construct(...$arguments) {
$this->code = 0;
$this->found = 0;
$this->expected = 0;
$this->vested = 0;
$this->path = [];
$this->offset = 0;
$this->line = 1;
$this->column = 0;

if (count($arguments) == 3 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'integer' or gettype($arguments[2]) == 'NULL')) {
$offset = $arguments[0];
$line = $arguments[1];
$column = $arguments[2];
$this->offset = $offset;
$this->line = $line;
$this->column = $column;
}

}
function _c__clone(...$arguments) {
if (count($arguments) == 0) {
$_c__clone = new PipelineParserError($this->offset, $this->line, $this->column);
$_c__clone->code = $this->code;
$_c__clone->found = $this->found;
$_c__clone->expected = $this->expected;
$_c__clone->vested = $this->vested;
for ($i = 0; $i < count($this->path); $i++) {
$current = _c_lib__arrUtils::readIndex($this->path, $i);
array_push($_c__clone->path, $current->_c__clone());}
return $_c__clone;
}
}


}class PipelineParserOutput {
public $error;

public $hadError;

public $data;

function __construct(...$arguments) {
$this->error = null;
$this->hadError = false;
$this->data = ['_c__mapC' => true];

if (count($arguments) == 3 and (gettype($arguments[0]) == 'boolean' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\PipelineParserError') or gettype($arguments[1]) == 'NULL') and ((gettype($arguments[2]) == 'array' and isset($arguments[2]['_c__mapC'])) or gettype($arguments[2]) == 'NULL')) {
$hadError = $arguments[0];
$error = $arguments[1];
$data = $arguments[2];
$this->hadError = $hadError;
$this->error = $error;
$this->data = $data;
}

}

}class PipelineParser {
public $lastErrors;

public $hadError;

public $parsedChars;

public $currentInput;

public $data;

public $error;

public $offset;

public $line;

public $column;

function __construct(...$arguments) {
$this->lastErrors = [];
$this->hadError = false;
$this->parsedChars = 0;
$this->currentInput = "";
$this->data = ['_c__mapC' => true];
$this->error = new PipelineParserError(0, 0, 0);
$this->offset = 0;
$this->line = 1;
$this->column = 0;

if (count($arguments) == 0) {

}

}
static function parse(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$input = $arguments[0];
$parser = new PipelineParser();
$output = &$parser->start($input);
if ($parser->hadError and $parser->error->found == chr(1)) {
$parser->error->found = "End of input";}
$rtn = new PipelineParserOutput($parser->hadError, $parser->error, _c_lib__mapUtils::readIndex($parser->data, "data"));
return $rtn;
}
else if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL')) {
$rule = $arguments[0];
$input = $arguments[1];
$parser = new PipelineParser();
$input .= chr(1);
$parser->currentInput = $input;
$parser->data["data"] = ['_c__mapC' => true];
$output = null;
if ($rule == "Call") {
$output = $parser->Call($input, 0);}else{
if ($rule == "Rule") {
$output = $parser->Rule($input, 0);}else{
if ($rule == "Safe_Name") {
$output = $parser->Safe_Name($input, 0);}else{
if ($rule == "Value") {
$output = $parser->Value($input, 0);}else{
if ($rule == "Literal_Boolean") {
$output = $parser->Literal_Boolean($input, 0);}else{
if ($rule == "Literal_String") {
$output = $parser->Literal_String($input, 0);}else{
if ($rule == "Literal_Number") {
$output = $parser->Literal_Number($input, 0);}else{
if ($rule == "Literal") {
$output = $parser->Literal($input, 0);}else{
if ($rule == "Reference") {
$output = $parser->Reference($input, 0);}else{
if ($rule == "_") {
$output = $parser->_($input, 0);}else{
if ($rule == "__") {
$output = $parser->__($input, 0);}else{
if ($rule == "String") {
$output = $parser->String($input, 0);}else{
if ($rule == "String_Double") {
$output = $parser->String_Double($input, 0);}else{
if ($rule == "String_Single") {
$output = $parser->String_Single($input, 0);}}}}}}}}}}}}}}
if ($parser->hadError and $parser->error->found == chr(1)) {
$parser->error->found = "End of input";}
for ($i = 0;$i < $parser->error->offset;$i++) {
$parser->error->column++;
if ($parser->currentInput[$i] == "\n") {
$parser->error->line++;
$parser->error->column = 0;}}
$rtn = new PipelineParserOutput($output->hadError, $output->error, $output->data);
return $rtn;
}
}

function assembleCodes(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$codes = $arguments[0];
$rtn = "";
for ($i = 0; $i < count($codes); $i++) {
$rtn .= chr(_c_lib__arrUtils::readIndex($codes, $i));}
return $rtn;
}
}

function giveError(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'string' or gettype($arguments[2]) == 'NULL')) {
$code = $arguments[0];
$expected = $arguments[1];
$found = $arguments[2];
$this->hadError = true;
$this->error->code = $code;
$this->error->expected = $expected;
$this->error->found = $found;
$this->error->offset = $this->offset;
$this->error->line = 1;
$this->error->column = 0;
}
}

function &start(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$input = $arguments[0];
$this->currentInput = $input;
$input .= chr(1);
$this->data["data"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($this->data, "data");
$c = 0;
$data["rules"] = [];
$literalChar = 0;
for ($charPos = 0;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($c == 0 - 1) {
if ($currentChar != chr(1)) {
$this->giveError(2, "EOF", $currentChar);}}
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->Rule($input, $charPos);
if ($ruleOut0->hadError) {
$c = 1;
$charPos--;
$this->offset--;}else{
$ruleOutCast0 = &_c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$castrules0 = &_c_lib__mapUtils::readIndex($data, "rules");
array_push($castrules0, $ruleOutCast0);
$c = 0;
$this->error->vested++;}}else if ($c == 1) {
$ruleOut1 = $this->Call($input, $charPos);
if ($ruleOut1->hadError) {
$c = 0 - 1;
$charPos--;
$this->offset--;}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$castrules0 = &_c_lib__mapUtils::readIndex($data, "rules");
array_push($castrules0, $ruleOutCast1);
$c = 0;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($this->hadError) {
break;}}
for ($i = 0;$i < $this->error->offset;$i++) {
$this->error->column++;
if ($this->currentInput[$i] == "\n") {
$this->error->line++;
$this->error->column = 0;}}
if (false and $this->hadError == false) {
if ($this->offset < strlen($input) - 1) {
$this->giveError(2, "EOF", $input[$this->offset + 1]);}}
}
}

function Call(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["values"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
$ruleOut1 = $this->Safe_Name($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "Safe_Name(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["name"] = $ruleOutCast1;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->_($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "White space(optional)(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$c = 3;}}else if ($c == 3) {
if ($currentCode == 40) {
$c = 4;
$this->error->vested++;}else{
$this->giveError(1, "(", $currentChar);}}else if ($c == 4) {
$ruleOut4 = $this->_($input, $charPos);
if ($ruleOut4->hadError) {
$this->giveError($ruleOut4->error->code, "White space(optional)(" . $ruleOut4->error->expected . ")", $ruleOut4->error->found);}else{
$ruleOutCast4 = _c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$c = 5;}}else if ($c == 5) {
$ruleOut5 = $this->Value($input, $charPos);
if ($ruleOut5->hadError) {
$c = 6;
$charPos--;
$this->offset--;
if ($ruleOut5->error->vested > 1) {
$this->giveError($ruleOut5->error->code, $ruleOut5->error->expected, $ruleOut5->error->found);}}else{
$ruleOutCast5 = &_c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$castvalues5 = &_c_lib__mapUtils::readIndex($data, "values");
array_push($castvalues5, $ruleOutCast5);
if (ord($input[$charPos + 1]) != 44) {
$c = 6;
continue;}else{
$charPos++;}
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 5;
$this->error->vested++;}}else if ($c == 6) {
$ruleOut6 = $this->_($input, $charPos);
if ($ruleOut6->hadError) {
$this->giveError($ruleOut6->error->code, "White space(optional)(" . $ruleOut6->error->expected . ")", $ruleOut6->error->found);}else{
$ruleOutCast6 = _c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$c = 7;}}else if ($c == 7) {
if ($currentCode == 41) {
if (true) {
$castac0 = &$data;
$actionCap0name = _c_lib__mapUtils::readIndex($data, "name");
$actionCap0values = &_c_lib__mapUtils::readIndex($data, "values");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "call";
_c_lib__mapUtils::readIndex($dataStore, "data")["name"] = $actionCap0name;
_c_lib__mapUtils::readIndex($dataStore, "data")["arguments"] = $actionCap0values;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, ")", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new PipelineParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Rule(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
$ruleOut1 = $this->Safe_Name($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "Safe_Name(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["name"] = $ruleOutCast1;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->_($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "White space(optional)(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$c = 3;}}else if ($c == 3) {
if ($currentCode == 61) {
$c = 4;
$this->error->vested++;}else{
$this->giveError(1, "=", $currentChar);}}else if ($c == 4) {
$ruleOut4 = $this->_($input, $charPos);
if ($ruleOut4->hadError) {
$this->giveError($ruleOut4->error->code, "White space(optional)(" . $ruleOut4->error->expected . ")", $ruleOut4->error->found);}else{
$ruleOutCast4 = _c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$c = 5;}}else if ($c == 5) {
$ruleOut5 = $this->Value($input, $charPos);
if ($ruleOut5->hadError) {
$this->giveError($ruleOut5->error->code, "Value(" . $ruleOut5->error->expected . ")", $ruleOut5->error->found);}else{
$ruleOutCast5 = &_c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$data["value"] = $ruleOutCast5;
if (true) {
$castacvalue0 = &_c_lib__mapUtils::readIndex($data, "value");
$actionCap0name = _c_lib__mapUtils::readIndex($data, "name");
$actionCap0value = &_c_lib__mapUtils::readIndex($data, "value");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "rule";
_c_lib__mapUtils::readIndex($dataStore, "data")["name"] = $actionCap0name;
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0value;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new PipelineParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Safe_Name(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["name"] = "";
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$passed0 = false;
if ($currentCode == 95) {
$passed0 = true;}else if ($currentCode == 46) {
$passed0 = true;}else if ($currentCode == 64) {
$passed0 = true;}else if ($currentCode == 36) {
$passed0 = true;}else if ($currentCode == 33) {
$passed0 = true;}else if ($currentCode == 37) {
$passed0 = true;}else if ($currentCode == 94) {
$passed0 = true;}else if ($currentCode == 38) {
$passed0 = true;}else if ($currentCode == 42) {
$passed0 = true;}
if ($passed0 == false) {
if ($currentCode >= 65 and $currentCode <= 90) {
$passed0 = true;}else if ($currentCode >= 97 and $currentCode <= 122) {
$passed0 = true;}else if ($currentCode >= 48 and $currentCode <= 57) {
$passed0 = true;}}
if ($passed0) {
$data["name"] .= $currentChar;
if (true) {
$castacname0 = $data["name"];
$actionCap0name = $data["name"];
$dataStore["data"] = $actionCap0name;}
$c = 0;
$this->error->vested++;}else{
$castname0 = $data["name"];
if (strlen($castname0) >= 1) {
if (true) {
$castacname0 = $data["name"];
$actionCap0name = $data["name"];
$dataStore["data"] = $actionCap0name;}
$c = 0 - 1;
$charPos--;
$this->offset--;}else{
$this->giveError(1, "A-Z, a-z, 0-9, _, ., @, \$, !, %, ^, &, *", $currentChar);}}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new PipelineParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Value(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
$ruleOut1 = $this->Literal($input, $charPos);
if ($ruleOut1->hadError) {
$c = 2;
$charPos--;
$this->offset--;}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["val"] = $ruleOutCast1;
if (true) {
$castacval0 = &_c_lib__mapUtils::readIndex($data, "val");
$actionCap0val = &_c_lib__mapUtils::readIndex($data, "val");
$dataStore["data"] = $actionCap0val;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->Reference($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError(1, "Literal, Reference", $currentChar);}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["val"] = $ruleOutCast2;
if (true) {
$castacval0 = &_c_lib__mapUtils::readIndex($data, "val");
$actionCap0val = &_c_lib__mapUtils::readIndex($data, "val");
$dataStore["data"] = $actionCap0val;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new PipelineParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Literal_Boolean(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [116, 114, 117, 101];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 4) {
if (true) {
$castacbool0 = _c_lib__mapUtils::readIndex($data, "bool");
$data["bool"] = true;}
if (true) {
$castacbool0 = &_c_lib__mapUtils::readIndex($data, "bool");
$actionCap0bool = &_c_lib__mapUtils::readIndex($data, "bool");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "literal";
_c_lib__mapUtils::readIndex($dataStore, "data")["literalType"] = "boolean";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0bool;}
if (true) {
$castacbool0 = &_c_lib__mapUtils::readIndex($data, "bool");
$actionCap0bool = &_c_lib__mapUtils::readIndex($data, "bool");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "literal";
_c_lib__mapUtils::readIndex($dataStore, "data")["literalType"] = "boolean";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0bool;}
$c = 0 - 1;
$literalChar = 0;}
$this->error->vested++;}else{
$c = 1;
$charPos--;
$this->offset--;}}else if ($c == 1) {
$lit1 = [102, 97, 108, 115, 101];
if ($currentCode == _c_lib__arrUtils::readIndex($lit1, $literalChar)) {
$literalChar++;
if ($literalChar == 5) {
if (true) {
$castacbool1 = _c_lib__mapUtils::readIndex($data, "bool");
$data["bool"] = false;}
if (true) {
$castacbool0 = &_c_lib__mapUtils::readIndex($data, "bool");
$actionCap0bool = &_c_lib__mapUtils::readIndex($data, "bool");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "literal";
_c_lib__mapUtils::readIndex($dataStore, "data")["literalType"] = "boolean";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0bool;}
if (true) {
$castacbool0 = &_c_lib__mapUtils::readIndex($data, "bool");
$actionCap0bool = &_c_lib__mapUtils::readIndex($data, "bool");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "literal";
_c_lib__mapUtils::readIndex($dataStore, "data")["literalType"] = "boolean";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0bool;}
$c = 0 - 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "true, false", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new PipelineParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Literal_String(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->String($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "String(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["str"] = $ruleOutCast0;
if (true) {
$castacstr0 = _c_lib__mapUtils::readIndex($data, "str");
$actionCap0str = _c_lib__mapUtils::readIndex($data, "str");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "literal";
_c_lib__mapUtils::readIndex($dataStore, "data")["literalType"] = "string";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0str;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new PipelineParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Literal_Number(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["num"] = "";
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$passed0 = false;
if ($currentCode == 46) {
$passed0 = true;}
if ($passed0 == false) {
if ($currentCode >= 48 and $currentCode <= 57) {
$passed0 = true;}}
if ($passed0) {
$data["num"] .= $currentChar;
if (true) {
$castacnum0 = _c_lib__mapUtils::readIndex($data, "num");
$actionCap0num = _c_lib__mapUtils::readIndex($data, "num");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "literal";
_c_lib__mapUtils::readIndex($dataStore, "data")["literalType"] = "number";
$num = floatval($actionCap0num);
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $num;
if ($num % 1 === 0) {
_c_lib__mapUtils::readIndex($dataStore, "data")["integer"] = true;}else{
_c_lib__mapUtils::readIndex($dataStore, "data")["integer"] = false;}}
$c = 0;
$this->error->vested++;}else{
$castnum0 = _c_lib__mapUtils::readIndex($data, "num");
if (strlen($castnum0) >= 1) {
if (true) {
$castacnum0 = _c_lib__mapUtils::readIndex($data, "num");
$actionCap0num = _c_lib__mapUtils::readIndex($data, "num");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "literal";
_c_lib__mapUtils::readIndex($dataStore, "data")["literalType"] = "number";
$num = floatval($actionCap0num);
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $num;
if ($num % 1 === 0) {
_c_lib__mapUtils::readIndex($dataStore, "data")["integer"] = true;}else{
_c_lib__mapUtils::readIndex($dataStore, "data")["integer"] = false;}}
$c = 0 - 1;
$charPos--;
$this->offset--;}else{
$this->giveError(1, "0-9, .", $currentChar);}}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new PipelineParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Literal(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->Literal_Number($input, $charPos);
if ($ruleOut0->hadError) {
$c = 1;
$charPos--;
$this->offset--;}else{
$ruleOutCast0 = &_c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["l"] = $ruleOutCast0;
if (true) {
$castacl0 = &_c_lib__mapUtils::readIndex($data, "l");
$actionCap0l = &_c_lib__mapUtils::readIndex($data, "l");
$dataStore["data"] = $actionCap0l;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;}}else if ($c == 1) {
$ruleOut1 = $this->Literal_Boolean($input, $charPos);
if ($ruleOut1->hadError) {
$c = 2;
$charPos--;
$this->offset--;}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["l"] = $ruleOutCast1;
if (true) {
$castacl0 = &_c_lib__mapUtils::readIndex($data, "l");
$actionCap0l = &_c_lib__mapUtils::readIndex($data, "l");
$dataStore["data"] = $actionCap0l;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->Literal_String($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError(1, "Literal_Number, Literal_Boolean, Literal_String", $currentChar);}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["l"] = $ruleOutCast2;
if (true) {
$castacl0 = &_c_lib__mapUtils::readIndex($data, "l");
$actionCap0l = &_c_lib__mapUtils::readIndex($data, "l");
$dataStore["data"] = $actionCap0l;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new PipelineParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Reference(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 36) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "\$", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Safe_Name($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "Safe_Name(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["name"] = $ruleOutCast2;
if (true) {
$castacname0 = &_c_lib__mapUtils::readIndex($data, "name");
$actionCap0name = _c_lib__mapUtils::readIndex($data, "name");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "reference";
_c_lib__mapUtils::readIndex($dataStore, "data")["name"] = $actionCap0name;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new PipelineParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function _(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$passed0 = false;
if ($currentCode == 32) {
$passed0 = true;}else if ($currentCode == 9) {
$passed0 = true;}else if ($currentCode == 13) {
$passed0 = true;}else if ($currentCode == 10) {
$passed0 = true;}
if ($passed0 == false) {
}
if ($passed0) {
$c = 0;
$this->error->vested++;}else{
$c = 0 - 1;
$charPos--;
$this->offset--;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new PipelineParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function __(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["w"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$passed0 = false;
if ($currentCode == 32) {
$passed0 = true;}else if ($currentCode == 9) {
$passed0 = true;}else if ($currentCode == 13) {
$passed0 = true;}else if ($currentCode == 10) {
$passed0 = true;}
if ($passed0 == false) {
}
if ($passed0) {
$castw0 = &$data["w"];
array_push($castw0, $currentChar);
$c = 0;
$this->error->vested++;}else{
$castw0 = &$data["w"];
if (count($castw0) >= 1) {
$c = 0 - 1;
$charPos--;
$this->offset--;}else{
$this->giveError(1, " , \t, \\ r, \n", $currentChar);}}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new PipelineParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function String(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->String_Double($input, $charPos);
if ($ruleOut0->hadError) {
$c = 1;
$charPos--;
$this->offset--;}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["str"] = $ruleOutCast0;
if (true) {
$castacstr0 = &$data["str"];
$actionCap0str = &$data["str"];
$dataStore["data"] = $actionCap0str;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 1) {
$ruleOut1 = $this->String_Single($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError(1, "String_Double, String_Single", $currentChar);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["str"] = $ruleOutCast1;
if (true) {
$castacstr0 = &$data["str"];
$actionCap0str = &$data["str"];
$dataStore["data"] = $actionCap0str;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new PipelineParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function String_Double(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["str"] = "";
$escaped = false;
$escapeCodes = ['_c__mapC' => true];
$escapeCodes["n"] = "\n";
$escapeCodes["b"] = "";
$escapeCodes["f"] = "";
$escapeCodes["r"] = "\\ r";
$escapeCodes["t"] = "\t";
$escapeCodes["v"] = "";
$escapeCodes["\\"] = "\\";
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 34) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "\"", $currentChar);}}else if ($c == 1) {
$castnacstr1 = $data["str"];
$doCapture = true;
if ($currentChar == "\\") {
if ($escaped == false) {
$escaped = true;
$doCapture = false;}}
if ($currentChar == "\"") {
if ($escaped == false) {
$doCapture = false;
$c = 2;
$charPos--;
$this->offset--;}
$escaped = false;}else if ($escaped and $doCapture == true) {
$doCapture = false;
$data["str"] .= _c_lib__mapUtils::readIndex($escapeCodes, $currentChar);
$escaped = false;}
if ($doCapture) {
$data["str"] .= $currentChar;}}else if ($c == 2) {
if ($currentCode == 34) {
if (true) {
$castac0 = &$data;
$actionCap0str = $data["str"];
$dataStore["data"] = $actionCap0str;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "\"", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new PipelineParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function String_Single(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["str"] = "";
$escaped = false;
$escapeCodes = ['_c__mapC' => true];
$escapeCodes["n"] = "\n";
$escapeCodes["b"] = "";
$escapeCodes["f"] = "";
$escapeCodes["r"] = "\\ r";
$escapeCodes["t"] = "\t";
$escapeCodes["v"] = "";
$escapeCodes["\\"] = "\\";
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 39) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "'", $currentChar);}}else if ($c == 1) {
$castnacstr1 = $data["str"];
$doCapture = true;
if ($currentChar == "\\") {
if ($escaped == false) {
$escaped = true;
$doCapture = false;}}
if ($currentChar == "'") {
if ($escaped == false) {
$doCapture = false;
$c = 2;
$charPos--;
$this->offset--;}
$escaped = false;}else if ($escaped and $doCapture == true) {
$doCapture = false;
$data["str"] .= _c_lib__mapUtils::readIndex($escapeCodes, $currentChar);
$escaped = false;}
if ($doCapture) {
$data["str"] .= $currentChar;}}else if ($c == 2) {
if ($currentCode == 39) {
if (true) {
$castac0 = &$data;
$actionCap0str = $data["str"];
$dataStore["data"] = $actionCap0str;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "'", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new PipelineParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}


}class VirtualEventSystem {
public $events;

public $processor;

function __construct(...$arguments) {
$this->events = [];
$this->processor = null;

if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[0]) == 'NULL')) {
$proc = $arguments[0];
$this->processor = $proc;
}

}
function get(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
for ($i = 0; $i < count($this->events); $i++) {
if (_c_lib__arrUtils::readIndex($this->events, $i)->name == $name) {
return _c_lib__arrUtils::readIndex($this->events, $i);}}
return null;
}
}

function emit(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$args = $arguments[1];
$event = $this->get($name);
if ($event != null) {
return $event->emit($this->processor, $args);}
return false;
}
}

function on(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$func = $arguments[1];
$event = $this->get($name);
if ($event == null) {
$newEvent = new VirtualEvent($name);
array_push($newEvent->listeners, $func);
array_push($this->events, $newEvent);}else{
array_push($event->listeners, $func);}
}
}


}class VirtualEvent {
public $name;

public $listeners;

function __construct(...$arguments) {
$this->name = "";
$this->listeners = [];

if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
$this->name = $name;
}

}
function emit(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$proc = $arguments[0];
$args = $arguments[1];
for ($i = 0; $i < count($this->listeners); $i++) {
_c_lib__arrUtils::readIndex($this->listeners, $i)->call($args, $proc->scope, null);}
return false;
}
}


}class VirtualArguments {
public $type;

public $value;

public $raw;

function __construct(...$arguments) {
$this->type = "array";
$this->value = null;
$this->raw = null;

if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
}

}
static function create(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$val = $arguments[0];
$m = ['_c__mapC' => true];
$value = new VirtualArguments($m);
$value->value = $val;
return $value;
}
}

function iterate(...$arguments) {
if (count($arguments) == 4 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[2]) == 'NULL') and ((get_class($arguments[3]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[3]) == 'NULL')) {
$vKey = $arguments[0];
$v = $arguments[1];
$code = $arguments[2];
$scope = $arguments[3];
for ($i = 0; $i < count($this->value); $i++) {
$vKey->value->value = $i;
$v->value = VirtualArgument::create(_c_lib__arrUtils::readIndex($this->value, $i));
$code->run($scope);}
}
}

function property(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$scope = $arguments[1];
if ($name == "length") {
$cast = count($this->value);
$rtn = Carbide_Virtual_Values_Number::create($cast);
return $rtn;}
return Carbide_Virtual_Values_Null::create();
}
}

function method(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$name = $arguments[0];
$input = $arguments[1];
$scope = $arguments[2];
if ($name == "length") {
$len = count($this->value);
return Carbide_Virtual_Values_Number::create($len);}else if ($name == "index") {
$ind = _c_lib__arrUtils::readIndex($input, 0);
$found = VirtualArgument::create(_c_lib__arrUtils::readIndex($this->value, $ind->value));
return $found;}else if ($name == "push") {
$ind = _c_lib__arrUtils::readIndex($input, 0);
$cast = $ind->value;
$found = array_push($this->value, $cast);}else if ($name == "pop") {
array_pop($this->value);}
return Carbide_Virtual_Values_Null::create();
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[1]) == 'NULL')) {
$data = $arguments[0];
$proc = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "string") {
$rtn = new Carbide_Virtual_Values_String($data);}else if ($type == "map") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Map($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}else if ($type == "number") {
$rtn = new Carbide_Virtual_Values_Number($data);}else if ($type == "bool") {
$rtn = new Carbide_Virtual_Values_Bool($data);}else if ($type == "array") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Array($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}
$rtn->setValue($data);
return $rtn;
}
}

function getValue(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

function duplicate(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

function setValue(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];

}
}

function compare(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];

}
}

static function primitiveToValue(...$arguments) {
if (count($arguments) == 1 and (((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'boolean' or gettype($arguments[0]) == 'double' or gettype($arguments[0]) == 'integer' or (gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'string') or gettype($arguments[0]) == 'NULL')) {
$prim = $arguments[0];
if ($prim == null) {
return Carbide_Virtual_Values_Null::create();}
$type = (gettype($prim) == 'double' ? 'float' : (gettype($prim) == 'array' ? (isset($prim['_c__mapC']) ? 'map' : 'array') : gettype($prim)));
if ($type == "array") {
return Carbide_Virtual_Values_ProxyArray::create($prim);}else if ($type == "map") {
return Carbide_Virtual_Values_ProxyMap::create($prim);}else if ($type == "string") {
return Carbide_Virtual_Values_String::create($prim);}else if ($type == "boolean") {
return Carbide_Virtual_Values_Bool::create($prim);}else if ($type == "integer" or $type == "float") {
return Carbide_Virtual_Values_Number::create($prim);}
}
}

function dotSet(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$prop = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];

}
}

function call(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];

}
else if (count($arguments) == 3 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[2]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];
$context = $arguments[2];

}
}

function operate(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$operator = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];

}
}


}class VirtualArgument {
public $type;

public $value;

public $raw;

function __construct(...$arguments) {
$this->type = "Carbon.Argument";
$this->value = null;
$this->raw = null;

if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
}

}
static function create(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Argument') or gettype($arguments[0]) == 'NULL')) {
$val = $arguments[0];
$m = ['_c__mapC' => true];
$value = new VirtualArgument($m);
$value->value = $val;
return $value;
}
}

function property(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$scope = $arguments[1];
if ($name == "type") {
return VirtualType::create($this->value->type);}else if ($name == "name") {
return Carbide_Virtual_Values_String::create($this->value->name);}
return Carbide_Virtual_Values_Null::create();
}
}

function method(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$name = $arguments[0];
$input = $arguments[1];
$scope = $arguments[2];
return Carbide_Virtual_Values_Null::create();
}
}

function dotSet(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$prop = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];
$v = null;
if ($prop == "type") {
$cast = $value;
$this->value->type = $cast->value;}else if ($prop == "name") {
$cast = $value;
$this->value->name = $cast->value;}
$v = Carbide_Virtual_Values_Null::create();
return $v;
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[1]) == 'NULL')) {
$data = $arguments[0];
$proc = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "string") {
$rtn = new Carbide_Virtual_Values_String($data);}else if ($type == "map") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Map($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}else if ($type == "number") {
$rtn = new Carbide_Virtual_Values_Number($data);}else if ($type == "bool") {
$rtn = new Carbide_Virtual_Values_Bool($data);}else if ($type == "array") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Array($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}
$rtn->setValue($data);
return $rtn;
}
}

function getValue(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

function duplicate(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

function setValue(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];

}
}

function compare(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];

}
}

static function primitiveToValue(...$arguments) {
if (count($arguments) == 1 and (((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'boolean' or gettype($arguments[0]) == 'double' or gettype($arguments[0]) == 'integer' or (gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'string') or gettype($arguments[0]) == 'NULL')) {
$prim = $arguments[0];
if ($prim == null) {
return Carbide_Virtual_Values_Null::create();}
$type = (gettype($prim) == 'double' ? 'float' : (gettype($prim) == 'array' ? (isset($prim['_c__mapC']) ? 'map' : 'array') : gettype($prim)));
if ($type == "array") {
return Carbide_Virtual_Values_ProxyArray::create($prim);}else if ($type == "map") {
return Carbide_Virtual_Values_ProxyMap::create($prim);}else if ($type == "string") {
return Carbide_Virtual_Values_String::create($prim);}else if ($type == "boolean") {
return Carbide_Virtual_Values_Bool::create($prim);}else if ($type == "integer" or $type == "float") {
return Carbide_Virtual_Values_Number::create($prim);}
}
}

function call(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];

}
else if (count($arguments) == 3 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[2]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];
$context = $arguments[2];

}
}

function operate(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$operator = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];

}
}

function iterate(...$arguments) {
if (count($arguments) == 4 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[2]) == 'NULL') and ((get_class($arguments[3]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[3]) == 'NULL')) {
$variableKey = $arguments[0];
$variable = $arguments[1];
$code = $arguments[2];
$scope = $arguments[3];

}
}


}class VirtualClass {
public $type;

public $value;

public $raw;

function __construct(...$arguments) {
$this->type = "Carbon.Class";
$this->value = null;
$this->raw = null;

if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
}

}
static function create(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Class') or gettype($arguments[0]) == 'NULL')) {
$val = $arguments[0];
$m = ['_c__mapC' => true];
$value = new VirtualClass($m);
$value->value = $val;
return $value;
}
}

function property(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$scope = $arguments[1];
if ($name == "name") {
return Carbide_Virtual_Values_String::create($this->value->name);}else if ($name == "route") {
return Carbide_Virtual_Values_String::create($this->value->route);}else if ($name == "base") {
return Carbide_Virtual_Values_String::create($this->value->base);}else if ($name == "attributes") {
return Carbide_Virtual_Values_ProxyArray::create($this->value->attributes);}else if ($name == "members") {
return VirtualMembers::create($this->value->members);}
return Carbide_Virtual_Values_Null::create();
}
}

function method(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$name = $arguments[0];
$input = $arguments[1];
$scope = $arguments[2];
if ($name == "getAttribute") {
if (count($input) == 1) {
$find = _c_lib__arrUtils::readIndex($input, 0)->value;
return Carbide_Virtual_Value::primitiveToValue($this->value->getAttribute($this->value->attributes, $find));}}
return Carbide_Virtual_Values_Null::create();
}
}

function dotSet(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$prop = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];
$v = null;
if ($prop == "name") {
$cast = $value;
$this->value->name = $cast->value;}else if ($prop == "reroute") {
$cast = $value;
$this->value->reroute = $cast->value;}
$v = Carbide_Virtual_Values_Null::create();
return $v;
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[1]) == 'NULL')) {
$data = $arguments[0];
$proc = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "string") {
$rtn = new Carbide_Virtual_Values_String($data);}else if ($type == "map") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Map($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}else if ($type == "number") {
$rtn = new Carbide_Virtual_Values_Number($data);}else if ($type == "bool") {
$rtn = new Carbide_Virtual_Values_Bool($data);}else if ($type == "array") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Array($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}
$rtn->setValue($data);
return $rtn;
}
}

function getValue(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

function duplicate(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

function setValue(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];

}
}

function compare(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];

}
}

static function primitiveToValue(...$arguments) {
if (count($arguments) == 1 and (((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'boolean' or gettype($arguments[0]) == 'double' or gettype($arguments[0]) == 'integer' or (gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'string') or gettype($arguments[0]) == 'NULL')) {
$prim = $arguments[0];
if ($prim == null) {
return Carbide_Virtual_Values_Null::create();}
$type = (gettype($prim) == 'double' ? 'float' : (gettype($prim) == 'array' ? (isset($prim['_c__mapC']) ? 'map' : 'array') : gettype($prim)));
if ($type == "array") {
return Carbide_Virtual_Values_ProxyArray::create($prim);}else if ($type == "map") {
return Carbide_Virtual_Values_ProxyMap::create($prim);}else if ($type == "string") {
return Carbide_Virtual_Values_String::create($prim);}else if ($type == "boolean") {
return Carbide_Virtual_Values_Bool::create($prim);}else if ($type == "integer" or $type == "float") {
return Carbide_Virtual_Values_Number::create($prim);}
}
}

function call(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];

}
else if (count($arguments) == 3 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[2]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];
$context = $arguments[2];

}
}

function operate(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$operator = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];

}
}

function iterate(...$arguments) {
if (count($arguments) == 4 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[2]) == 'NULL') and ((get_class($arguments[3]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[3]) == 'NULL')) {
$variableKey = $arguments[0];
$variable = $arguments[1];
$code = $arguments[2];
$scope = $arguments[3];

}
}


}class VirtualMembers {
public $type;

public $value;

public $raw;

function __construct(...$arguments) {
$this->type = "array";
$this->value = null;
$this->raw = null;

if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
}

}
static function create(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$val = $arguments[0];
$m = ['_c__mapC' => true];
$value = new VirtualMembers($m);
$value->value = $val;
return $value;
}
}

function iterate(...$arguments) {
if (count($arguments) == 4 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[2]) == 'NULL') and ((get_class($arguments[3]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[3]) == 'NULL')) {
$vKey = $arguments[0];
$v = $arguments[1];
$code = $arguments[2];
$scope = $arguments[3];
for ($i = 0; $i < count($this->value); $i++) {
$vKey->value->value = $i;
$v->value = VirtualMember::create(_c_lib__arrUtils::readIndex($this->value, $i));
$code->run($scope);}
}
}

function property(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$scope = $arguments[1];
if ($name == "length") {
$cast = count($this->value);
$rtn = Carbide_Virtual_Values_Number::create($cast);
return $rtn;}
return Carbide_Virtual_Values_Null::create();
}
}

function method(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$name = $arguments[0];
$input = $arguments[1];
$scope = $arguments[2];
if ($name == "length") {
$len = count($this->value);
return Carbide_Virtual_Values_Number::create($len);}else if ($name == "index") {
$ind = _c_lib__arrUtils::readIndex($input, 0);
$found = VirtualMember::create(_c_lib__arrUtils::readIndex($this->value, $ind->value));
return $found;}else if ($name == "push") {
$ind = _c_lib__arrUtils::readIndex($input, 0);
$cast = $ind->value;
$found = array_push($this->value, $cast);}else if ($name == "pop") {
array_pop($this->value);}
return Carbide_Virtual_Values_Null::create();
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[1]) == 'NULL')) {
$data = $arguments[0];
$proc = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "string") {
$rtn = new Carbide_Virtual_Values_String($data);}else if ($type == "map") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Map($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}else if ($type == "number") {
$rtn = new Carbide_Virtual_Values_Number($data);}else if ($type == "bool") {
$rtn = new Carbide_Virtual_Values_Bool($data);}else if ($type == "array") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Array($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}
$rtn->setValue($data);
return $rtn;
}
}

function getValue(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

function duplicate(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

function setValue(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];

}
}

function compare(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];

}
}

static function primitiveToValue(...$arguments) {
if (count($arguments) == 1 and (((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'boolean' or gettype($arguments[0]) == 'double' or gettype($arguments[0]) == 'integer' or (gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'string') or gettype($arguments[0]) == 'NULL')) {
$prim = $arguments[0];
if ($prim == null) {
return Carbide_Virtual_Values_Null::create();}
$type = (gettype($prim) == 'double' ? 'float' : (gettype($prim) == 'array' ? (isset($prim['_c__mapC']) ? 'map' : 'array') : gettype($prim)));
if ($type == "array") {
return Carbide_Virtual_Values_ProxyArray::create($prim);}else if ($type == "map") {
return Carbide_Virtual_Values_ProxyMap::create($prim);}else if ($type == "string") {
return Carbide_Virtual_Values_String::create($prim);}else if ($type == "boolean") {
return Carbide_Virtual_Values_Bool::create($prim);}else if ($type == "integer" or $type == "float") {
return Carbide_Virtual_Values_Number::create($prim);}
}
}

function dotSet(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$prop = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];

}
}

function call(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];

}
else if (count($arguments) == 3 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[2]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];
$context = $arguments[2];

}
}

function operate(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$operator = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];

}
}


}class VirtualMember {
public $type;

public $value;

public $raw;

function __construct(...$arguments) {
$this->type = "Carbon.Member";
$this->value = null;
$this->raw = null;

if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
}

}
static function create(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Member' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Method' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Operator')) or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Members_Property')) or gettype($arguments[0]) == 'NULL')) {
$val = $arguments[0];
$m = ['_c__mapC' => true];
$value = new VirtualMember($m);
$value->value = $val;
return $value;
}
}

function property(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$scope = $arguments[1];
if ($name == "name") {
return Carbide_Virtual_Values_String::create($this->value->name);}else if ($name == "type") {
return Carbide_Virtual_Values_String::create($this->value->type);}else if ($name == "attributes") {
return Carbide_Virtual_Values_ProxyArray::create($this->value->attributes);}else if ($name == "arguments") {
$cast = $this->value;
return VirtualArguments::create($cast->arguments);}else if ($name == "output") {
return VirtualType::create($this->value->output);}else if ($name == "body") {
if ($this->value->type == "method") {
$cast = $this->value;
return $cast->body->toCarbideValue();}}else if ($name == "value") {
if ($this->value->type == "property") {
$cast = $this->value;}}
return Carbide_Virtual_Values_Null::create();
}
}

function method(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$name = $arguments[0];
$input = $arguments[1];
$scope = $arguments[2];
if ($name == "getAttribute") {
if (count($input) == 1) {
$find = _c_lib__arrUtils::readIndex($input, 0)->value;
return Carbide_Virtual_Value::primitiveToValue($this->value->parent->getAttribute($this->value->attributes, $find));}}
return Carbide_Virtual_Values_Null::create();
}
}

function dotSet(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$prop = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];
$v = null;
if ($prop == "name") {
$cast = $value;
$this->value->name = $cast->value;}
$v = Carbide_Virtual_Values_Null::create();
return $v;
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[1]) == 'NULL')) {
$data = $arguments[0];
$proc = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "string") {
$rtn = new Carbide_Virtual_Values_String($data);}else if ($type == "map") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Map($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}else if ($type == "number") {
$rtn = new Carbide_Virtual_Values_Number($data);}else if ($type == "bool") {
$rtn = new Carbide_Virtual_Values_Bool($data);}else if ($type == "array") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Array($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}
$rtn->setValue($data);
return $rtn;
}
}

function getValue(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

function duplicate(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

function setValue(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];

}
}

function compare(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];

}
}

static function primitiveToValue(...$arguments) {
if (count($arguments) == 1 and (((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'boolean' or gettype($arguments[0]) == 'double' or gettype($arguments[0]) == 'integer' or (gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'string') or gettype($arguments[0]) == 'NULL')) {
$prim = $arguments[0];
if ($prim == null) {
return Carbide_Virtual_Values_Null::create();}
$type = (gettype($prim) == 'double' ? 'float' : (gettype($prim) == 'array' ? (isset($prim['_c__mapC']) ? 'map' : 'array') : gettype($prim)));
if ($type == "array") {
return Carbide_Virtual_Values_ProxyArray::create($prim);}else if ($type == "map") {
return Carbide_Virtual_Values_ProxyMap::create($prim);}else if ($type == "string") {
return Carbide_Virtual_Values_String::create($prim);}else if ($type == "boolean") {
return Carbide_Virtual_Values_Bool::create($prim);}else if ($type == "integer" or $type == "float") {
return Carbide_Virtual_Values_Number::create($prim);}
}
}

function call(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];

}
else if (count($arguments) == 3 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[2]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];
$context = $arguments[2];

}
}

function operate(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$operator = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];

}
}

function iterate(...$arguments) {
if (count($arguments) == 4 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[2]) == 'NULL') and ((get_class($arguments[3]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[3]) == 'NULL')) {
$variableKey = $arguments[0];
$variable = $arguments[1];
$code = $arguments[2];
$scope = $arguments[3];

}
}


}class VirtualTypes {
public $type;

public $value;

public $raw;

function __construct(...$arguments) {
$this->type = "array";
$this->value = null;
$this->raw = null;

if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
}

}
static function create(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$val = $arguments[0];
$m = ['_c__mapC' => true];
$value = new VirtualTypes($m);
$value->value = $val;
return $value;
}
}

function iterate(...$arguments) {
if (count($arguments) == 4 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[2]) == 'NULL') and ((get_class($arguments[3]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[3]) == 'NULL')) {
$vKey = $arguments[0];
$v = $arguments[1];
$code = $arguments[2];
$scope = $arguments[3];
for ($i = 0; $i < count($this->value); $i++) {
$vKey->value->value = $i;
$v->value = VirtualType::create(_c_lib__arrUtils::readIndex($this->value, $i));
$code->run($scope);}
}
}

function property(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$scope = $arguments[1];
if ($name == "length") {
$cast = count($this->value);
$rtn = Carbide_Virtual_Values_Number::create($cast);
return $rtn;}
return Carbide_Virtual_Values_Null::create();
}
}

function method(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$name = $arguments[0];
$input = $arguments[1];
$scope = $arguments[2];
if ($name == "length") {
$len = count($this->value);
return Carbide_Virtual_Values_Number::create($len);}else if ($name == "index") {
$ind = _c_lib__arrUtils::readIndex($input, 0);
$found = VirtualType::create(_c_lib__arrUtils::readIndex($this->value, $ind->value));
return $found;}else if ($name == "push") {
$ind = _c_lib__arrUtils::readIndex($input, 0);
$cast = $ind->value;
$found = array_push($this->value, $cast);}else if ($name == "pop") {
array_pop($this->value);}
return Carbide_Virtual_Values_Null::create();
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[1]) == 'NULL')) {
$data = $arguments[0];
$proc = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "string") {
$rtn = new Carbide_Virtual_Values_String($data);}else if ($type == "map") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Map($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}else if ($type == "number") {
$rtn = new Carbide_Virtual_Values_Number($data);}else if ($type == "bool") {
$rtn = new Carbide_Virtual_Values_Bool($data);}else if ($type == "array") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Array($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}
$rtn->setValue($data);
return $rtn;
}
}

function getValue(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

function duplicate(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

function setValue(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];

}
}

function compare(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];

}
}

static function primitiveToValue(...$arguments) {
if (count($arguments) == 1 and (((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'boolean' or gettype($arguments[0]) == 'double' or gettype($arguments[0]) == 'integer' or (gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'string') or gettype($arguments[0]) == 'NULL')) {
$prim = $arguments[0];
if ($prim == null) {
return Carbide_Virtual_Values_Null::create();}
$type = (gettype($prim) == 'double' ? 'float' : (gettype($prim) == 'array' ? (isset($prim['_c__mapC']) ? 'map' : 'array') : gettype($prim)));
if ($type == "array") {
return Carbide_Virtual_Values_ProxyArray::create($prim);}else if ($type == "map") {
return Carbide_Virtual_Values_ProxyMap::create($prim);}else if ($type == "string") {
return Carbide_Virtual_Values_String::create($prim);}else if ($type == "boolean") {
return Carbide_Virtual_Values_Bool::create($prim);}else if ($type == "integer" or $type == "float") {
return Carbide_Virtual_Values_Number::create($prim);}
}
}

function dotSet(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$prop = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];

}
}

function call(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];

}
else if (count($arguments) == 3 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[2]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];
$context = $arguments[2];

}
}

function operate(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$operator = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];

}
}


}class VirtualType {
public $type;

public $value;

public $raw;

function __construct(...$arguments) {
$this->type = "Carbon.Type";
$this->value = null;
$this->raw = null;

if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
}

}
static function create(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Type' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_ReferenceType')) or gettype($arguments[0]) == 'NULL')) {
$val = $arguments[0];
$m = ['_c__mapC' => true];
$value = new VirtualType($m);
$value->value = $val;
return $value;
}
}

function property(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$scope = $arguments[1];
if ($name == "reference") {
return VirtualClass::create($this->value->reference);}else if ($name == "templates") {
return VirtualTypes::create($this->value->templates);}
return Carbide_Virtual_Values_Null::create();
}
}

function method(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$name = $arguments[0];
$input = $arguments[1];
$scope = $arguments[2];
return Carbide_Virtual_Values_Null::create();
}
}

function dotSet(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$prop = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];
$v = null;
if ($prop == "reference") {
$cast = $value;
$this->value->reference = $cast->value;}
$v = Carbide_Virtual_Values_Null::create();
return $v;
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[1]) == 'NULL')) {
$data = $arguments[0];
$proc = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "string") {
$rtn = new Carbide_Virtual_Values_String($data);}else if ($type == "map") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Map($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}else if ($type == "number") {
$rtn = new Carbide_Virtual_Values_Number($data);}else if ($type == "bool") {
$rtn = new Carbide_Virtual_Values_Bool($data);}else if ($type == "array") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Array($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}
$rtn->setValue($data);
return $rtn;
}
}

function getValue(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

function duplicate(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

function setValue(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];

}
}

function compare(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];

}
}

static function primitiveToValue(...$arguments) {
if (count($arguments) == 1 and (((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'boolean' or gettype($arguments[0]) == 'double' or gettype($arguments[0]) == 'integer' or (gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'string') or gettype($arguments[0]) == 'NULL')) {
$prim = $arguments[0];
if ($prim == null) {
return Carbide_Virtual_Values_Null::create();}
$type = (gettype($prim) == 'double' ? 'float' : (gettype($prim) == 'array' ? (isset($prim['_c__mapC']) ? 'map' : 'array') : gettype($prim)));
if ($type == "array") {
return Carbide_Virtual_Values_ProxyArray::create($prim);}else if ($type == "map") {
return Carbide_Virtual_Values_ProxyMap::create($prim);}else if ($type == "string") {
return Carbide_Virtual_Values_String::create($prim);}else if ($type == "boolean") {
return Carbide_Virtual_Values_Bool::create($prim);}else if ($type == "integer" or $type == "float") {
return Carbide_Virtual_Values_Number::create($prim);}
}
}

function call(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];

}
else if (count($arguments) == 3 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[2]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];
$context = $arguments[2];

}
}

function operate(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$operator = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];

}
}

function iterate(...$arguments) {
if (count($arguments) == 4 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[2]) == 'NULL') and ((get_class($arguments[3]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[3]) == 'NULL')) {
$variableKey = $arguments[0];
$variable = $arguments[1];
$code = $arguments[2];
$scope = $arguments[3];

}
}


}class Oxygen {

function __construct(...$arguments) {


}

}class Carbonite_Pre_Map {
public $virtual;

public $realStart;

public $realEnd;

function __construct(...$arguments) {
$this->virtual = 0 - 1;
$this->realStart = 0 - 1;
$this->realEnd = 0 - 1;

if (count($arguments) == 3 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'integer' or gettype($arguments[2]) == 'NULL')) {
$virtual = $arguments[0];
$realStart = $arguments[1];
$realEnd = $arguments[2];
$this->virtual = $virtual;
$this->realStart = $realStart;
$this->realEnd = $realEnd;
}

}

}class Carbonite_Pre_Block {
public $data;

public $statements;

public $parent;

public $scope;

public $canOutput;

function __construct(...$arguments) {
$this->data = [];
$this->statements = [];
$this->parent = null;
$this->scope = null;
$this->canOutput = false;

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Processor') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$data = $arguments[1];
$this->parent = $parent;
$this->data = $data;
}

}
function build(...$arguments) {
if (count($arguments) == 0) {
$data = &$this->data;
for ($i = 0; $i < count($data); $i++) {
$statementData = &_c_lib__arrUtils::readIndex($data, $i);
$state = Carbonite_Pre_Statement::make($this, $statementData);
$state->scope = new Carbonite_Pre_Scope($this->parent);
$state->scope->setParentScope($this->scope);
$state->build();
array_push($this->statements, $state);}
}
}

function run(...$arguments) {
if (count($arguments) == 0) {
for ($i = 0; $i < count($this->statements); $i++) {
$state = _c_lib__arrUtils::readIndex($this->statements, $i);
$state->scope->setParentScope($this->scope);
$state->run();}
}
}

function clear(...$arguments) {
if (count($arguments) == 0) {
for ($i = 0; $i < count($this->statements); $i++) {
$state = _c_lib__arrUtils::readIndex($this->statements, $i);
$state->clear();}
}
}

function output(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'integer' or gettype($arguments[2]) == 'NULL')) {
$data = $arguments[0];
$start = $arguments[1];
$end = $arguments[2];
if ($this->canOutput) {
array_push($this->parent->map, new Carbonite_Pre_Map(strlen($this->parent->source->built), $start, $end));
$this->parent->source->built .= $data;}
}
}


}class Carbonite_Pre_Statement {
public $data;

public $parent;

public $topParent;

public $scope;

public $type;

function __construct(...$arguments) {
$this->data = ['_c__mapC' => true];
$this->parent = null;
$this->topParent = null;
$this->scope = null;
$this->type = "";

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Block') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$data = $arguments[1];
$this->parent = $parent;
$this->topParent = $this->parent->parent->root;
$this->data = $data;
}

}
static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Block') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$block = $arguments[0];
$data = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "define") {
$rtn = new Carbonite_Pre_Statements_Define($block, $data);}else if ($type == "if") {
$rtn = new Carbonite_Pre_Statements_If($block, $data);}else if ($type == "include") {
$rtn = new Carbonite_Pre_Statements_Include($block, $data);}else if ($type == "raw") {
$rtn = new Carbonite_Pre_Statements_Raw($block, $data);}else if ($type == "function") {
$rtn = new Carbonite_Pre_Statements_Function($block, $data);}else if ($type == "for") {
$rtn = new Carbonite_Pre_Statements_For($block, $data);}else if ($type == "forin") {
$rtn = new Carbonite_Pre_Statements_For($block, $data);}else if ($type == "lost") {
$rtn = new Carbonite_Pre_Statements_Lost($block, $data);}else if ($type == "var") {
$rtn = new Carbonite_Pre_Statements_Var($block, $data);}else if ($type == "return") {
$rtn = new Carbonite_Pre_Statements_Return($block, $data);}else if ($type == "output") {
$rtn = new Carbonite_Pre_Statements_Out($block, $data);}else if ($type == "script") {
$rtn = new Carbonite_Pre_Statements_Script($block, $data);}
$rtn->type = $type;
return $rtn;
}
}

function build(...$arguments) {
if (count($arguments) == 0) {

}
}

function run(...$arguments) {
if (count($arguments) == 0) {

}
}

function clear(...$arguments) {
if (count($arguments) == 0) {

}
}


}class Carbonite_Pre_Statements_Define {
public $name;

public $value;

public $data;

public $parent;

public $topParent;

public $scope;

public $type;

function __construct(...$arguments) {
$this->name = "";
$this->value = null;
$this->data = ['_c__mapC' => true];
$this->parent = null;
$this->topParent = null;
$this->scope = null;
$this->type = "";

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Block') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$data = $arguments[1];
$this->parent = $parent;
$this->topParent = $this->parent->parent->root;
$this->data = $data;
}

}
function build(...$arguments) {
if (count($arguments) == 0) {
$this->name = _c_lib__mapUtils::readIndex($this->data, "name");
$this->value = Carbonite_Pre_Expression::make($this, _c_lib__mapUtils::readIndex($this->data, "value"));
$this->value->build();
}
}

function run(...$arguments) {
if (count($arguments) == 0) {
$variable = new Carbonite_Pre_Variable($this->name, $this->value->run());
$this->topParent->scope->addVariable($variable);
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Block') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$block = $arguments[0];
$data = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "define") {
$rtn = new Carbonite_Pre_Statements_Define($block, $data);}else if ($type == "if") {
$rtn = new Carbonite_Pre_Statements_If($block, $data);}else if ($type == "include") {
$rtn = new Carbonite_Pre_Statements_Include($block, $data);}else if ($type == "raw") {
$rtn = new Carbonite_Pre_Statements_Raw($block, $data);}else if ($type == "function") {
$rtn = new Carbonite_Pre_Statements_Function($block, $data);}else if ($type == "for") {
$rtn = new Carbonite_Pre_Statements_For($block, $data);}else if ($type == "forin") {
$rtn = new Carbonite_Pre_Statements_For($block, $data);}else if ($type == "lost") {
$rtn = new Carbonite_Pre_Statements_Lost($block, $data);}else if ($type == "var") {
$rtn = new Carbonite_Pre_Statements_Var($block, $data);}else if ($type == "return") {
$rtn = new Carbonite_Pre_Statements_Return($block, $data);}else if ($type == "output") {
$rtn = new Carbonite_Pre_Statements_Out($block, $data);}else if ($type == "script") {
$rtn = new Carbonite_Pre_Statements_Script($block, $data);}
$rtn->type = $type;
return $rtn;
}
}

function clear(...$arguments) {
if (count($arguments) == 0) {

}
}


}class Carbonite_Pre_Statements_Function {
public $arguments;

public $name;

public $code;

public $data;

public $parent;

public $topParent;

public $scope;

public $type;

function __construct(...$arguments) {
$this->arguments = [];
$this->name = "";
$this->code = null;
$this->data = ['_c__mapC' => true];
$this->parent = null;
$this->topParent = null;
$this->scope = null;
$this->type = "";

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Block') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$data = $arguments[1];
$this->parent = $parent;
$this->topParent = $this->parent->parent->root;
$this->data = $data;
}

}
function build(...$arguments) {
if (count($arguments) == 0) {
$this->name = _c_lib__mapUtils::readIndex($this->data, "name");
$content = &_c_lib__mapUtils::readIndex($this->data, "content");
$this->code = new Carbonite_Pre_Block($this->topParent->parent, $content);
$this->code->scope = $this->scope;
$args = &_c_lib__mapUtils::readIndex($this->data, "arguments");
for ($i = 0; $i < count($args); $i++) {
$arg = &_c_lib__arrUtils::readIndex($args, $i);
array_push($this->arguments, $arg);}
$this->topParent->parent->addFunction($this);
$this->code->build();
}
}

function call(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$args = $arguments[0];
if (count($args) != count($this->arguments)) {
$this->topParent->parent->runtimeError(_c_lib__mapUtils::readIndex($this->data, "startOffset"), _c_lib__mapUtils::readIndex($this->data, "offset"), "Call to function '" . $this->name . "' invalid argument count " . count($args));}
$this->clear();
for ($i = 0; $i < count($this->arguments); $i++) {
$value = _c_lib__arrUtils::readIndex($args, $i);
$name = _c_lib__arrUtils::readIndex($this->arguments, $i);
$this->code->scope->addVariable(new Carbonite_Pre_Variable($name, $value->run()));}
$this->code->run();
$rtn = $this->code->scope->search("functionReturn");
if ($rtn == null) {
$retu = Carbonite_Pre_Values_Null::create();
return $retu;}else{
return $rtn->value;}
}
}

function clear(...$arguments) {
if (count($arguments) == 0) {
$this->scope->clear();
$this->code->clear();
}
}

function run(...$arguments) {
if (count($arguments) == 0) {

}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Block') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$block = $arguments[0];
$data = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "define") {
$rtn = new Carbonite_Pre_Statements_Define($block, $data);}else if ($type == "if") {
$rtn = new Carbonite_Pre_Statements_If($block, $data);}else if ($type == "include") {
$rtn = new Carbonite_Pre_Statements_Include($block, $data);}else if ($type == "raw") {
$rtn = new Carbonite_Pre_Statements_Raw($block, $data);}else if ($type == "function") {
$rtn = new Carbonite_Pre_Statements_Function($block, $data);}else if ($type == "for") {
$rtn = new Carbonite_Pre_Statements_For($block, $data);}else if ($type == "forin") {
$rtn = new Carbonite_Pre_Statements_For($block, $data);}else if ($type == "lost") {
$rtn = new Carbonite_Pre_Statements_Lost($block, $data);}else if ($type == "var") {
$rtn = new Carbonite_Pre_Statements_Var($block, $data);}else if ($type == "return") {
$rtn = new Carbonite_Pre_Statements_Return($block, $data);}else if ($type == "output") {
$rtn = new Carbonite_Pre_Statements_Out($block, $data);}else if ($type == "script") {
$rtn = new Carbonite_Pre_Statements_Script($block, $data);}
$rtn->type = $type;
return $rtn;
}
}


}class Carbonite_Pre_Statements_If {
public $checks;

public $code;

public $data;

public $parent;

public $topParent;

public $scope;

public $type;

function __construct(...$arguments) {
$this->checks = [];
$this->code = null;
$this->data = ['_c__mapC' => true];
$this->parent = null;
$this->topParent = null;
$this->scope = null;
$this->type = "";

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Block') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$data = $arguments[1];
$this->parent = $parent;
$this->topParent = $this->parent->parent->root;
$this->data = $data;
}

}
function build(...$arguments) {
if (count($arguments) == 0) {
$content = &_c_lib__mapUtils::readIndex($this->data, "content");
$this->code = new Carbonite_Pre_Block($this->topParent->parent, $content);
$this->code->canOutput = $this->parent->canOutput;
$this->code->scope = $this->scope;
$this->code->build();
$checks = &_c_lib__mapUtils::readIndex($this->data, "checks");
for ($i = 0; $i < count($checks); $i++) {
$check = &_c_lib__arrUtils::readIndex($checks, $i);
$checkExpression = Carbonite_Pre_Expression::make($this, $check);
array_push($this->checks, $checkExpression);
$checkExpression->build();}
}
}

function run(...$arguments) {
if (count($arguments) == 0) {
$ok = true;
for ($i = 0; $i < count($this->checks); $i++) {
$check = _c_lib__arrUtils::readIndex($this->checks, $i);
$v = $check->run();
if ($v->value == false) {
$ok = false;}}
if ($ok) {
$this->code->run();}
}
}

function clear(...$arguments) {
if (count($arguments) == 0) {
$this->scope->clear();
$this->code->clear();
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Block') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$block = $arguments[0];
$data = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "define") {
$rtn = new Carbonite_Pre_Statements_Define($block, $data);}else if ($type == "if") {
$rtn = new Carbonite_Pre_Statements_If($block, $data);}else if ($type == "include") {
$rtn = new Carbonite_Pre_Statements_Include($block, $data);}else if ($type == "raw") {
$rtn = new Carbonite_Pre_Statements_Raw($block, $data);}else if ($type == "function") {
$rtn = new Carbonite_Pre_Statements_Function($block, $data);}else if ($type == "for") {
$rtn = new Carbonite_Pre_Statements_For($block, $data);}else if ($type == "forin") {
$rtn = new Carbonite_Pre_Statements_For($block, $data);}else if ($type == "lost") {
$rtn = new Carbonite_Pre_Statements_Lost($block, $data);}else if ($type == "var") {
$rtn = new Carbonite_Pre_Statements_Var($block, $data);}else if ($type == "return") {
$rtn = new Carbonite_Pre_Statements_Return($block, $data);}else if ($type == "output") {
$rtn = new Carbonite_Pre_Statements_Out($block, $data);}else if ($type == "script") {
$rtn = new Carbonite_Pre_Statements_Script($block, $data);}
$rtn->type = $type;
return $rtn;
}
}


}class Carbonite_Pre_Statements_For {
public $itName;

public $initial;

public $to;

public $code;

public $in;

public $data;

public $parent;

public $topParent;

public $scope;

public $type;

function __construct(...$arguments) {
$this->itName = "";
$this->initial = null;
$this->to = null;
$this->code = null;
$this->in = false;
$this->data = ['_c__mapC' => true];
$this->parent = null;
$this->topParent = null;
$this->scope = null;
$this->type = "";

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Block') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$data = $arguments[1];
$this->parent = $parent;
$this->topParent = $this->parent->parent->root;
$this->data = $data;
}

}
function build(...$arguments) {
if (count($arguments) == 0) {
$type = _c_lib__mapUtils::readIndex($this->data, "type");
if ($type == "forin") {
$this->in = true;
$this->to = Carbonite_Pre_Expression::make($this, _c_lib__mapUtils::readIndex($this->data, "in"));}
$this->itName = _c_lib__mapUtils::readIndex($this->data, "name");
if ($this->in == false) {
$this->initial = Carbonite_Pre_Expression::make($this, _c_lib__mapUtils::readIndex($this->data, "start"));
$this->initial->build();
$this->to = Carbonite_Pre_Expression::make($this, _c_lib__mapUtils::readIndex($this->data, "end"));}
$this->to->build();
$content = &_c_lib__mapUtils::readIndex($this->data, "content");
$this->code = new Carbonite_Pre_Block($this->topParent->parent, $content);
$this->code->canOutput = $this->parent->canOutput;
$this->code->scope = $this->scope;
$this->code->build();
}
}

function run(...$arguments) {
if (count($arguments) == 0) {
$to = $this->to->run();
if ($this->in) {
$it = new Carbonite_Pre_Variable($this->itName, Carbonite_Pre_Values_Null::create());
$itKey = new Carbonite_Pre_Variable($this->itName, Carbonite_Pre_Values_Null::create());
$this->code->scope->addVariable($it);
$to->iterate($itKey, $it, $this->code);}else{
$it = new Carbonite_Pre_Variable($this->itName, $this->initial->run());
$this->code->scope->addVariable($it);
$value = $it->value;
for ($i = $it->value->value;$i < $to->value;$i++) {
$value->value = $i;
$this->code->run();}}
}
}

function clear(...$arguments) {
if (count($arguments) == 0) {
$this->scope->clear();
$this->code->clear();
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Block') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$block = $arguments[0];
$data = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "define") {
$rtn = new Carbonite_Pre_Statements_Define($block, $data);}else if ($type == "if") {
$rtn = new Carbonite_Pre_Statements_If($block, $data);}else if ($type == "include") {
$rtn = new Carbonite_Pre_Statements_Include($block, $data);}else if ($type == "raw") {
$rtn = new Carbonite_Pre_Statements_Raw($block, $data);}else if ($type == "function") {
$rtn = new Carbonite_Pre_Statements_Function($block, $data);}else if ($type == "for") {
$rtn = new Carbonite_Pre_Statements_For($block, $data);}else if ($type == "forin") {
$rtn = new Carbonite_Pre_Statements_For($block, $data);}else if ($type == "lost") {
$rtn = new Carbonite_Pre_Statements_Lost($block, $data);}else if ($type == "var") {
$rtn = new Carbonite_Pre_Statements_Var($block, $data);}else if ($type == "return") {
$rtn = new Carbonite_Pre_Statements_Return($block, $data);}else if ($type == "output") {
$rtn = new Carbonite_Pre_Statements_Out($block, $data);}else if ($type == "script") {
$rtn = new Carbonite_Pre_Statements_Script($block, $data);}
$rtn->type = $type;
return $rtn;
}
}


}class Carbonite_Pre_Statements_Raw {
public $code;

public $doOuput;

public $data;

public $parent;

public $topParent;

public $scope;

public $type;

function __construct(...$arguments) {
$this->code = "";
$this->doOuput = false;
$this->data = ['_c__mapC' => true];
$this->parent = null;
$this->topParent = null;
$this->scope = null;
$this->type = "";

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Block') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$data = $arguments[1];
$this->parent = $parent;
$this->topParent = $this->parent->parent->root;
$this->data = $data;
}

}
function build(...$arguments) {
if (count($arguments) == 0) {
$this->code = _c_lib__mapUtils::readIndex($this->data, "content");
if ($this->code == "\n") {
$this->doOuput = true;}
}
}

function run(...$arguments) {
if (count($arguments) == 0) {
if ($this->doOuput == false) {
$end = _c_lib__mapUtils::readIndex($this->data, "offset");
$this->parent->output($this->code, $end - strlen($this->code), $end);}
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Block') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$block = $arguments[0];
$data = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "define") {
$rtn = new Carbonite_Pre_Statements_Define($block, $data);}else if ($type == "if") {
$rtn = new Carbonite_Pre_Statements_If($block, $data);}else if ($type == "include") {
$rtn = new Carbonite_Pre_Statements_Include($block, $data);}else if ($type == "raw") {
$rtn = new Carbonite_Pre_Statements_Raw($block, $data);}else if ($type == "function") {
$rtn = new Carbonite_Pre_Statements_Function($block, $data);}else if ($type == "for") {
$rtn = new Carbonite_Pre_Statements_For($block, $data);}else if ($type == "forin") {
$rtn = new Carbonite_Pre_Statements_For($block, $data);}else if ($type == "lost") {
$rtn = new Carbonite_Pre_Statements_Lost($block, $data);}else if ($type == "var") {
$rtn = new Carbonite_Pre_Statements_Var($block, $data);}else if ($type == "return") {
$rtn = new Carbonite_Pre_Statements_Return($block, $data);}else if ($type == "output") {
$rtn = new Carbonite_Pre_Statements_Out($block, $data);}else if ($type == "script") {
$rtn = new Carbonite_Pre_Statements_Script($block, $data);}
$rtn->type = $type;
return $rtn;
}
}

function clear(...$arguments) {
if (count($arguments) == 0) {

}
}


}class Carbonite_Pre_Statements_Lost {
public $value;

public $data;

public $parent;

public $topParent;

public $scope;

public $type;

function __construct(...$arguments) {
$this->value = null;
$this->data = ['_c__mapC' => true];
$this->parent = null;
$this->topParent = null;
$this->scope = null;
$this->type = "";

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Block') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$data = $arguments[1];
$this->parent = $parent;
$this->topParent = $this->parent->parent->root;
$this->data = $data;
}

}
function build(...$arguments) {
if (count($arguments) == 0) {
$this->value = Carbonite_Pre_Expression::make($this, _c_lib__mapUtils::readIndex($this->data, "value"));
$this->value->build();
}
}

function run(...$arguments) {
if (count($arguments) == 0) {
$val = $this->value->run();
$output = false;
if ($val != null) {
if ($val->type == "string") {
$output = true;}else if ($val->type == "number") {
$output = true;}else if ($val->type == "bool") {
$output = true;}}
if ($output) {
$end = _c_lib__mapUtils::readIndex($this->data, "offset");
$this->parent->output($val->value, $end, $end);}
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Block') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$block = $arguments[0];
$data = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "define") {
$rtn = new Carbonite_Pre_Statements_Define($block, $data);}else if ($type == "if") {
$rtn = new Carbonite_Pre_Statements_If($block, $data);}else if ($type == "include") {
$rtn = new Carbonite_Pre_Statements_Include($block, $data);}else if ($type == "raw") {
$rtn = new Carbonite_Pre_Statements_Raw($block, $data);}else if ($type == "function") {
$rtn = new Carbonite_Pre_Statements_Function($block, $data);}else if ($type == "for") {
$rtn = new Carbonite_Pre_Statements_For($block, $data);}else if ($type == "forin") {
$rtn = new Carbonite_Pre_Statements_For($block, $data);}else if ($type == "lost") {
$rtn = new Carbonite_Pre_Statements_Lost($block, $data);}else if ($type == "var") {
$rtn = new Carbonite_Pre_Statements_Var($block, $data);}else if ($type == "return") {
$rtn = new Carbonite_Pre_Statements_Return($block, $data);}else if ($type == "output") {
$rtn = new Carbonite_Pre_Statements_Out($block, $data);}else if ($type == "script") {
$rtn = new Carbonite_Pre_Statements_Script($block, $data);}
$rtn->type = $type;
return $rtn;
}
}

function clear(...$arguments) {
if (count($arguments) == 0) {

}
}


}class Carbonite_Pre_Statements_Var {
public $name;

public $value;

public $data;

public $parent;

public $topParent;

public $scope;

public $type;

function __construct(...$arguments) {
$this->name = "";
$this->value = null;
$this->data = ['_c__mapC' => true];
$this->parent = null;
$this->topParent = null;
$this->scope = null;
$this->type = "";

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Block') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$data = $arguments[1];
$this->parent = $parent;
$this->topParent = $this->parent->parent->root;
$this->data = $data;
}

}
function build(...$arguments) {
if (count($arguments) == 0) {
$this->name = _c_lib__mapUtils::readIndex($this->data, "name");
$this->value = Carbonite_Pre_Expression::make($this, _c_lib__mapUtils::readIndex($this->data, "value"));
$this->value->build();
}
}

function run(...$arguments) {
if (count($arguments) == 0) {
$variable = new Carbonite_Pre_Variable($this->name, $this->value->run());
$this->parent->scope->addVariable($variable);
}
}

function clear(...$arguments) {
if (count($arguments) == 0) {
$this->build();
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Block') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$block = $arguments[0];
$data = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "define") {
$rtn = new Carbonite_Pre_Statements_Define($block, $data);}else if ($type == "if") {
$rtn = new Carbonite_Pre_Statements_If($block, $data);}else if ($type == "include") {
$rtn = new Carbonite_Pre_Statements_Include($block, $data);}else if ($type == "raw") {
$rtn = new Carbonite_Pre_Statements_Raw($block, $data);}else if ($type == "function") {
$rtn = new Carbonite_Pre_Statements_Function($block, $data);}else if ($type == "for") {
$rtn = new Carbonite_Pre_Statements_For($block, $data);}else if ($type == "forin") {
$rtn = new Carbonite_Pre_Statements_For($block, $data);}else if ($type == "lost") {
$rtn = new Carbonite_Pre_Statements_Lost($block, $data);}else if ($type == "var") {
$rtn = new Carbonite_Pre_Statements_Var($block, $data);}else if ($type == "return") {
$rtn = new Carbonite_Pre_Statements_Return($block, $data);}else if ($type == "output") {
$rtn = new Carbonite_Pre_Statements_Out($block, $data);}else if ($type == "script") {
$rtn = new Carbonite_Pre_Statements_Script($block, $data);}
$rtn->type = $type;
return $rtn;
}
}


}class Carbonite_Pre_Statements_Return {
public $value;

public $data;

public $parent;

public $topParent;

public $scope;

public $type;

function __construct(...$arguments) {
$this->value = null;
$this->data = ['_c__mapC' => true];
$this->parent = null;
$this->topParent = null;
$this->scope = null;
$this->type = "";

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Block') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$data = $arguments[1];
$this->parent = $parent;
$this->topParent = $this->parent->parent->root;
$this->data = $data;
}

}
function build(...$arguments) {
if (count($arguments) == 0) {
$this->value = Carbonite_Pre_Expression::make($this, _c_lib__mapUtils::readIndex($this->data, "expression"));
$this->value->build();
}
}

function run(...$arguments) {
if (count($arguments) == 0) {
$name = "functionReturn";
$variable = new Carbonite_Pre_Variable($name, $this->value->run());
$this->parent->scope->addVariable($variable);
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Block') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$block = $arguments[0];
$data = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "define") {
$rtn = new Carbonite_Pre_Statements_Define($block, $data);}else if ($type == "if") {
$rtn = new Carbonite_Pre_Statements_If($block, $data);}else if ($type == "include") {
$rtn = new Carbonite_Pre_Statements_Include($block, $data);}else if ($type == "raw") {
$rtn = new Carbonite_Pre_Statements_Raw($block, $data);}else if ($type == "function") {
$rtn = new Carbonite_Pre_Statements_Function($block, $data);}else if ($type == "for") {
$rtn = new Carbonite_Pre_Statements_For($block, $data);}else if ($type == "forin") {
$rtn = new Carbonite_Pre_Statements_For($block, $data);}else if ($type == "lost") {
$rtn = new Carbonite_Pre_Statements_Lost($block, $data);}else if ($type == "var") {
$rtn = new Carbonite_Pre_Statements_Var($block, $data);}else if ($type == "return") {
$rtn = new Carbonite_Pre_Statements_Return($block, $data);}else if ($type == "output") {
$rtn = new Carbonite_Pre_Statements_Out($block, $data);}else if ($type == "script") {
$rtn = new Carbonite_Pre_Statements_Script($block, $data);}
$rtn->type = $type;
return $rtn;
}
}

function clear(...$arguments) {
if (count($arguments) == 0) {

}
}


}class Carbonite_Pre_Statements_Include {
public $file;

public $_c__as;

public $data;

public $parent;

public $topParent;

public $scope;

public $type;

function __construct(...$arguments) {
$this->file = "";
$this->_c__as = null;
$this->data = ['_c__mapC' => true];
$this->parent = null;
$this->topParent = null;
$this->scope = null;
$this->type = "";

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Block') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$data = $arguments[1];
$this->parent = $parent;
$this->topParent = $this->parent->parent->root;
$this->data = $data;
}

}
static function _c__include(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Include') or gettype($arguments[1]) == 'NULL')) {
$location = $arguments[0];
$inc = $arguments[1];
$owner = $inc->parent->parent->source;
$location = Oxygen_FileSystem::normalize($location);
$stat = null;
if ($owner->parent->autoCache) {
$stat = Oxygen_FileSystem::statSync($location);
$cache = $owner->parent->getCache($location, $stat->mtime);
if ($cache != null) {
$cachedSource = new Carbonite_Source($location, "");
$cachedSource->file = $location;
$cachedSource->parent = $owner->parent;
$cachedSource->index = $owner->parent->sourceIndex;
$owner->parent->sourceIndex++;
array_push($owner->parent->sources, $cachedSource);
$cachedSource->raw = $cache->parsed;
return null;}}
$source = $inc->parent->parent->source->parent->addSource($location, Oxygen_FileSystem::readSync($location, "utf8"));
$source->file = $location;
$source->process();
if ($owner->parent->autoCache) {
if ($source->pre->isPure) {
$source->doCache = true;
$source->mtime = $stat->mtime;}}
}
}

function build(...$arguments) {
if (count($arguments) == 0) {

}
}

function run(...$arguments) {
if (count($arguments) == 0) {
$this->file = _c_lib__mapUtils::readIndex($this->data, "file")["value"];
$this->_c__as = _c_lib__mapUtils::readIndex($this->data, "as");
$location = Oxygen_FileSystem::dirName($this->parent->parent->source->file) . "/" . $this->file;
if (Oxygen_FileSystem::isDir($location)) {
$files = Oxygen_FileSystem::readDirSync($location);
for ($i = 0; $i < count($files); $i++) {
$file = _c_lib__arrUtils::readIndex($files, $i);
if (Oxygen_FileSystem::isDir($location . "/" . $file) == false) {
Carbonite_Pre_Statements_Include::_c__include($location . "/" . $file, $this);}}}else{
Carbonite_Pre_Statements_Include::_c__include($location, $this);}
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Block') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$block = $arguments[0];
$data = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "define") {
$rtn = new Carbonite_Pre_Statements_Define($block, $data);}else if ($type == "if") {
$rtn = new Carbonite_Pre_Statements_If($block, $data);}else if ($type == "include") {
$rtn = new Carbonite_Pre_Statements_Include($block, $data);}else if ($type == "raw") {
$rtn = new Carbonite_Pre_Statements_Raw($block, $data);}else if ($type == "function") {
$rtn = new Carbonite_Pre_Statements_Function($block, $data);}else if ($type == "for") {
$rtn = new Carbonite_Pre_Statements_For($block, $data);}else if ($type == "forin") {
$rtn = new Carbonite_Pre_Statements_For($block, $data);}else if ($type == "lost") {
$rtn = new Carbonite_Pre_Statements_Lost($block, $data);}else if ($type == "var") {
$rtn = new Carbonite_Pre_Statements_Var($block, $data);}else if ($type == "return") {
$rtn = new Carbonite_Pre_Statements_Return($block, $data);}else if ($type == "output") {
$rtn = new Carbonite_Pre_Statements_Out($block, $data);}else if ($type == "script") {
$rtn = new Carbonite_Pre_Statements_Script($block, $data);}
$rtn->type = $type;
return $rtn;
}
}

function clear(...$arguments) {
if (count($arguments) == 0) {

}
}


}class Carbonite_Pre_Statements_Out {
public $code;

public $data;

public $parent;

public $topParent;

public $scope;

public $type;

function __construct(...$arguments) {
$this->code = null;
$this->data = ['_c__mapC' => true];
$this->parent = null;
$this->topParent = null;
$this->scope = null;
$this->type = "";

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Block') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$data = $arguments[1];
$this->parent = $parent;
$this->topParent = $this->parent->parent->root;
$this->data = $data;
}

}
function build(...$arguments) {
if (count($arguments) == 0) {
$content = &_c_lib__mapUtils::readIndex($this->data, "content");
$this->code = new Carbonite_Pre_Block($this->topParent->parent, $content);
$this->code->canOutput = true;
$this->code->scope = $this->scope;
$this->code->build();
}
}

function run(...$arguments) {
if (count($arguments) == 0) {
$this->code->run();
}
}

function clear(...$arguments) {
if (count($arguments) == 0) {
$this->scope->clear();
$this->code->clear();
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Block') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$block = $arguments[0];
$data = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "define") {
$rtn = new Carbonite_Pre_Statements_Define($block, $data);}else if ($type == "if") {
$rtn = new Carbonite_Pre_Statements_If($block, $data);}else if ($type == "include") {
$rtn = new Carbonite_Pre_Statements_Include($block, $data);}else if ($type == "raw") {
$rtn = new Carbonite_Pre_Statements_Raw($block, $data);}else if ($type == "function") {
$rtn = new Carbonite_Pre_Statements_Function($block, $data);}else if ($type == "for") {
$rtn = new Carbonite_Pre_Statements_For($block, $data);}else if ($type == "forin") {
$rtn = new Carbonite_Pre_Statements_For($block, $data);}else if ($type == "lost") {
$rtn = new Carbonite_Pre_Statements_Lost($block, $data);}else if ($type == "var") {
$rtn = new Carbonite_Pre_Statements_Var($block, $data);}else if ($type == "return") {
$rtn = new Carbonite_Pre_Statements_Return($block, $data);}else if ($type == "output") {
$rtn = new Carbonite_Pre_Statements_Out($block, $data);}else if ($type == "script") {
$rtn = new Carbonite_Pre_Statements_Script($block, $data);}
$rtn->type = $type;
return $rtn;
}
}


}class Carbonite_Pre_Statements_Script {
public $language;

public $block;

public $code;

public $data;

public $parent;

public $topParent;

public $scope;

public $type;

function __construct(...$arguments) {
$this->language = "";
$this->block = null;
$this->code = "";
$this->data = ['_c__mapC' => true];
$this->parent = null;
$this->topParent = null;
$this->scope = null;
$this->type = "";

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Block') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$data = $arguments[1];
$this->parent = $parent;
$this->topParent = $this->parent->parent->root;
$this->data = $data;
}

}
function build(...$arguments) {
if (count($arguments) == 0) {
$this->language = _c_lib__mapUtils::readIndex($this->data, "language");
$content = &_c_lib__mapUtils::readIndex($this->data, "content");
if (count($content) > 1) {
}
if (count($content) > 0 and _c_lib__mapUtils::readIndex(_c_lib__arrUtils::readIndex($content, 0), "type") == "raw") {
$this->code = _c_lib__mapUtils::readIndex(_c_lib__arrUtils::readIndex($content, 0), "content");
try {;
if (strtolower($this->language) == "carbon" or $this->language == "") {
$this->block = Carbide_Languages_Carbon::virtualizeIntoProcessor($this->parent->parent->source->file . " embedded carbon script", $this->code, $this->parent->parent->source->parent->buildScript);}else if (strtolower($this->language) == "calcium") {
$this->block = Carbide_Languages_Calcium::virtualizeIntoProcessor($this->parent->parent->source->file . " embedded calcium script", $this->code, $this->parent->parent->source->parent->buildScript);}
} catch(\Exception $err) {};}
}
}

function clear(...$arguments) {
if (count($arguments) == 0) {

}
}

function run(...$arguments) {
if (count($arguments) == 0) {
$proc = $this->parent->parent->source->parent->buildScript;
array_push($this->parent->parent->source->parent->scripts, $this->data);
if ($this->block != null) {
try {;
$this->block->run($proc->scope);
} catch(\Exception $err) {};}
if ($proc->hadError) {
$baseNotice = _c_lib__arrUtils::readIndex($proc->notices, 0);
$notice = new Carbonite_Notice($baseNotice->message);
$notice->start = new Carbonite_Location(0, 0, $baseNotice->start);
$notice->end = new Carbonite_Location(0, 0, $baseNotice->end);
$notice->module = "Script";
$notice->type = "Runtime";
$notice->source = $this->parent->parent->source;
$this->parent->parent->source->parent->status->give($notice);
throw new Exception("Execution error");}
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Block') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$block = $arguments[0];
$data = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "define") {
$rtn = new Carbonite_Pre_Statements_Define($block, $data);}else if ($type == "if") {
$rtn = new Carbonite_Pre_Statements_If($block, $data);}else if ($type == "include") {
$rtn = new Carbonite_Pre_Statements_Include($block, $data);}else if ($type == "raw") {
$rtn = new Carbonite_Pre_Statements_Raw($block, $data);}else if ($type == "function") {
$rtn = new Carbonite_Pre_Statements_Function($block, $data);}else if ($type == "for") {
$rtn = new Carbonite_Pre_Statements_For($block, $data);}else if ($type == "forin") {
$rtn = new Carbonite_Pre_Statements_For($block, $data);}else if ($type == "lost") {
$rtn = new Carbonite_Pre_Statements_Lost($block, $data);}else if ($type == "var") {
$rtn = new Carbonite_Pre_Statements_Var($block, $data);}else if ($type == "return") {
$rtn = new Carbonite_Pre_Statements_Return($block, $data);}else if ($type == "output") {
$rtn = new Carbonite_Pre_Statements_Out($block, $data);}else if ($type == "script") {
$rtn = new Carbonite_Pre_Statements_Script($block, $data);}
$rtn->type = $type;
return $rtn;
}
}


}class Carbonite_Pre_Processor {
public $source;

public $map;

public $root;

public $status;

public $isPure;

function __construct(...$arguments) {
$this->source = null;
$this->map = [];
$this->root = null;
$this->status = new Carbonite_Status();
$this->isPure = false;

if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Source') or gettype($arguments[0]) == 'NULL')) {
$src = $arguments[0];
$this->source = $src;
$po = Carbonite_Parsers::PreParse($this->source->data);
if ($po->hadError) {
$this->status->give(Carbonite_Notice::fromParser($this->source, $po));}else{
$parsed = &_c_lib__mapUtils::readIndex($po->data, "document");
$this->root = new Carbonite_Pre_Block($this, $parsed);}
}

}
function build(...$arguments) {
if (count($arguments) == 0) {
if ($this->status->hadError == false) {
$this->root->scope = $this->source->parent->scope;
$this->root->canOutput = true;
$this->root->build();
if (count($this->root->statements) == 1) {
if (_c_lib__arrUtils::readIndex($this->root->statements, 0)->type == "raw") {
$this->isPure = true;}}}
return $this->status;
}
}

function run(...$arguments) {
if (count($arguments) == 0) {
if ($this->status->hadError == false) {
try {;
$this->root->run();
} catch(\Exception $err) {};}
return $this->status;
}
}

function getLocation(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL')) {
$offset = $arguments[0];
return $this->getRealLocation($this->getReal($offset));
}
}

function getRealLocation(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL')) {
$offset = $arguments[0];
$line = 1;
$column = 1;
for ($i = 0;$i < $offset;$i++) {
$code = ord($this->source->data[$i]);
$column++;
if ($code == 10) {
$line++;
$column = 1;}}
$loc = new Carbonite_Location($line, $column, $offset);
return $loc;
}
}

function getReal(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL')) {
$offset = $arguments[0];
$real = 0;
for ($i = 0; $i < count($this->map); $i++) {
$m = _c_lib__arrUtils::readIndex($this->map, $i);
if ($offset > $m->virtual) {
$real = $m->realStart + $offset - $m->virtual;}else{
break;}}
return $real;
}
}

function addFunction(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Function') or gettype($arguments[0]) == 'NULL')) {
$func = $arguments[0];
array_push($this->source->parent->functionScope, $func);
}
}

function searchFunction(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
for ($i = 0; $i < count($this->source->parent->functionScope); $i++) {
$func = _c_lib__arrUtils::readIndex($this->source->parent->functionScope, $i);
if ($func->name == $name) {
return $func;}}
$emp = null;
return $emp;
}
}

function runtimeError(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'string' or gettype($arguments[2]) == 'NULL')) {
$start = $arguments[0];
$end = $arguments[1];
$message = $arguments[2];
$notice = new Carbonite_Notice($message);
$notice->level = 4;
$notice->module = "Preprocessor Script";
$notice->type = "Runtime";
$notice->source = $this->source;
$notice->start = $this->getRealLocation($start);
$notice->end = $this->getRealLocation($end);
$this->status->give($notice);
throw new Exception("Error in Preprocessor");
}
}


}class Carbonite_Pre_Value {
public $type;

public $value;

public $raw;

function __construct(...$arguments) {
$this->type = "null";
$this->value = 0;
$this->raw = null;

if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
}

}
static function create(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$value = $arguments[0];
return Carbonite_Pre_Values_Map::create($value);
}
else if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$value = $arguments[0];
return Carbonite_Pre_Values_Array::create($value);
}
else if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$value = $arguments[0];
return Carbonite_Pre_Values_String::create($value);
}
else if (count($arguments) == 1 and (gettype($arguments[0]) == 'double' or gettype($arguments[0]) == 'NULL')) {
$value = $arguments[0];
return Carbonite_Pre_Values_Number::create($value);
}
else if (count($arguments) == 1 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL')) {
$value = $arguments[0];
$cast = $value;
return Carbonite_Pre_Values_Number::create($cast);
}
else if (count($arguments) == 1 and (gettype($arguments[0]) == 'boolean' or gettype($arguments[0]) == 'NULL')) {
$value = $arguments[0];
return Carbonite_Pre_Values_Bool::create($value);
}
else if (count($arguments) == 1 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL')) {
$value = $arguments[0];

}
}

static function make(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$data = $arguments[0];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "string") {
$rtn = new Carbonite_Pre_Values_String($data);}else if ($type == "map") {
$rtn = new Carbonite_Pre_Values_Map($data);}else if ($type == "number") {
$rtn = new Carbonite_Pre_Values_Number($data);}else if ($type == "bool") {
$rtn = new Carbonite_Pre_Values_Bool($data);}else if ($type == "array") {
$rtn = new Carbonite_Pre_Values_Array($data);}
$rtn->setValue($data);
return $rtn;
}
}

function setValue(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];

}
}

function compare(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];

}
}

function property(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
return Carbonite_Pre_Values_Null::create();
}
}

function method(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$input = $arguments[1];
return Carbonite_Pre_Values_Null::create();
}
}

function operate(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Null')) or gettype($arguments[1]) == 'NULL')) {
$operator = $arguments[0];
$value = $arguments[1];

}
}

function iterate(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Variable') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Variable') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Pre_Block') or gettype($arguments[2]) == 'NULL')) {
$variableKey = $arguments[0];
$variable = $arguments[1];
$code = $arguments[2];

}
}


}class Carbonite_Pre_Values_String {
public $type;

public $value;

public $raw;

function __construct(...$arguments) {
$this->type = "string";
$this->value = "";
$this->raw = null;

if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
}

}
function setValue(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->value = _c_lib__mapUtils::readIndex($raw, "value");
}
}

function compare(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
if ($this->value == _c_lib__mapUtils::readIndex($raw, "value")) {
return true;}else{
return false;}
}
}

static function create(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$val = $arguments[0];
$m = ['_c__mapC' => true];
$value = new Carbonite_Pre_Values_String($m);
$value->value = $val;
return $value;
}
}

function iterate(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Variable') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Variable') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Pre_Block') or gettype($arguments[2]) == 'NULL')) {
$vKey = $arguments[0];
$v = $arguments[1];
$code = $arguments[2];
foreach ($this->value as $i => $_c_v__k0) {
$vKey->value->value = $i;
$v->value = Carbonite_Pre_Values_String::create($this->value[$i]);
$code->run();}
}
}

function property(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
if ($name == "length") {
$len = strlen($this->value);
return Carbonite_Pre_Values_Number::create($len);}
}
}

function method(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$input = $arguments[1];
return Carbonite_Pre_Values_Null::create();
}
}

function operate(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Null')) or gettype($arguments[1]) == 'NULL')) {
$operator = $arguments[0];
$value = $arguments[1];
$v = null;
$cast = $value;
if ($operator == "=") {
$this->value = $cast->value;
$v = Carbonite_Pre_Values_Null::create();}else if ($operator == "==") {
$v = Carbonite_Pre_Values_Bool::create($this->value == $cast->value);}else if ($operator == "!=") {
$v = Carbonite_Pre_Values_Bool::create($this->value != $cast->value);}else if ($operator == "+") {
$v = Carbonite_Pre_Values_String::create($this->value . $cast->value);}else if ($operator == "+=") {
$this->value .= $cast->value;
$v = Carbonite_Pre_Values_Null::create();}
return $v;
}
}

static function make(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$data = $arguments[0];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "string") {
$rtn = new Carbonite_Pre_Values_String($data);}else if ($type == "map") {
$rtn = new Carbonite_Pre_Values_Map($data);}else if ($type == "number") {
$rtn = new Carbonite_Pre_Values_Number($data);}else if ($type == "bool") {
$rtn = new Carbonite_Pre_Values_Bool($data);}else if ($type == "array") {
$rtn = new Carbonite_Pre_Values_Array($data);}
$rtn->setValue($data);
return $rtn;
}
}


}class Carbonite_Pre_Values_Number {
public $type;

public $value;

public $raw;

function __construct(...$arguments) {
$this->type = "number";
$this->value = 0;
$this->raw = null;

if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
}

}
function setValue(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->value = _c_lib__mapUtils::readIndex($raw, "value");
$zero = 0;
if (_c_lib__mapUtils::readIndex($raw, "negative") != null) {
$this->value = $zero - $this->value;}
}
}

function compare(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
if ($this->value == _c_lib__mapUtils::readIndex($raw, "value")) {
return true;}else{
return false;}
}
}

function operate(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Number') or gettype($arguments[1]) == 'NULL')) {
$operator = $arguments[0];
$value = $arguments[1];
$v = null;
if ($operator == "=") {
$this->value = $value->value;
$v = Carbonite_Pre_Values_Null::create();}else if ($operator == "==") {
$v = Carbonite_Pre_Values_Bool::create($this->value == $value->value);}else if ($operator == "!=") {
$v = Carbonite_Pre_Values_Bool::create($this->value != $value->value);}else if ($operator == "+") {
$v = Carbonite_Pre_Values_Number::create($this->value + $value->value);}else if ($operator == "-") {
$v = Carbonite_Pre_Values_Number::create($this->value - $value->value);}else if ($operator == "+=") {
$this->value+=$value->value;
$v = Carbonite_Pre_Values_Null::create();}else if ($operator == "-=") {
$this->value-=$value->value;
$v = Carbonite_Pre_Values_Null::create();}else if ($operator == "*") {
$v = Carbonite_Pre_Values_Number::create($this->value * $value->value);}else if ($operator == "/") {
$v = Carbonite_Pre_Values_Number::create($this->value / $value->value);}else if ($operator == ">") {
$v = Carbonite_Pre_Values_Bool::create($this->value > $value->value);}else if ($operator == ">=") {
$v = Carbonite_Pre_Values_Bool::create($this->value >= $value->value);}else if ($operator == "<") {
$v = Carbonite_Pre_Values_Bool::create($this->value < $value->value);}else if ($operator == "<=") {
$v = Carbonite_Pre_Values_Bool::create($this->value <= $value->value);}
return $v;
}
}

static function create(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'double' or gettype($arguments[0]) == 'NULL')) {
$number = $arguments[0];
$m = ['_c__mapC' => true];
$value = new Carbonite_Pre_Values_Number($m);
$value->value = $number;
return $value;
}
}

static function make(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$data = $arguments[0];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "string") {
$rtn = new Carbonite_Pre_Values_String($data);}else if ($type == "map") {
$rtn = new Carbonite_Pre_Values_Map($data);}else if ($type == "number") {
$rtn = new Carbonite_Pre_Values_Number($data);}else if ($type == "bool") {
$rtn = new Carbonite_Pre_Values_Bool($data);}else if ($type == "array") {
$rtn = new Carbonite_Pre_Values_Array($data);}
$rtn->setValue($data);
return $rtn;
}
}

function property(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
return Carbonite_Pre_Values_Null::create();
}
}

function method(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$input = $arguments[1];
return Carbonite_Pre_Values_Null::create();
}
}

function iterate(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Variable') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Variable') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Pre_Block') or gettype($arguments[2]) == 'NULL')) {
$variableKey = $arguments[0];
$variable = $arguments[1];
$code = $arguments[2];

}
}


}class Carbonite_Pre_Values_Array {
public $type;

public $value;

public $raw;

function __construct(...$arguments) {
$this->type = "array";
$this->value = [];
$this->raw = null;

if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
}

}
function setValue(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$arr = &_c_lib__mapUtils::readIndex($raw, "value");
for ($i = 0; $i < count($arr); $i++) {
$item = &_c_lib__arrUtils::readIndex($arr, $i);
$val = Carbonite_Pre_Expression::make(null, $item);
$val->build();
array_push($this->value, $val->run());}
}
}

function compare(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
if ($this->value == _c_lib__mapUtils::readIndex($raw, "value")) {
return true;}else{
return false;}
}
}

function property(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
if ($name == "length") {
$len = count($this->value);
return Carbonite_Pre_Values_Number::create($len);}
return Carbonite_Pre_Values_Null::create();
}
}

function method(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$input = $arguments[1];
if ($name == "length") {
$len = count($this->value);
return Carbonite_Pre_Values_Number::create($len);}else if ($name == "index") {
$ind = _c_lib__arrUtils::readIndex($input, 0);
$found = _c_lib__arrUtils::readIndex($this->value, $ind->value);
return $found;}else if ($name == "push") {
$ind = _c_lib__arrUtils::readIndex($input, 0);
$found = array_push($this->value, $ind);}else if ($name == "pop") {
array_pop($this->value);}
return Carbonite_Pre_Values_Null::create();
}
}

static function create(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$val = $arguments[0];
$m = ['_c__mapC' => true];
$value = new Carbonite_Pre_Values_Array($m);
$value->value = $val;
return $value;
}
}

function iterate(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Variable') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Variable') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Pre_Block') or gettype($arguments[2]) == 'NULL')) {
$vKey = $arguments[0];
$v = $arguments[1];
$code = $arguments[2];
for ($i = 0; $i < count($this->value); $i++) {
$vKey->value->value = $i;
$v->value = _c_lib__arrUtils::readIndex($this->value, $i);
$code->run();}
}
}

static function make(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$data = $arguments[0];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "string") {
$rtn = new Carbonite_Pre_Values_String($data);}else if ($type == "map") {
$rtn = new Carbonite_Pre_Values_Map($data);}else if ($type == "number") {
$rtn = new Carbonite_Pre_Values_Number($data);}else if ($type == "bool") {
$rtn = new Carbonite_Pre_Values_Bool($data);}else if ($type == "array") {
$rtn = new Carbonite_Pre_Values_Array($data);}
$rtn->setValue($data);
return $rtn;
}
}

function operate(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Null')) or gettype($arguments[1]) == 'NULL')) {
$operator = $arguments[0];
$value = $arguments[1];

}
}


}class Carbonite_Pre_Values_Map {
public $type;

public $value;

public $raw;

function __construct(...$arguments) {
$this->type = "map";
$this->value = 0;
$this->raw = null;

if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
}

}
function setValue(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->value = _c_lib__mapUtils::readIndex($raw, "value");
}
}

function compare(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
if ($this->value == _c_lib__mapUtils::readIndex($raw, "value")) {
return true;}else{
return false;}
}
}

static function create(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$val = $arguments[0];
$m = ['_c__mapC' => true];
$value = new Carbonite_Pre_Values_Map($m);
$value->value = $val;
return $value;
}
}

function iterate(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Variable') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Variable') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Pre_Block') or gettype($arguments[2]) == 'NULL')) {
$vKey = $arguments[0];
$v = $arguments[1];
$code = $arguments[2];
foreach ($this->value as $key => $_c_v__k0) {
$castKey = $vKey->value;
$castKey->value = $key;
$v->value->value = _c_lib__mapUtils::readIndex($this->value, $key);
$code->run();}
}
}

function property(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
$has = _c_lib__mapUtils::readIndex($this->value, $name);
if ($has != null) {
$rtn = Carbonite_Pre_Value::create(_c_lib__mapUtils::readIndex($this->value, $name));
return $rtn;}
return Carbonite_Pre_Values_Null::create();
}
}

function method(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$input = $arguments[1];
if ($name == "set") {
$key = _c_lib__arrUtils::readIndex($input, 0);
$ind = _c_lib__arrUtils::readIndex($input, 1);
$this->value[$key->value] = $ind->value;}else if ($name == "index") {
$ind = _c_lib__arrUtils::readIndex($input, 0);
$found = $this->value[$ind->value];
return $found;}
return Carbonite_Pre_Values_Null::create();
}
}

static function make(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$data = $arguments[0];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "string") {
$rtn = new Carbonite_Pre_Values_String($data);}else if ($type == "map") {
$rtn = new Carbonite_Pre_Values_Map($data);}else if ($type == "number") {
$rtn = new Carbonite_Pre_Values_Number($data);}else if ($type == "bool") {
$rtn = new Carbonite_Pre_Values_Bool($data);}else if ($type == "array") {
$rtn = new Carbonite_Pre_Values_Array($data);}
$rtn->setValue($data);
return $rtn;
}
}

function operate(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Null')) or gettype($arguments[1]) == 'NULL')) {
$operator = $arguments[0];
$value = $arguments[1];

}
}


}class Carbonite_Pre_Values_Bool {
public $type;

public $value;

public $raw;

function __construct(...$arguments) {
$this->type = "bool";
$this->value = false;
$this->raw = null;

if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
}

}
function setValue(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->value = _c_lib__mapUtils::readIndex($raw, "value");
}
}

function compare(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
if ($this->value == _c_lib__mapUtils::readIndex($raw, "value")) {
return true;}else{
return false;}
}
}

static function create(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'boolean' or gettype($arguments[0]) == 'NULL')) {
$val = $arguments[0];
$m = ['_c__mapC' => true];
$value = new Carbonite_Pre_Values_Bool($m);
$value->value = $val;
return $value;
}
}

static function make(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$data = $arguments[0];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "string") {
$rtn = new Carbonite_Pre_Values_String($data);}else if ($type == "map") {
$rtn = new Carbonite_Pre_Values_Map($data);}else if ($type == "number") {
$rtn = new Carbonite_Pre_Values_Number($data);}else if ($type == "bool") {
$rtn = new Carbonite_Pre_Values_Bool($data);}else if ($type == "array") {
$rtn = new Carbonite_Pre_Values_Array($data);}
$rtn->setValue($data);
return $rtn;
}
}

function property(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
return Carbonite_Pre_Values_Null::create();
}
}

function method(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$input = $arguments[1];
return Carbonite_Pre_Values_Null::create();
}
}

function operate(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Null')) or gettype($arguments[1]) == 'NULL')) {
$operator = $arguments[0];
$value = $arguments[1];

}
}

function iterate(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Variable') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Variable') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Pre_Block') or gettype($arguments[2]) == 'NULL')) {
$variableKey = $arguments[0];
$variable = $arguments[1];
$code = $arguments[2];

}
}


}class Carbonite_Pre_Values_Null {
public $type;

public $value;

public $raw;

function __construct(...$arguments) {
$this->type = "null";
$this->value = false;
$this->raw = null;

if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
}

}
function setValue(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->value = _c_lib__mapUtils::readIndex($raw, "value");
}
}

function compare(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
if ($this->value == _c_lib__mapUtils::readIndex($raw, "value")) {
return true;}else{
return false;}
}
}

static function create(...$arguments) {
if (count($arguments) == 0) {
$m = ['_c__mapC' => true];
$value = new Carbonite_Pre_Values_Null($m);
$value->value = null;
return $value;
}
}

static function make(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$data = $arguments[0];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "string") {
$rtn = new Carbonite_Pre_Values_String($data);}else if ($type == "map") {
$rtn = new Carbonite_Pre_Values_Map($data);}else if ($type == "number") {
$rtn = new Carbonite_Pre_Values_Number($data);}else if ($type == "bool") {
$rtn = new Carbonite_Pre_Values_Bool($data);}else if ($type == "array") {
$rtn = new Carbonite_Pre_Values_Array($data);}
$rtn->setValue($data);
return $rtn;
}
}

function property(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
return Carbonite_Pre_Values_Null::create();
}
}

function method(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$input = $arguments[1];
return Carbonite_Pre_Values_Null::create();
}
}

function operate(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Null')) or gettype($arguments[1]) == 'NULL')) {
$operator = $arguments[0];
$value = $arguments[1];

}
}

function iterate(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Variable') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Variable') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbonite_Pre_Block') or gettype($arguments[2]) == 'NULL')) {
$variableKey = $arguments[0];
$variable = $arguments[1];
$code = $arguments[2];

}
}


}class Carbonite_Pre_Variable {
public $name;

public $value;

function __construct(...$arguments) {
$this->name = "";
$this->value = null;

if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbonite_Pre_Values_Null')) or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$value = $arguments[1];
$this->name = $name;
$this->value = $value;
}

}

}class Carbonite_Pre_Scope {
public $parentScope;

public $parent;

public $data;

function __construct(...$arguments) {
$this->parentScope = null;
$this->parent = null;
$this->data = [];

if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Processor') or gettype($arguments[0]) == 'NULL')) {
$parent = $arguments[0];
$this->parent = $parent;
}

}
function setParentScope(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Scope') or gettype($arguments[0]) == 'NULL')) {
$scope = $arguments[0];
$this->parentScope = $scope;
}
}

function addVariable(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Variable') or gettype($arguments[0]) == 'NULL')) {
$variable = $arguments[0];
array_push($this->data, $variable);
}
}

function clear(...$arguments) {
if (count($arguments) == 0) {
for ($i = count($this->data);$i > 0;$i--) {
array_pop($this->data);}
}
}

function search(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
for ($i = 0; $i < count($this->data); $i++) {
$variable = _c_lib__arrUtils::readIndex($this->data, $i);
if ($variable->name == $name) {
return $variable;}}
if ($this->parentScope != null) {
return $this->parentScope->search($name);}
$emp = null;
return $emp;
}
}


}class Carbonite_Pre_Sub {
public $data;

public $parent;

public $type;

public $property;

public $arguments;

function __construct(...$arguments) {
$this->data = ['_c__mapC' => true];
$this->parent = null;
$this->type = 0;
$this->property = "";
$this->arguments = [];

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statement' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Define') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Function') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_If') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_For') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Raw') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Lost') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Var') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Return') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Include') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Out') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Script')) or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->data = $raw;
$this->parent = $parent;
$type = _c_lib__mapUtils::readIndex($this->data, "type");
if ($type == "constant") {
$this->type = 1;
$this->property = _c_lib__mapUtils::readIndex($this->data, "value");}else if ($type == "call") {
$this->type = 2;
$this->property = _c_lib__mapUtils::readIndex($this->data, "term")["value"];
$args = &_c_lib__mapUtils::readIndex($this->data, "args");
for ($i = 0; $i < count($args); $i++) {
$argument = Carbonite_Pre_Expression::make($this->parent, _c_lib__arrUtils::readIndex($args, $i));
array_push($this->arguments, $argument);
$argument->build();}}else if ($type == "array") {
$this->type = 2;
$this->property = "index";
$args = &_c_lib__mapUtils::readIndex($this->data, "value");
for ($i = 0; $i < count($args); $i++) {
$argument = Carbonite_Pre_Expression::make($this->parent, _c_lib__arrUtils::readIndex($args, $i));
array_push($this->arguments, $argument);
$argument->build();}}
}

}
function run(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Value' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_String') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_Number') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_Array') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_Map') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_Bool') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_Null')) or gettype($arguments[0]) == 'NULL')) {
$on = $arguments[0];
if ($this->type == 1) {
return $on->property($this->property);}else{
$args = [];
for ($i = 0; $i < count($this->arguments); $i++) {
$arg = _c_lib__arrUtils::readIndex($this->arguments, $i);
array_push($args, $arg->run());}
return $on->method($this->property, $args);}
}
}


}class Carbonite_Pre_Expression {
public $data;

public $subs;

public $parent;

function __construct(...$arguments) {
$this->data = null;
$this->subs = [];
$this->parent = null;

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statement' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Define') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Function') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_If') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_For') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Raw') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Lost') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Var') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Return') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Include') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Out') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Script')) or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->data = $raw;
$this->parent = $parent;
}

}
static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statement' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Define') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Function') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_If') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_For') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Raw') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Lost') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Var') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Return') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Include') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Out') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Script')) or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$data = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "operation") {
$rtn = new Carbonite_Pre_Expressions_Operation($parent, $data);}else if ($type == "constant") {
$rtn = new Carbonite_Pre_Expressions_Reference($parent, $data);}else if ($type == "call") {
$rtn = new Carbonite_Pre_Expressions_Call($parent, $data);}else{
$rtn = new Carbonite_Pre_Expressions_Raw($parent, $data);}
return $rtn;
}
}

function build(...$arguments) {
if (count($arguments) == 0) {

}
}

function buildSubs(...$arguments) {
if (count($arguments) == 0) {
if (isset($this->data["subs"])) {
$subs = &_c_lib__mapUtils::readIndex($this->data, "subs");
for ($i = 0; $i < count($subs); $i++) {
$sub = new Carbonite_Pre_Sub($this->parent, _c_lib__arrUtils::readIndex($subs, $i));
array_push($this->subs, $sub);}}
}
}

function runSubs(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Value' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_String') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_Number') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_Array') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_Map') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_Bool') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_Null')) or gettype($arguments[0]) == 'NULL')) {
$on = $arguments[0];
$last = $on;
for ($i = 0; $i < count($this->subs); $i++) {
$sub = _c_lib__arrUtils::readIndex($this->subs, $i);
$last = $sub->run($last);}
return $last;
}
}

function run(...$arguments) {
if (count($arguments) == 0) {

}
}


}class Carbonite_Pre_Expressions_Operation {
public $head;

public $tail;

public $data;

public $subs;

public $parent;

function __construct(...$arguments) {
$this->head = null;
$this->tail = null;
$this->data = null;
$this->subs = [];
$this->parent = null;

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statement' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Define') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Function') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_If') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_For') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Raw') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Lost') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Var') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Return') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Include') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Out') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Script')) or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->data = $raw;
$this->parent = $parent;
}

}
function build(...$arguments) {
if (count($arguments) == 0) {
$this->buildSubs();
$this->head = Carbonite_Pre_Expression::make($this->parent, _c_lib__mapUtils::readIndex($this->data, "head"));
$this->tail = Carbonite_Pre_Expression::make($this->parent, _c_lib__mapUtils::readIndex($this->data, "tail"));
$this->head->build();
$this->tail->build();
}
}

function run(...$arguments) {
if (count($arguments) == 0) {
$head = $this->head->run();
$tail = $this->tail->run();
return $head->operate(_c_lib__mapUtils::readIndex($this->data, "operator"), $tail);
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statement' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Define') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Function') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_If') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_For') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Raw') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Lost') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Var') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Return') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Include') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Out') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Script')) or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$data = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "operation") {
$rtn = new Carbonite_Pre_Expressions_Operation($parent, $data);}else if ($type == "constant") {
$rtn = new Carbonite_Pre_Expressions_Reference($parent, $data);}else if ($type == "call") {
$rtn = new Carbonite_Pre_Expressions_Call($parent, $data);}else{
$rtn = new Carbonite_Pre_Expressions_Raw($parent, $data);}
return $rtn;
}
}

function buildSubs(...$arguments) {
if (count($arguments) == 0) {
if (isset($this->data["subs"])) {
$subs = &_c_lib__mapUtils::readIndex($this->data, "subs");
for ($i = 0; $i < count($subs); $i++) {
$sub = new Carbonite_Pre_Sub($this->parent, _c_lib__arrUtils::readIndex($subs, $i));
array_push($this->subs, $sub);}}
}
}

function runSubs(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Value' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_String') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_Number') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_Array') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_Map') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_Bool') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_Null')) or gettype($arguments[0]) == 'NULL')) {
$on = $arguments[0];
$last = $on;
for ($i = 0; $i < count($this->subs); $i++) {
$sub = _c_lib__arrUtils::readIndex($this->subs, $i);
$last = $sub->run($last);}
return $last;
}
}


}//Relative Console
class Carbonite_Pre_Expressions_Call {
public $name;

public $arguments;

public $data;

public $subs;

public $parent;

function __construct(...$arguments) {
$this->name = "";
$this->arguments = [];
$this->data = null;
$this->subs = [];
$this->parent = null;

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statement' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Define') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Function') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_If') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_For') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Raw') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Lost') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Var') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Return') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Include') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Out') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Script')) or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->data = $raw;
$this->parent = $parent;
}

}
function build(...$arguments) {
if (count($arguments) == 0) {
$this->buildSubs();
$this->name = _c_lib__mapUtils::readIndex($this->data, "term")["value"];
$args = &_c_lib__mapUtils::readIndex($this->data, "args");
for ($i = 0; $i < count($args); $i++) {
$argument = Carbonite_Pre_Expression::make($this->parent, _c_lib__arrUtils::readIndex($args, $i));
array_push($this->arguments, $argument);
$argument->build();}
}
}

function run(...$arguments) {
if (count($arguments) == 0) {
$call = $this->parent->topParent->parent->searchFunction($this->name);
if ($call != null) {
return $this->runSubs($call->call($this->arguments));}else{
if ($this->name == "log") {
$msg = _c_lib__arrUtils::readIndex($this->arguments, 0)->run();
var_dump($msg->value);}else{
$this->parent->topParent->parent->runtimeError(_c_lib__mapUtils::readIndex($this->data, "startOffset"), _c_lib__mapUtils::readIndex($this->data, "offset"), "Unknown function '" . $this->name . "'");}}
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statement' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Define') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Function') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_If') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_For') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Raw') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Lost') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Var') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Return') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Include') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Out') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Script')) or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$data = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "operation") {
$rtn = new Carbonite_Pre_Expressions_Operation($parent, $data);}else if ($type == "constant") {
$rtn = new Carbonite_Pre_Expressions_Reference($parent, $data);}else if ($type == "call") {
$rtn = new Carbonite_Pre_Expressions_Call($parent, $data);}else{
$rtn = new Carbonite_Pre_Expressions_Raw($parent, $data);}
return $rtn;
}
}

function buildSubs(...$arguments) {
if (count($arguments) == 0) {
if (isset($this->data["subs"])) {
$subs = &_c_lib__mapUtils::readIndex($this->data, "subs");
for ($i = 0; $i < count($subs); $i++) {
$sub = new Carbonite_Pre_Sub($this->parent, _c_lib__arrUtils::readIndex($subs, $i));
array_push($this->subs, $sub);}}
}
}

function runSubs(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Value' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_String') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_Number') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_Array') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_Map') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_Bool') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_Null')) or gettype($arguments[0]) == 'NULL')) {
$on = $arguments[0];
$last = $on;
for ($i = 0; $i < count($this->subs); $i++) {
$sub = _c_lib__arrUtils::readIndex($this->subs, $i);
$last = $sub->run($last);}
return $last;
}
}


}class Carbonite_Pre_Expressions_Raw {
public $value;

public $data;

public $subs;

public $parent;

function __construct(...$arguments) {
$this->value = null;
$this->data = null;
$this->subs = [];
$this->parent = null;

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statement' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Define') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Function') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_If') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_For') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Raw') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Lost') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Var') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Return') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Include') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Out') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Script')) or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->data = $raw;
$this->parent = $parent;
}

}
function build(...$arguments) {
if (count($arguments) == 0) {
$this->value = Carbonite_Pre_Value::make($this->data);
}
}

function run(...$arguments) {
if (count($arguments) == 0) {
return $this->value;
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statement' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Define') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Function') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_If') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_For') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Raw') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Lost') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Var') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Return') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Include') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Out') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Script')) or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$data = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "operation") {
$rtn = new Carbonite_Pre_Expressions_Operation($parent, $data);}else if ($type == "constant") {
$rtn = new Carbonite_Pre_Expressions_Reference($parent, $data);}else if ($type == "call") {
$rtn = new Carbonite_Pre_Expressions_Call($parent, $data);}else{
$rtn = new Carbonite_Pre_Expressions_Raw($parent, $data);}
return $rtn;
}
}

function buildSubs(...$arguments) {
if (count($arguments) == 0) {
if (isset($this->data["subs"])) {
$subs = &_c_lib__mapUtils::readIndex($this->data, "subs");
for ($i = 0; $i < count($subs); $i++) {
$sub = new Carbonite_Pre_Sub($this->parent, _c_lib__arrUtils::readIndex($subs, $i));
array_push($this->subs, $sub);}}
}
}

function runSubs(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Value' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_String') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_Number') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_Array') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_Map') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_Bool') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_Null')) or gettype($arguments[0]) == 'NULL')) {
$on = $arguments[0];
$last = $on;
for ($i = 0; $i < count($this->subs); $i++) {
$sub = _c_lib__arrUtils::readIndex($this->subs, $i);
$last = $sub->run($last);}
return $last;
}
}


}class Carbonite_Pre_Expressions_Reference {
public $name;

public $data;

public $subs;

public $parent;

function __construct(...$arguments) {
$this->name = "";
$this->data = null;
$this->subs = [];
$this->parent = null;

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statement' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Define') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Function') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_If') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_For') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Raw') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Lost') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Var') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Return') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Include') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Out') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Script')) or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$raw = $arguments[1];
$this->data = $raw;
$this->parent = $parent;
}

}
function build(...$arguments) {
if (count($arguments) == 0) {
$this->buildSubs();
$this->name = _c_lib__mapUtils::readIndex($this->data, "value");
}
}

function run(...$arguments) {
if (count($arguments) == 0) {
$ref = $this->parent->scope->search($this->name);
if ($ref != null) {
return $this->runSubs($ref->value);}else{
$this->parent->topParent->parent->runtimeError(_c_lib__mapUtils::readIndex($this->data, "startOffset"), _c_lib__mapUtils::readIndex($this->data, "offset"), "Unknown variable '" . $this->name . "'");}
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statement' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Define') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Function') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_If') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_For') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Raw') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Lost') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Var') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Return') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Include') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Out') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Statements_Script')) or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$data = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "operation") {
$rtn = new Carbonite_Pre_Expressions_Operation($parent, $data);}else if ($type == "constant") {
$rtn = new Carbonite_Pre_Expressions_Reference($parent, $data);}else if ($type == "call") {
$rtn = new Carbonite_Pre_Expressions_Call($parent, $data);}else{
$rtn = new Carbonite_Pre_Expressions_Raw($parent, $data);}
return $rtn;
}
}

function buildSubs(...$arguments) {
if (count($arguments) == 0) {
if (isset($this->data["subs"])) {
$subs = &_c_lib__mapUtils::readIndex($this->data, "subs");
for ($i = 0; $i < count($subs); $i++) {
$sub = new Carbonite_Pre_Sub($this->parent, _c_lib__arrUtils::readIndex($subs, $i));
array_push($this->subs, $sub);}}
}
}

function runSubs(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Value' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_String') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_Number') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_Array') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_Map') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_Bool') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Pre_Values_Null')) or gettype($arguments[0]) == 'NULL')) {
$on = $arguments[0];
$last = $on;
for ($i = 0; $i < count($this->subs); $i++) {
$sub = _c_lib__arrUtils::readIndex($this->subs, $i);
$last = $sub->run($last);}
return $last;
}
}


}class Carbide {

function __construct(...$arguments) {


}

}class Carbide_Languages {

function __construct(...$arguments) {


}

}class Carbide_Virtual {

function __construct(...$arguments) {


}

}class Carbide_Virtual_Statements {

function __construct(...$arguments) {


}

}class Carbide_Virtual_Values {

function __construct(...$arguments) {


}

}class Carbide_Virtual_Expressions {

function __construct(...$arguments) {


}

}class Carbide_Language {

function __construct(...$arguments) {


}

}class Oxygen_FileSystem {

function __construct(...$arguments) {


}
static function readSync(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL')) {
$location = $arguments[0];
$format = $arguments[1];
return file_get_contents($arguments[0]);
}
}

static function read(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL') and (is_callable($arguments[2]) or gettype($arguments[2]) == 'NULL')) {
$location = $arguments[0];
$format = $arguments[1];
$callback = $arguments[2];
$arguments[2](file_get_contents($arguments[0]));
}
}

static function write(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL') and (is_callable($arguments[2]) or gettype($arguments[2]) == 'NULL')) {
$location = $arguments[0];
$content = $arguments[1];
$callback = $arguments[2];
$arguments[2](file_put_contents($arguments[0], $arguments[1]));
}
}

static function writeSync(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL')) {
$location = $arguments[0];
$content = $arguments[1];
file_put_contents($arguments[0], $arguments[1]);
}
}

static function statSync(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$location = $arguments[0];

}
}

function stat(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (is_callable($arguments[1]) or gettype($arguments[1]) == 'NULL')) {
$location = $arguments[0];
$callback = $arguments[1];

}
}

function openSync(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL')) {
$location = $arguments[0];
$flags = $arguments[1];

}
}

function open(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL') and (is_callable($arguments[2]) or gettype($arguments[2]) == 'NULL')) {
$location = $arguments[0];
$flags = $arguments[1];
$callback = $arguments[2];

}
}

static function &readDirSync(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$location = $arguments[0];
return scandir($arguments[0]);
}
}

static function dirName(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$location = $arguments[0];
return dirname($arguments[0]);
}
}

static function isDir(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$location = $arguments[0];
return is_dir($arguments[0]);
}
}

static function normalize(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$path = $arguments[0];
return realpath($arguments[0]);
}
}

static function resolve(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$path = $arguments[0];
return realpath($arguments[0]);
}
}

static function exists(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$location = $arguments[0];
return file_exists($arguments[0]);
}
}

static function basename(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$location = $arguments[0];
return basename($arguments[0]);
}
}

static function makeDir(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$location = $arguments[0];
mkdir($arguments[0]);
}
}


}class Oxygen_FileSystem_Stat {
public $dev;

public $ino;

public $mode;

public $nlink;

public $uid;

public $gid;

public $rdev;

public $size;

public $blksize;

public $blocks;

public $atime;

public $mtime;

public $ctime;

public $birthtime;

function __construct(...$arguments) {
$this->dev = 0;
$this->ino = 0;
$this->mode = 0;
$this->nlink = 0;
$this->uid = 0;
$this->gid = 0;
$this->rdev = 0;
$this->size = 0;
$this->blksize = 0;
$this->blocks = 0;
$this->atime = 0;
$this->mtime = 0;
$this->ctime = 0;
$this->birthtime = 0;

if (count($arguments) == 0) {

}

}
static function fromMap(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$data = $arguments[0];
$stat = new Oxygen_FileSystem_Stat();
$stat->dev = _c_lib__mapUtils::readIndex($data, "dev");
$stat->ino = _c_lib__mapUtils::readIndex($data, "ino");
$stat->mode = _c_lib__mapUtils::readIndex($data, "mode");
$stat->nlink = _c_lib__mapUtils::readIndex($data, "nlink");
$stat->uid = _c_lib__mapUtils::readIndex($data, "uid");
$stat->gid = _c_lib__mapUtils::readIndex($data, "gid");
$stat->rdev = _c_lib__mapUtils::readIndex($data, "rdev");
$stat->size = _c_lib__mapUtils::readIndex($data, "size");
$stat->blksize = _c_lib__mapUtils::readIndex($data, "blksize");
$stat->blocks = _c_lib__mapUtils::readIndex($data, "blocks");
$stat->atime = _c_lib__mapUtils::readIndex($data, "atime");
$stat->mtime = _c_lib__mapUtils::readIndex($data, "mtime");
$stat->ctime = _c_lib__mapUtils::readIndex($data, "ctime");
$stat->birthtime = _c_lib__mapUtils::readIndex($data, "birthtime");
return $stat;
}
}


}class Carbide_Languages_Calcium {

function __construct(...$arguments) {


}
static function virtualize(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$input = $arguments[0];
$po = CarbideCalciumParser::parse($input);
$ast = &$po->data;
$root = null;
$proc = new Carbide_Virtual_Processor($root);
$exps = &_c_lib__mapUtils::readIndex($ast, "document")["expressions"];
$root = Carbide_Languages_Calcium::buildBlock($proc, $exps);
return $proc;
}
}

static function virtualizeIntoProcessor(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[2]) == 'NULL')) {
$label = $arguments[0];
$input = $arguments[1];
$processor = $arguments[2];
$po = CarbideCalciumParser::parse($input);
$ast = &$po->data;
$root = null;
$exps = &_c_lib__mapUtils::readIndex($ast, "document")["expressions"];
$root = Carbide_Languages_Calcium::buildBlock($processor, $exps);
$root->label = $label;
$processor->addBlock($root);
return $root;
}
}

static function buildBlock(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$code = $arguments[1];
$rtn = new Carbide_Virtual_Block($parent);
if ($parent->root == null) {
$parent->root = $rtn;
$parent->root->scope = $parent->scope;}
for ($i = 0; $i < count($code); $i++) {
$exp = &_c_lib__arrUtils::readIndex($code, $i);
$state = null;
$type = _c_lib__mapUtils::readIndex($exp, "type");
if ($type == "let") {
$litType = _c_lib__mapUtils::readIndex($exp, "value")["type"];
if ($litType == "function") {
$args = &_c_lib__mapUtils::readIndex($exp, "value")["parameters"];
$exps = &_c_lib__mapUtils::readIndex($exp, "value")["body"];
$state = new Carbide_Virtual_Statements_Function($rtn, _c_lib__mapUtils::readIndex($exp, "name"), $args, Carbide_Languages_Calcium::buildBlock($parent, $exps));}else{
$state = new Carbide_Virtual_Statements_Var($rtn, _c_lib__mapUtils::readIndex($exp, "name"), Carbide_Languages_Calcium::buildExpression(_c_lib__mapUtils::readIndex($exp, "value"), $parent));}}else if ($type == "set") {
$litType = _c_lib__mapUtils::readIndex($exp, "value")["type"];
if ($litType == "function") {
$args = &_c_lib__mapUtils::readIndex($exp, "value")["parameters"];
$exps = &_c_lib__mapUtils::readIndex($exp, "value")["body"];
$state = new Carbide_Virtual_Statements_Function($rtn, _c_lib__mapUtils::readIndex($exp, "name"), $args, Carbide_Languages_Calcium::buildBlock($parent, $exps));}else{
$name = _c_lib__mapUtils::readIndex($exp, "name");
$splits = explode(".", $name);
if (count($splits) == 1) {
$state = new Carbide_Virtual_Statements_Define($rtn, $name, Carbide_Languages_Calcium::buildExpression(_c_lib__mapUtils::readIndex($exp, "value"), $parent));}else{
$state = new Carbide_Virtual_Statements_Lost($rtn, new Carbide_Virtual_Expressions_Operation("=", Carbide_Languages_Calcium::buildSub(_c_lib__mapUtils::readIndex($exp, "name")), Carbide_Languages_Calcium::buildExpression(_c_lib__mapUtils::readIndex($exp, "value"), $parent)));}}}else if ($type == "if") {
$exps = &_c_lib__mapUtils::readIndex($exp, "body");
$checks = [];
array_push($checks, Carbide_Languages_Calcium::buildExpression(_c_lib__mapUtils::readIndex($exp, "check"), $parent));
$state = new Carbide_Virtual_Statements_If($rtn, $checks, Carbide_Languages_Calcium::buildBlock($parent, $exps));}else if ($type == "for") {
$exps = &_c_lib__mapUtils::readIndex($exp, "body");
$refer = new Carbide_Virtual_Expressions_Reference(_c_lib__mapUtils::readIndex($exp, "name"));
$one = 1;
$numb = new Carbide_Virtual_Expressions_Raw(Carbide_Virtual_Values_Number::create($one));
$operation = new Carbide_Virtual_Expressions_Operation("+" . "=", $refer, $numb);
$state = new Carbide_Virtual_Statements_For($rtn, _c_lib__mapUtils::readIndex($exp, "name"), Carbide_Languages_Calcium::buildExpression(_c_lib__mapUtils::readIndex($exp, "from"), $parent), Carbide_Languages_Calcium::buildExpression(_c_lib__mapUtils::readIndex($exp, "check"), $parent), $operation, Carbide_Languages_Calcium::buildBlock($parent, $exps));}else if ($type == "return") {
$state = new Carbide_Virtual_Statements_Return($rtn, Carbide_Languages_Calcium::buildExpression(_c_lib__mapUtils::readIndex($exp, "value"), $parent));}else{
$state = new Carbide_Virtual_Statements_Lost($rtn, Carbide_Languages_Calcium::buildExpression($exp, $parent));}
$state->scope = new Carbide_Virtual_Scope($parent);
array_push($rtn->statements, $state);}
return $rtn;
}
}

static function buildSub(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
$splits = explode(".", $name);
$rtn = new Carbide_Virtual_Expressions_Reference(_c_lib__arrUtils::readIndex($splits, 0));
if (count($splits) > 1) {
for ($s = 1;$s < count($splits);$s++) {
$sub = new Carbide_Virtual_Sub(null);
$sub->type = 1;
$sub->property = _c_lib__arrUtils::readIndex($splits, $s);
array_push($rtn->subs, $sub);}}
return $rtn;
}
}

static function buildExpression(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[1]) == 'NULL')) {
$exp = $arguments[0];
$proc = $arguments[1];
$type = _c_lib__mapUtils::readIndex($exp, "type");
$rtn = null;
if ($type == "literal") {
$val = null;
$litType = _c_lib__mapUtils::readIndex($exp, "literalType");
if ($litType == "number") {
$rVal = _c_lib__mapUtils::readIndex($exp, "value");
$val = Carbide_Virtual_Values_Number::create($rVal);}else if ($litType == "boolean") {
$rVal = _c_lib__mapUtils::readIndex($exp, "value");
$val = Carbide_Virtual_Values_Bool::create($rVal);}else if ($litType == "string") {
$rVal = _c_lib__mapUtils::readIndex($exp, "value");
$val = Carbide_Virtual_Values_String::create($rVal);}else if ($litType == "map") {
$val = Carbide_Virtual_Values_Map::create(['_c__mapC' => true]);}else if ($litType == "array") {
$val = Carbide_Virtual_Values_Array::create([]);}
$rtn = new Carbide_Virtual_Expressions_Raw($val);}else if ($type == "function") {
$rVal = &$exp;
$rtn = new Carbide_Virtual_Expressions_Raw(Carbide_Virtual_Values_Function::create(_c_lib__mapUtils::readIndex($rVal, "parameters"), Carbide_Languages_Calcium::buildBlock($proc, _c_lib__mapUtils::readIndex($rVal, "body"))));}else if ($type == "operation") {
$rtn = new Carbide_Virtual_Expressions_Operation(_c_lib__mapUtils::readIndex($exp, "operator"), Carbide_Languages_Calcium::buildExpression(_c_lib__mapUtils::readIndex($exp, "head"), $proc), Carbide_Languages_Calcium::buildExpression(_c_lib__mapUtils::readIndex($exp, "tail"), $proc));}else if ($type == "call") {
$args = [];
$rawArgs = &_c_lib__mapUtils::readIndex($exp, "arguments");
for ($i = 0; $i < count($rawArgs); $i++) {
$rawArg = &_c_lib__arrUtils::readIndex($rawArgs, $i);
array_push($args, Carbide_Languages_Calcium::buildExpression($rawArg, $proc));}
$rtn = new Carbide_Virtual_Expressions_Call($args, _c_lib__mapUtils::readIndex($exp, "name"));}else if ($type == "constant") {
return Carbide_Languages_Calcium::buildSub(_c_lib__mapUtils::readIndex($exp, "name"));}
return $rtn;
}
}


}class CarbideCalciumParserLocation {
public $offset;

public $line;

public $column;

function __construct(...$arguments) {
$this->offset = 0;
$this->line = 1;
$this->column = 0;

if (count($arguments) == 3 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'integer' or gettype($arguments[2]) == 'NULL')) {
$offset = $arguments[0];
$line = $arguments[1];
$column = $arguments[2];
$this->offset = $offset;
$this->line = $line;
$this->column = $column;
}

}

}class CarbideCalciumParserError {
public $code;

public $found;

public $expected;

public $vested;

public $path;

public $offset;

public $line;

public $column;

function __construct(...$arguments) {
$this->code = 0;
$this->found = 0;
$this->expected = 0;
$this->vested = 0;
$this->path = [];
$this->offset = 0;
$this->line = 1;
$this->column = 0;

if (count($arguments) == 3 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'integer' or gettype($arguments[2]) == 'NULL')) {
$offset = $arguments[0];
$line = $arguments[1];
$column = $arguments[2];
$this->offset = $offset;
$this->line = $line;
$this->column = $column;
}

}
function _c__clone(...$arguments) {
if (count($arguments) == 0) {
$_c__clone = new CarbideCalciumParserError($this->offset, $this->line, $this->column);
$_c__clone->code = $this->code;
$_c__clone->found = $this->found;
$_c__clone->expected = $this->expected;
$_c__clone->vested = $this->vested;
for ($i = 0; $i < count($this->path); $i++) {
$current = _c_lib__arrUtils::readIndex($this->path, $i);
array_push($_c__clone->path, $current->_c__clone());}
return $_c__clone;
}
}


}class CarbideCalciumParserOutput {
public $error;

public $hadError;

public $data;

function __construct(...$arguments) {
$this->error = null;
$this->hadError = false;
$this->data = ['_c__mapC' => true];

if (count($arguments) == 3 and (gettype($arguments[0]) == 'boolean' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\CarbideCalciumParserError') or gettype($arguments[1]) == 'NULL') and ((gettype($arguments[2]) == 'array' and isset($arguments[2]['_c__mapC'])) or gettype($arguments[2]) == 'NULL')) {
$hadError = $arguments[0];
$error = $arguments[1];
$data = $arguments[2];
$this->hadError = $hadError;
$this->error = $error;
$this->data = $data;
}

}

}class CarbideCalciumParser {
public $lastErrors;

public $hadError;

public $parsedChars;

public $currentInput;

public $data;

public $error;

public $offset;

public $line;

public $column;

function __construct(...$arguments) {
$this->lastErrors = [];
$this->hadError = false;
$this->parsedChars = 0;
$this->currentInput = "";
$this->data = ['_c__mapC' => true];
$this->error = new CarbideCalciumParserError(0, 0, 0);
$this->offset = 0;
$this->line = 1;
$this->column = 0;

if (count($arguments) == 0) {

}

}
static function parse(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$input = $arguments[0];
$parser = new CarbideCalciumParser();
$output = &$parser->start($input);
if ($parser->hadError and $parser->error->found == chr(1)) {
$parser->error->found = "End of input";}
$rtn = new CarbideCalciumParserOutput($parser->hadError, $parser->error, _c_lib__mapUtils::readIndex($parser->data, "data"));
return $rtn;
}
}

function assembleCodes(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$codes = $arguments[0];
$rtn = "";
for ($i = 0; $i < count($codes); $i++) {
$rtn .= chr(_c_lib__arrUtils::readIndex($codes, $i));}
return $rtn;
}
}

function giveError(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'string' or gettype($arguments[2]) == 'NULL')) {
$code = $arguments[0];
$expected = $arguments[1];
$found = $arguments[2];
$this->hadError = true;
$this->error->code = $code;
$this->error->expected = $expected;
$this->error->found = $found;
$this->error->offset = $this->offset;
$this->error->line = 1;
$this->error->column = 0;
}
}

function &start(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$input = $arguments[0];
$this->currentInput = $input;
$input .= chr(1);
$this->data["data"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($this->data, "data");
$c = 0;
$literalChar = 0;
for ($charPos = 0;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($c == 0 - 1) {
if ($currentChar != chr(1)) {
$this->giveError(2, "EOF", $currentChar);}}
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->Document($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "Document(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = &_c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["document"] = $ruleOutCast0;
$c = 0 - 1;}}
$this->offset++;
$this->column++;
if ($this->hadError) {
break;}}
for ($i = 0;$i < $this->error->offset;$i++) {
$this->error->column++;
if ($this->currentInput[$i] == "\n") {
$this->error->line++;
$this->error->column = 0;}}
if (false and $this->hadError == false) {
if ($this->offset < strlen($input) - 1) {
$this->giveError(2, "EOF", $input[$this->offset + 1]);}}
}
}

function Document(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["exp"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->Statement($input, $charPos);
if ($ruleOut0->hadError) {
if (true) {
$castacexp0 = &_c_lib__mapUtils::readIndex($data, "exp");
$actionCap0exp = &_c_lib__mapUtils::readIndex($data, "exp");
_c_lib__mapUtils::readIndex($dataStore, "data")["expressions"] = $actionCap0exp;}
$c = 0 - 1;
$charPos--;
$this->offset--;
if ($ruleOut0->error->vested > 1) {
$this->giveError($ruleOut0->error->code, $ruleOut0->error->expected, $ruleOut0->error->found);}}else{
$ruleOutCast0 = &_c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$castexp0 = &_c_lib__mapUtils::readIndex($data, "exp");
array_push($castexp0, $ruleOutCast0);
if (ord($input[$charPos + 1]) != 10) {
if (true) {
$castacexp0 = &_c_lib__mapUtils::readIndex($data, "exp");
$actionCap0exp = &_c_lib__mapUtils::readIndex($data, "exp");
_c_lib__mapUtils::readIndex($dataStore, "data")["expressions"] = $actionCap0exp;}
$c = 0 - 1;
continue;}else{
$charPos++;}
if (true) {
$castacexp0 = &_c_lib__mapUtils::readIndex($data, "exp");
$actionCap0exp = &_c_lib__mapUtils::readIndex($data, "exp");
_c_lib__mapUtils::readIndex($dataStore, "data")["expressions"] = $actionCap0exp;}
$c = 0;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Expression(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
$ruleOut1 = $this->_c__Function($input, $charPos);
if ($ruleOut1->hadError) {
$c = 2;
$charPos--;
$this->offset--;}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast1;
if (true) {
$castacexp1 = &_c_lib__mapUtils::readIndex($data, "exp");
$actionCap1exp = &_c_lib__mapUtils::readIndex($data, "exp");
$dataStore["data"] = $actionCap1exp;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->Call($input, $charPos);
if ($ruleOut2->hadError) {
$c = 3;
$charPos--;
$this->offset--;}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast2;
if (true) {
$castacexp1 = &_c_lib__mapUtils::readIndex($data, "exp");
$actionCap1exp = &_c_lib__mapUtils::readIndex($data, "exp");
$dataStore["data"] = $actionCap1exp;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->Operation($input, $charPos);
if ($ruleOut3->hadError) {
$c = 4;
$charPos--;
$this->offset--;}else{
$ruleOutCast3 = &_c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast3;
if (true) {
$castacexp1 = &_c_lib__mapUtils::readIndex($data, "exp");
$actionCap1exp = &_c_lib__mapUtils::readIndex($data, "exp");
$dataStore["data"] = $actionCap1exp;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 4) {
$ruleOut4 = $this->Value($input, $charPos);
if ($ruleOut4->hadError) {
$this->giveError(1, "Function, Call, Operation, Value", $currentChar);}else{
$ruleOutCast4 = &_c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast4;
if (true) {
$castacexp1 = &_c_lib__mapUtils::readIndex($data, "exp");
$actionCap1exp = &_c_lib__mapUtils::readIndex($data, "exp");
$dataStore["data"] = $actionCap1exp;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Call(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["args"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->Safe_Name($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "Safe_Name(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["name"] = $ruleOutCast0;
$c = 1;
$this->error->vested++;}}else if ($c == 1) {
if ($currentCode == 40) {
$c = 2;
$this->error->vested++;}else{
$this->giveError(1, "(", $currentChar);}}else if ($c == 2) {
$ruleOut2 = $this->_($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "White space(optional)(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$c = 3;}}else if ($c == 3) {
$ruleOut3 = $this->Expression($input, $charPos);
if ($ruleOut3->hadError) {
$c = 4;
$charPos--;
$this->offset--;
if ($ruleOut3->error->vested > 1) {
$this->giveError($ruleOut3->error->code, $ruleOut3->error->expected, $ruleOut3->error->found);}}else{
$ruleOutCast3 = &_c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$castargs3 = &_c_lib__mapUtils::readIndex($data, "args");
array_push($castargs3, $ruleOutCast3);
if (ord($input[$charPos + 1]) != 44) {
$c = 4;
continue;}else{
$charPos++;}
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 3;
$this->error->vested++;}}else if ($c == 4) {
$ruleOut4 = $this->_($input, $charPos);
if ($ruleOut4->hadError) {
$this->giveError($ruleOut4->error->code, "White space(optional)(" . $ruleOut4->error->expected . ")", $ruleOut4->error->found);}else{
$ruleOutCast4 = _c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$c = 5;}}else if ($c == 5) {
if ($currentCode == 41) {
if (true) {
$castac5 = _c_lib__mapUtils::readIndex($data, "");
$actionCap5name = _c_lib__mapUtils::readIndex($data, "name");
$actionCap5args = &_c_lib__mapUtils::readIndex($data, "args");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "call";
_c_lib__mapUtils::readIndex($dataStore, "data")["name"] = $actionCap5name;
_c_lib__mapUtils::readIndex($dataStore, "data")["arguments"] = $actionCap5args;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, ")", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Operation(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->Value($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "Value(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = &_c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["head"] = $ruleOutCast0;
$c = 1;
$this->error->vested++;}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Operator($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "Operator(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["operator"] = $ruleOutCast2;
$c = 3;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
$ruleOut4 = $this->Expression($input, $charPos);
if ($ruleOut4->hadError) {
$this->giveError($ruleOut4->error->code, "Expression(" . $ruleOut4->error->expected . ")", $ruleOut4->error->found);}else{
$ruleOutCast4 = &_c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$data["tail"] = $ruleOutCast4;
if (true) {
$castactail4 = &_c_lib__mapUtils::readIndex($data, "tail");
$actionCap4head = &_c_lib__mapUtils::readIndex($data, "head");
$actionCap4tail = &_c_lib__mapUtils::readIndex($data, "tail");
$actionCap4operator = _c_lib__mapUtils::readIndex($data, "operator");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "operation";
_c_lib__mapUtils::readIndex($dataStore, "data")["head"] = $actionCap4head;
_c_lib__mapUtils::readIndex($dataStore, "data")["tail"] = $actionCap4tail;
_c_lib__mapUtils::readIndex($dataStore, "data")["operator"] = $actionCap4operator;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Operator(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 43) {
$data["s"] = "+";
if (true) {
$castacs0 = &$data["s"];
$actionCap0s = &$data["s"];
$dataStore["data"] = $actionCap0s;}
$c = 0 - 1;
$this->error->vested++;}else{
$c = 1;
$charPos--;
$this->offset--;}}else if ($c == 1) {
if ($currentCode == 45) {
$data["s"] = "-";
if (true) {
$castacs0 = &$data["s"];
$actionCap0s = &$data["s"];
$dataStore["data"] = $actionCap0s;}
$c = 0 - 1;
$this->error->vested++;}else{
$c = 2;
$charPos--;
$this->offset--;}}else if ($c == 2) {
if ($currentCode == 42) {
$data["s"] = "*";
if (true) {
$castacs0 = &$data["s"];
$actionCap0s = &$data["s"];
$dataStore["data"] = $actionCap0s;}
$c = 0 - 1;
$this->error->vested++;}else{
$c = 3;
$charPos--;
$this->offset--;}}else if ($c == 3) {
if ($currentCode == 47) {
$data["s"] = "/";
if (true) {
$castacs0 = &$data["s"];
$actionCap0s = &$data["s"];
$dataStore["data"] = $actionCap0s;}
$c = 0 - 1;
$this->error->vested++;}else{
$c = 4;
$charPos--;
$this->offset--;}}else if ($c == 4) {
$lit4 = [61, 61];
if ($currentCode == _c_lib__arrUtils::readIndex($lit4, $literalChar)) {
$literalChar++;
if ($literalChar == 2) {
$data["s"] = $this->assembleCodes($lit4);
if (true) {
$castacs0 = &$data["s"];
$actionCap0s = &$data["s"];
$dataStore["data"] = $actionCap0s;}
$c = 0 - 1;
$literalChar = 0;}
$this->error->vested++;}else{
$c = 5;
$charPos--;
$this->offset--;}}else if ($c == 5) {
if ($currentCode == 62) {
$data["s"] = ">";
if (true) {
$castacs0 = &$data["s"];
$actionCap0s = &$data["s"];
$dataStore["data"] = $actionCap0s;}
$c = 0 - 1;
$this->error->vested++;}else{
$c = 6;
$charPos--;
$this->offset--;}}else if ($c == 6) {
if ($currentCode == 60) {
$data["s"] = "<";
if (true) {
$castacs0 = &$data["s"];
$actionCap0s = &$data["s"];
$dataStore["data"] = $actionCap0s;}
$c = 0 - 1;
$this->error->vested++;}else{
$c = 7;
$charPos--;
$this->offset--;}}else if ($c == 7) {
$lit7 = [33, 61];
if ($currentCode == _c_lib__arrUtils::readIndex($lit7, $literalChar)) {
$literalChar++;
if ($literalChar == 2) {
$data["s"] = $this->assembleCodes($lit7);
if (true) {
$castacs0 = &$data["s"];
$actionCap0s = &$data["s"];
$dataStore["data"] = $actionCap0s;}
$c = 0 - 1;
$literalChar = 0;}
$this->error->vested++;}else{
$c = 8;
$charPos--;
$this->offset--;}}else if ($c == 8) {
$lit8 = [43, 61];
if ($currentCode == _c_lib__arrUtils::readIndex($lit8, $literalChar)) {
$literalChar++;
if ($literalChar == 2) {
$data["s"] = $this->assembleCodes($lit8);
if (true) {
$castacs0 = &$data["s"];
$actionCap0s = &$data["s"];
$dataStore["data"] = $actionCap0s;}
$c = 0 - 1;
$literalChar = 0;}
$this->error->vested++;}else{
$c = 9;
$charPos--;
$this->offset--;}}else if ($c == 9) {
$lit9 = [45, 61];
if ($currentCode == _c_lib__arrUtils::readIndex($lit9, $literalChar)) {
$literalChar++;
if ($literalChar == 2) {
$data["s"] = $this->assembleCodes($lit9);
if (true) {
$castacs0 = &$data["s"];
$actionCap0s = &$data["s"];
$dataStore["data"] = $actionCap0s;}
$c = 0 - 1;
$literalChar = 0;}
$this->error->vested++;}else{
$c = 10;
$charPos--;
$this->offset--;}}else if ($c == 10) {
$lit10 = [42, 61];
if ($currentCode == _c_lib__arrUtils::readIndex($lit10, $literalChar)) {
$literalChar++;
if ($literalChar == 2) {
$data["s"] = $this->assembleCodes($lit10);
if (true) {
$castacs0 = &$data["s"];
$actionCap0s = &$data["s"];
$dataStore["data"] = $actionCap0s;}
$c = 0 - 1;
$literalChar = 0;}
$this->error->vested++;}else{
$c = 11;
$charPos--;
$this->offset--;}}else if ($c == 11) {
$lit11 = [47, 61];
if ($currentCode == _c_lib__arrUtils::readIndex($lit11, $literalChar)) {
$literalChar++;
if ($literalChar == 2) {
$data["s"] = $this->assembleCodes($lit11);
if (true) {
$castacs0 = &$data["s"];
$actionCap0s = &$data["s"];
$dataStore["data"] = $actionCap0s;}
$c = 0 - 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "+, -, *, /, ==, >, <, !=, +=, -=, *=, /=", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Statement(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
$ruleOut1 = $this->_c__For($input, $charPos);
if ($ruleOut1->hadError) {
$c = 2;
$charPos--;
$this->offset--;}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast1;
if (true) {
$castacexp1 = &_c_lib__mapUtils::readIndex($data, "exp");
$actionCap1exp = &_c_lib__mapUtils::readIndex($data, "exp");
$dataStore["data"] = $actionCap1exp;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->_c__If($input, $charPos);
if ($ruleOut2->hadError) {
$c = 3;
$charPos--;
$this->offset--;}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast2;
if (true) {
$castacexp1 = &_c_lib__mapUtils::readIndex($data, "exp");
$actionCap1exp = &_c_lib__mapUtils::readIndex($data, "exp");
$dataStore["data"] = $actionCap1exp;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->_c__Return($input, $charPos);
if ($ruleOut3->hadError) {
$c = 4;
$charPos--;
$this->offset--;}else{
$ruleOutCast3 = &_c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast3;
if (true) {
$castacexp1 = &_c_lib__mapUtils::readIndex($data, "exp");
$actionCap1exp = &_c_lib__mapUtils::readIndex($data, "exp");
$dataStore["data"] = $actionCap1exp;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 4) {
$ruleOut4 = $this->Let($input, $charPos);
if ($ruleOut4->hadError) {
$c = 5;
$charPos--;
$this->offset--;}else{
$ruleOutCast4 = &_c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast4;
if (true) {
$castacexp1 = &_c_lib__mapUtils::readIndex($data, "exp");
$actionCap1exp = &_c_lib__mapUtils::readIndex($data, "exp");
$dataStore["data"] = $actionCap1exp;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 5) {
$ruleOut5 = $this->Call($input, $charPos);
if ($ruleOut5->hadError) {
$c = 6;
$charPos--;
$this->offset--;}else{
$ruleOutCast5 = &_c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast5;
if (true) {
$castacexp1 = &_c_lib__mapUtils::readIndex($data, "exp");
$actionCap1exp = &_c_lib__mapUtils::readIndex($data, "exp");
$dataStore["data"] = $actionCap1exp;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 6) {
$ruleOut6 = $this->Set($input, $charPos);
if ($ruleOut6->hadError) {
$c = 7;
$charPos--;
$this->offset--;}else{
$ruleOutCast6 = &_c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast6;
if (true) {
$castacexp1 = &_c_lib__mapUtils::readIndex($data, "exp");
$actionCap1exp = &_c_lib__mapUtils::readIndex($data, "exp");
$dataStore["data"] = $actionCap1exp;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 7) {
$ruleOut7 = $this->Operation($input, $charPos);
if ($ruleOut7->hadError) {
$this->giveError(1, "For, If, Return, Let, Call, Set, Operation", $currentChar);}else{
$ruleOutCast7 = &_c_lib__mapUtils::readIndex($ruleOut7->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast7;
if (true) {
$castacexp1 = &_c_lib__mapUtils::readIndex($data, "exp");
$actionCap1exp = &_c_lib__mapUtils::readIndex($data, "exp");
$dataStore["data"] = $actionCap1exp;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function _c__Return(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [114, 101, 116, 117, 114, 110];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 6) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Expression($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "Expression(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast2;
if (true) {
$castacexp2 = &_c_lib__mapUtils::readIndex($data, "exp");
$actionCap2exp = &_c_lib__mapUtils::readIndex($data, "exp");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "return";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap2exp;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function _c__If(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [105, 102];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 2) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Expression($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "Expression(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["check"] = $ruleOutCast2;
$c = 3;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
$ruleOut4 = $this->Document($input, $charPos);
if ($ruleOut4->hadError) {
$this->giveError($ruleOut4->error->code, "Document(" . $ruleOut4->error->expected . ")", $ruleOut4->error->found);}else{
$ruleOutCast4 = &_c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$data["body"] = $ruleOutCast4;
$c = 5;}}else if ($c == 5) {
$ruleOut5 = $this->_($input, $charPos);
if ($ruleOut5->hadError) {
$this->giveError($ruleOut5->error->code, "White space(optional)(" . $ruleOut5->error->expected . ")", $ruleOut5->error->found);}else{
$ruleOutCast5 = _c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$c = 6;}}else if ($c == 6) {
$lit6 = [101, 110, 100];
if ($currentCode == _c_lib__arrUtils::readIndex($lit6, $literalChar)) {
$literalChar++;
if ($literalChar == 3) {
if (true) {
$castac6 = _c_lib__mapUtils::readIndex($data, "");
$actionCap6check = &_c_lib__mapUtils::readIndex($data, "check");
$actionCap6body = &_c_lib__mapUtils::readIndex($data, "body");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "if";
_c_lib__mapUtils::readIndex($dataStore, "data")["check"] = $actionCap6check;
_c_lib__mapUtils::readIndex($dataStore, "data")["body"] = _c_lib__mapUtils::readIndex($actionCap6body, "expressions");}
$c = 0 - 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit6) . "", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Set(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
$ruleOut1 = $this->Safe_Name($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "Safe_Name(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["name"] = $ruleOutCast1;
$c = 2;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->_($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "White space(optional)(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$c = 3;}}else if ($c == 3) {
if ($currentCode == 61) {
$c = 4;
$this->error->vested++;}else{
$this->giveError(1, "=", $currentChar);}}else if ($c == 4) {
$ruleOut4 = $this->_($input, $charPos);
if ($ruleOut4->hadError) {
$this->giveError($ruleOut4->error->code, "White space(optional)(" . $ruleOut4->error->expected . ")", $ruleOut4->error->found);}else{
$ruleOutCast4 = _c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$c = 5;}}else if ($c == 5) {
$ruleOut5 = $this->Expression($input, $charPos);
if ($ruleOut5->hadError) {
$this->giveError($ruleOut5->error->code, "Expression(" . $ruleOut5->error->expected . ")", $ruleOut5->error->found);}else{
$ruleOutCast5 = &_c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$data["value"] = $ruleOutCast5;
if (true) {
$castacvalue5 = &_c_lib__mapUtils::readIndex($data, "value");
$actionCap5name = _c_lib__mapUtils::readIndex($data, "name");
$actionCap5value = &_c_lib__mapUtils::readIndex($data, "value");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "set";
_c_lib__mapUtils::readIndex($dataStore, "data")["name"] = $actionCap5name;
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap5value;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Let(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [108, 101, 116];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 3) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Safe_Name($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "Safe_Name(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["name"] = $ruleOutCast2;
$c = 3;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
if ($currentCode == 61) {
$c = 5;
$this->error->vested++;}else{
$this->giveError(1, "=", $currentChar);}}else if ($c == 5) {
$ruleOut5 = $this->_($input, $charPos);
if ($ruleOut5->hadError) {
$this->giveError($ruleOut5->error->code, "White space(optional)(" . $ruleOut5->error->expected . ")", $ruleOut5->error->found);}else{
$ruleOutCast5 = _c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$c = 6;}}else if ($c == 6) {
$ruleOut6 = $this->Expression($input, $charPos);
if ($ruleOut6->hadError) {
$this->giveError($ruleOut6->error->code, "Expression(" . $ruleOut6->error->expected . ")", $ruleOut6->error->found);}else{
$ruleOutCast6 = &_c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$data["value"] = $ruleOutCast6;
if (true) {
$castacvalue6 = &_c_lib__mapUtils::readIndex($data, "value");
$actionCap6name = _c_lib__mapUtils::readIndex($data, "name");
$actionCap6value = &_c_lib__mapUtils::readIndex($data, "value");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "let";
_c_lib__mapUtils::readIndex($dataStore, "data")["name"] = $actionCap6name;
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap6value;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function _c__For(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [102, 111, 114];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 3) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Safe_Name($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "Safe_Name(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["name"] = $ruleOutCast2;
$c = 3;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
if ($currentCode == 61) {
$c = 5;
$this->error->vested++;}else{
$this->giveError(1, "=", $currentChar);}}else if ($c == 5) {
$ruleOut5 = $this->_($input, $charPos);
if ($ruleOut5->hadError) {
$this->giveError($ruleOut5->error->code, "White space(optional)(" . $ruleOut5->error->expected . ")", $ruleOut5->error->found);}else{
$ruleOutCast5 = _c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$c = 6;}}else if ($c == 6) {
$ruleOut6 = $this->Value($input, $charPos);
if ($ruleOut6->hadError) {
$this->giveError($ruleOut6->error->code, "Value(" . $ruleOut6->error->expected . ")", $ruleOut6->error->found);}else{
$ruleOutCast6 = &_c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$data["from"] = $ruleOutCast6;
$c = 7;
$this->error->vested++;}}else if ($c == 7) {
$ruleOut7 = $this->_($input, $charPos);
if ($ruleOut7->hadError) {
$this->giveError($ruleOut7->error->code, "White space(optional)(" . $ruleOut7->error->expected . ")", $ruleOut7->error->found);}else{
$ruleOutCast7 = _c_lib__mapUtils::readIndex($ruleOut7->data, "data");
$charPos = $this->offset;
$c = 8;}}else if ($c == 8) {
$lit8 = [97, 115];
if ($currentCode == _c_lib__arrUtils::readIndex($lit8, $literalChar)) {
$literalChar++;
if ($literalChar == 2) {
$c = 9;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit8) . "", $currentChar);}}else if ($c == 9) {
$ruleOut9 = $this->_($input, $charPos);
if ($ruleOut9->hadError) {
$this->giveError($ruleOut9->error->code, "White space(optional)(" . $ruleOut9->error->expected . ")", $ruleOut9->error->found);}else{
$ruleOutCast9 = _c_lib__mapUtils::readIndex($ruleOut9->data, "data");
$charPos = $this->offset;
$c = 10;}}else if ($c == 10) {
$ruleOut10 = $this->Expression($input, $charPos);
if ($ruleOut10->hadError) {
$this->giveError($ruleOut10->error->code, "Expression(" . $ruleOut10->error->expected . ")", $ruleOut10->error->found);}else{
$ruleOutCast10 = &_c_lib__mapUtils::readIndex($ruleOut10->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast10;
$c = 11;
$this->error->vested++;}}else if ($c == 11) {
$ruleOut11 = $this->_($input, $charPos);
if ($ruleOut11->hadError) {
$this->giveError($ruleOut11->error->code, "White space(optional)(" . $ruleOut11->error->expected . ")", $ruleOut11->error->found);}else{
$ruleOutCast11 = _c_lib__mapUtils::readIndex($ruleOut11->data, "data");
$charPos = $this->offset;
$c = 12;}}else if ($c == 12) {
$lit12 = [100, 111];
if ($currentCode == _c_lib__arrUtils::readIndex($lit12, $literalChar)) {
$literalChar++;
if ($literalChar == 2) {
$c = 13;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit12) . "", $currentChar);}}else if ($c == 13) {
$ruleOut13 = $this->_($input, $charPos);
if ($ruleOut13->hadError) {
$this->giveError($ruleOut13->error->code, "White space(optional)(" . $ruleOut13->error->expected . ")", $ruleOut13->error->found);}else{
$ruleOutCast13 = _c_lib__mapUtils::readIndex($ruleOut13->data, "data");
$charPos = $this->offset;
$c = 14;}}else if ($c == 14) {
$ruleOut14 = $this->Document($input, $charPos);
if ($ruleOut14->hadError) {
$this->giveError($ruleOut14->error->code, "Document(" . $ruleOut14->error->expected . ")", $ruleOut14->error->found);}else{
$ruleOutCast14 = &_c_lib__mapUtils::readIndex($ruleOut14->data, "data");
$charPos = $this->offset;
$data["body"] = $ruleOutCast14;
$c = 15;}}else if ($c == 15) {
$ruleOut15 = $this->_($input, $charPos);
if ($ruleOut15->hadError) {
$this->giveError($ruleOut15->error->code, "White space(optional)(" . $ruleOut15->error->expected . ")", $ruleOut15->error->found);}else{
$ruleOutCast15 = _c_lib__mapUtils::readIndex($ruleOut15->data, "data");
$charPos = $this->offset;
$c = 16;}}else if ($c == 16) {
$lit16 = [101, 110, 100];
if ($currentCode == _c_lib__arrUtils::readIndex($lit16, $literalChar)) {
$literalChar++;
if ($literalChar == 3) {
if (true) {
$castac16 = _c_lib__mapUtils::readIndex($data, "");
$actionCap16name = _c_lib__mapUtils::readIndex($data, "name");
$actionCap16from = &_c_lib__mapUtils::readIndex($data, "from");
$actionCap16exp = &_c_lib__mapUtils::readIndex($data, "exp");
$actionCap16body = &_c_lib__mapUtils::readIndex($data, "body");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "for";
_c_lib__mapUtils::readIndex($dataStore, "data")["name"] = $actionCap16name;
_c_lib__mapUtils::readIndex($dataStore, "data")["from"] = $actionCap16from;
_c_lib__mapUtils::readIndex($dataStore, "data")["check"] = $actionCap16exp;
_c_lib__mapUtils::readIndex($dataStore, "data")["body"] = _c_lib__mapUtils::readIndex($actionCap16body, "expressions");}
$c = 0 - 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit16) . "", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Constant(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->Safe_Name($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "Safe_Name(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["name"] = $ruleOutCast0;
if (true) {
$castacname0 = _c_lib__mapUtils::readIndex($data, "name");
$actionCap0name = _c_lib__mapUtils::readIndex($data, "name");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "constant";
_c_lib__mapUtils::readIndex($dataStore, "data")["name"] = $actionCap0name;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Literal_Number(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["num"] = "";
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$passed0 = false;
if ($currentCode == 46) {
$passed0 = true;}
if ($passed0 == false) {
if ($currentCode >= 48 and $currentCode <= 57) {
$passed0 = true;}}
if ($passed0) {
$data["num"] .= $currentChar;
if (true) {
$castacnum0 = _c_lib__mapUtils::readIndex($data, "num");
$actionCap0num = _c_lib__mapUtils::readIndex($data, "num");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "literal";
_c_lib__mapUtils::readIndex($dataStore, "data")["literalType"] = "number";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = floatval($actionCap0num);}
$c = 0;
$this->error->vested++;}else{
$castnum0 = _c_lib__mapUtils::readIndex($data, "num");
if (strlen($castnum0) >= 1) {
if (true) {
$castacnum0 = _c_lib__mapUtils::readIndex($data, "num");
$actionCap0num = _c_lib__mapUtils::readIndex($data, "num");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "literal";
_c_lib__mapUtils::readIndex($dataStore, "data")["literalType"] = "number";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = floatval($actionCap0num);}
$c = 0 - 1;
$charPos--;
$this->offset--;}else{
$this->giveError(1, "0-9, .", $currentChar);}}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Literal_Boolean(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [116, 114, 117, 101];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 4) {
if (true) {
$castacbool0 = _c_lib__mapUtils::readIndex($data, "bool");
$data["bool"] = true;}
if (true) {
$castacbool0 = &_c_lib__mapUtils::readIndex($data, "bool");
$actionCap0bool = &_c_lib__mapUtils::readIndex($data, "bool");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "literal";
_c_lib__mapUtils::readIndex($dataStore, "data")["literalType"] = "boolean";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0bool;}
if (true) {
$castacbool0 = &_c_lib__mapUtils::readIndex($data, "bool");
$actionCap0bool = &_c_lib__mapUtils::readIndex($data, "bool");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "literal";
_c_lib__mapUtils::readIndex($dataStore, "data")["literalType"] = "boolean";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0bool;}
$c = 0 - 1;
$literalChar = 0;}
$this->error->vested++;}else{
$c = 1;
$charPos--;
$this->offset--;}}else if ($c == 1) {
$lit1 = [102, 97, 108, 115, 101];
if ($currentCode == _c_lib__arrUtils::readIndex($lit1, $literalChar)) {
$literalChar++;
if ($literalChar == 5) {
if (true) {
$castacbool1 = _c_lib__mapUtils::readIndex($data, "bool");
$data["bool"] = false;}
if (true) {
$castacbool0 = &_c_lib__mapUtils::readIndex($data, "bool");
$actionCap0bool = &_c_lib__mapUtils::readIndex($data, "bool");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "literal";
_c_lib__mapUtils::readIndex($dataStore, "data")["literalType"] = "boolean";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0bool;}
if (true) {
$castacbool0 = &_c_lib__mapUtils::readIndex($data, "bool");
$actionCap0bool = &_c_lib__mapUtils::readIndex($data, "bool");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "literal";
_c_lib__mapUtils::readIndex($dataStore, "data")["literalType"] = "boolean";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0bool;}
$c = 0 - 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "true, false", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Literal_String(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->String($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "String(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["str"] = $ruleOutCast0;
if (true) {
$castacstr0 = _c_lib__mapUtils::readIndex($data, "str");
$actionCap0str = _c_lib__mapUtils::readIndex($data, "str");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "literal";
_c_lib__mapUtils::readIndex($dataStore, "data")["literalType"] = "string";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap0str;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Literal_Array(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["arr"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 91) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "[", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->Expression($input, $charPos);
if ($ruleOut1->hadError) {
$c = 2;
$charPos--;
$this->offset--;
if ($ruleOut1->error->vested > 1) {
$this->giveError($ruleOut1->error->code, $ruleOut1->error->expected, $ruleOut1->error->found);}}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$castarr1 = &_c_lib__mapUtils::readIndex($data, "arr");
array_push($castarr1, $ruleOutCast1);
if (ord($input[$charPos + 1]) != 44) {
$c = 2;
continue;}else{
$charPos++;}
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 1;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->_($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError($ruleOut2->error->code, "White space(optional)(" . $ruleOut2->error->expected . ")", $ruleOut2->error->found);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$c = 3;}}else if ($c == 3) {
if ($currentCode == 93) {
if (true) {
$castac3 = _c_lib__mapUtils::readIndex($data, "");
$actionCap3arr = &_c_lib__mapUtils::readIndex($data, "arr");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "literal";
_c_lib__mapUtils::readIndex($dataStore, "data")["literalType"] = "array";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap3arr;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "]", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Literal_Map_Key(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
$ruleOut1 = $this->Safe_Name($input, $charPos);
if ($ruleOut1->hadError) {
$c = 2;
$charPos--;
$this->offset--;}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["key"] = $ruleOutCast1;
$c = 3;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->String($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError(1, "Safe_Name, String", $currentChar);}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["key"] = $ruleOutCast2;
$c = 3;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
if ($currentCode == 58) {
$c = 5;
$this->error->vested++;}else{
$this->giveError(1, ":", $currentChar);}}else if ($c == 5) {
$ruleOut5 = $this->_($input, $charPos);
if ($ruleOut5->hadError) {
$this->giveError($ruleOut5->error->code, "White space(optional)(" . $ruleOut5->error->expected . ")", $ruleOut5->error->found);}else{
$ruleOutCast5 = _c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$c = 6;}}else if ($c == 6) {
$ruleOut6 = $this->Expression($input, $charPos);
if ($ruleOut6->hadError) {
$this->giveError($ruleOut6->error->code, "Expression(" . $ruleOut6->error->expected . ")", $ruleOut6->error->found);}else{
$ruleOutCast6 = &_c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$data["value"] = $ruleOutCast6;
if (true) {
$castacvalue6 = &_c_lib__mapUtils::readIndex($data, "value");
$actionCap6key = &_c_lib__mapUtils::readIndex($data, "key");
$actionCap6value = &_c_lib__mapUtils::readIndex($data, "value");
_c_lib__mapUtils::readIndex($dataStore, "data")["key"] = $actionCap6key;
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap6value;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Literal_Map(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["arr"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 123) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "{", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Literal_Map_Key($input, $charPos);
if ($ruleOut2->hadError) {
$c = 3;
$charPos--;
$this->offset--;
if ($ruleOut2->error->vested > 1) {
$this->giveError($ruleOut2->error->code, $ruleOut2->error->expected, $ruleOut2->error->found);}}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$castarr2 = &_c_lib__mapUtils::readIndex($data, "arr");
array_push($castarr2, $ruleOutCast2);
if (ord($input[$charPos + 1]) != 44) {
$c = 3;
continue;}else{
$charPos++;}
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 2;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
if ($currentCode == 125) {
if (true) {
$castac4 = _c_lib__mapUtils::readIndex($data, "");
$actionCap4arr = &_c_lib__mapUtils::readIndex($data, "arr");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "literal";
_c_lib__mapUtils::readIndex($dataStore, "data")["literalType"] = "map";
_c_lib__mapUtils::readIndex($dataStore, "data")["value"] = $actionCap4arr;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "}", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Literal(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->Literal_Number($input, $charPos);
if ($ruleOut0->hadError) {
$c = 1;
$charPos--;
$this->offset--;}else{
$ruleOutCast0 = &_c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["l"] = $ruleOutCast0;
if (true) {
$castacl0 = &_c_lib__mapUtils::readIndex($data, "l");
$actionCap0l = &_c_lib__mapUtils::readIndex($data, "l");
$dataStore["data"] = $actionCap0l;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;}}else if ($c == 1) {
$ruleOut1 = $this->Literal_Boolean($input, $charPos);
if ($ruleOut1->hadError) {
$c = 2;
$charPos--;
$this->offset--;}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["l"] = $ruleOutCast1;
if (true) {
$castacl0 = &_c_lib__mapUtils::readIndex($data, "l");
$actionCap0l = &_c_lib__mapUtils::readIndex($data, "l");
$dataStore["data"] = $actionCap0l;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->Literal_String($input, $charPos);
if ($ruleOut2->hadError) {
$c = 3;
$charPos--;
$this->offset--;}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["l"] = $ruleOutCast2;
if (true) {
$castacl0 = &_c_lib__mapUtils::readIndex($data, "l");
$actionCap0l = &_c_lib__mapUtils::readIndex($data, "l");
$dataStore["data"] = $actionCap0l;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->Literal_Array($input, $charPos);
if ($ruleOut3->hadError) {
$c = 4;
$charPos--;
$this->offset--;}else{
$ruleOutCast3 = &_c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$data["l"] = $ruleOutCast3;
if (true) {
$castacl0 = &_c_lib__mapUtils::readIndex($data, "l");
$actionCap0l = &_c_lib__mapUtils::readIndex($data, "l");
$dataStore["data"] = $actionCap0l;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 4) {
$ruleOut4 = $this->Literal_Map($input, $charPos);
if ($ruleOut4->hadError) {
$this->giveError(1, "Literal_Number, Literal_Boolean, Literal_String, Literal_Array, Literal_Map", $currentChar);}else{
$ruleOutCast4 = &_c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$data["l"] = $ruleOutCast4;
if (true) {
$castacl0 = &_c_lib__mapUtils::readIndex($data, "l");
$actionCap0l = &_c_lib__mapUtils::readIndex($data, "l");
$dataStore["data"] = $actionCap0l;
_c_lib__mapUtils::readIndex($dataStore, "data")["start"] = $startPos;
_c_lib__mapUtils::readIndex($dataStore, "data")["end"] = $charPos;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Safe_Name(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["after"] = "";
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$passed0 = false;
if ($currentCode == 95) {
$passed0 = true;}else if ($currentCode == 64) {
$passed0 = true;}
if ($passed0 == false) {
if ($currentCode >= 97 and $currentCode <= 122) {
$passed0 = true;}else if ($currentCode >= 65 and $currentCode <= 90) {
$passed0 = true;}}
if ($passed0) {
$data["start"] = $currentChar;
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "a-z, A-Z, _, @", $currentChar);}}else if ($c == 1) {
$passed1 = false;
if ($currentCode == 95) {
$passed1 = true;}else if ($currentCode == 46) {
$passed1 = true;}
if ($passed1 == false) {
if ($currentCode >= 97 and $currentCode <= 122) {
$passed1 = true;}else if ($currentCode >= 65 and $currentCode <= 90) {
$passed1 = true;}else if ($currentCode >= 48 and $currentCode <= 57) {
$passed1 = true;}}
if ($passed1) {
$data["after"] .= $currentChar;
if (true) {
$castacafter1 = $data["after"];
$actionCap1start = $data["start"];
$actionCap1after = $data["after"];
$dataStore["data"] =  $actionCap1start . $actionCap1after;}
$c = 1;
$this->error->vested++;}else{
if (true) {
$castacafter1 = $data["after"];
$actionCap1start = $data["start"];
$actionCap1after = $data["after"];
$dataStore["data"] =  $actionCap1start . $actionCap1after;}
$c = 0 - 1;
$charPos--;
$this->offset--;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Value(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_c__Function($input, $charPos);
if ($ruleOut0->hadError) {
$c = 1;
$charPos--;
$this->offset--;}else{
$ruleOutCast0 = &_c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["v"] = $ruleOutCast0;
if (true) {
$castacv0 = &_c_lib__mapUtils::readIndex($data, "v");
$actionCap0v = &_c_lib__mapUtils::readIndex($data, "v");
$dataStore["data"] = $actionCap0v;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 1) {
$ruleOut1 = $this->Literal($input, $charPos);
if ($ruleOut1->hadError) {
$c = 2;
$charPos--;
$this->offset--;}else{
$ruleOutCast1 = &_c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["v"] = $ruleOutCast1;
if (true) {
$castacv0 = &_c_lib__mapUtils::readIndex($data, "v");
$actionCap0v = &_c_lib__mapUtils::readIndex($data, "v");
$dataStore["data"] = $actionCap0v;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 2) {
$ruleOut2 = $this->Constant($input, $charPos);
if ($ruleOut2->hadError) {
$this->giveError(1, "Function, Literal, Constant", $currentChar);}else{
$ruleOutCast2 = &_c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$data["v"] = $ruleOutCast2;
if (true) {
$castacv0 = &_c_lib__mapUtils::readIndex($data, "v");
$actionCap0v = &_c_lib__mapUtils::readIndex($data, "v");
$dataStore["data"] = $actionCap0v;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function _c__Function(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["params"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$lit0 = [102, 117, 110, 99, 116, 105, 111, 110];
if ($currentCode == _c_lib__arrUtils::readIndex($lit0, $literalChar)) {
$literalChar++;
if ($literalChar == 8) {
$c = 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit0) . "", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
if ($currentCode == 40) {
$c = 3;
$this->error->vested++;}else{
$this->giveError(1, "(", $currentChar);}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
$ruleOut4 = $this->Safe_Name($input, $charPos);
if ($ruleOut4->hadError) {
$c = 5;
$charPos--;
$this->offset--;
if ($ruleOut4->error->vested > 1) {
$this->giveError($ruleOut4->error->code, $ruleOut4->error->expected, $ruleOut4->error->found);}}else{
$ruleOutCast4 = _c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$castparams4 = &_c_lib__mapUtils::readIndex($data, "params");
array_push($castparams4, $ruleOutCast4);
if (ord($input[$charPos + 1]) != 44) {
$c = 5;
continue;}else{
$charPos++;}
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 4;
$this->error->vested++;}}else if ($c == 5) {
$ruleOut5 = $this->_($input, $charPos);
if ($ruleOut5->hadError) {
$this->giveError($ruleOut5->error->code, "White space(optional)(" . $ruleOut5->error->expected . ")", $ruleOut5->error->found);}else{
$ruleOutCast5 = _c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$c = 6;}}else if ($c == 6) {
if ($currentCode == 41) {
$c = 7;
$this->error->vested++;}else{
$this->giveError(1, ")", $currentChar);}}else if ($c == 7) {
$ruleOut7 = $this->_($input, $charPos);
if ($ruleOut7->hadError) {
$this->giveError($ruleOut7->error->code, "White space(optional)(" . $ruleOut7->error->expected . ")", $ruleOut7->error->found);}else{
$ruleOutCast7 = _c_lib__mapUtils::readIndex($ruleOut7->data, "data");
$charPos = $this->offset;
$c = 8;}}else if ($c == 8) {
$ruleOut8 = $this->Document($input, $charPos);
if ($ruleOut8->hadError) {
$this->giveError($ruleOut8->error->code, "Document(" . $ruleOut8->error->expected . ")", $ruleOut8->error->found);}else{
$ruleOutCast8 = &_c_lib__mapUtils::readIndex($ruleOut8->data, "data");
$charPos = $this->offset;
$data["body"] = $ruleOutCast8;
$c = 9;}}else if ($c == 9) {
$ruleOut9 = $this->_($input, $charPos);
if ($ruleOut9->hadError) {
$this->giveError($ruleOut9->error->code, "White space(optional)(" . $ruleOut9->error->expected . ")", $ruleOut9->error->found);}else{
$ruleOutCast9 = _c_lib__mapUtils::readIndex($ruleOut9->data, "data");
$charPos = $this->offset;
$c = 10;}}else if ($c == 10) {
$lit10 = [101, 110, 100];
if ($currentCode == _c_lib__arrUtils::readIndex($lit10, $literalChar)) {
$literalChar++;
if ($literalChar == 3) {
if (true) {
$castac10 = _c_lib__mapUtils::readIndex($data, "");
$actionCap10params = &_c_lib__mapUtils::readIndex($data, "params");
$actionCap10body = &_c_lib__mapUtils::readIndex($data, "body");
_c_lib__mapUtils::readIndex($dataStore, "data")["type"] = "function";
_c_lib__mapUtils::readIndex($dataStore, "data")["parameters"] = $actionCap10params;
_c_lib__mapUtils::readIndex($dataStore, "data")["body"] = _c_lib__mapUtils::readIndex($actionCap10body, "expressions");}
$c = 0 - 1;
$literalChar = 0;}
$this->error->vested++;}else{
$this->giveError(1, "" . $this->assembleCodes($lit10) . "", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function _(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$passed0 = false;
if ($currentCode == 32) {
$passed0 = true;}else if ($currentCode == 9) {
$passed0 = true;}else if ($currentCode == 13) {
$passed0 = true;}else if ($currentCode == 10) {
$passed0 = true;}
if ($passed0 == false) {
}
if ($passed0) {
$c = 0;
$this->error->vested++;}else{
$c = 0 - 1;
$charPos--;
$this->offset--;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function __(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["w"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$passed0 = false;
if ($currentCode == 32) {
$passed0 = true;}else if ($currentCode == 9) {
$passed0 = true;}else if ($currentCode == 13) {
$passed0 = true;}else if ($currentCode == 10) {
$passed0 = true;}
if ($passed0 == false) {
}
if ($passed0) {
$castw0 = &_c_lib__mapUtils::readIndex($data, "w");
array_push($castw0, $currentChar);
$c = 0;
$this->error->vested++;}else{
$castw0 = &_c_lib__mapUtils::readIndex($data, "w");
if (count($castw0) >= 1) {
$c = 0 - 1;
$charPos--;
$this->offset--;}else{
$this->giveError(1, " , \t, \n, \n", $currentChar);}}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function String(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->String_Double($input, $charPos);
if ($ruleOut0->hadError) {
$c = 1;
$charPos--;
$this->offset--;}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$data["str"] = $ruleOutCast0;
if (true) {
$castacstr0 = &$data["str"];
$actionCap0str = &$data["str"];
$dataStore["data"] = $actionCap0str;}
$c = 0 - 1;
$this->error->vested++;}}else if ($c == 1) {
$ruleOut1 = $this->String_Single($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError(1, "String_Double, String_Single", $currentChar);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$data["str"] = $ruleOutCast1;
if (true) {
$castacstr0 = &$data["str"];
$actionCap0str = &$data["str"];
$dataStore["data"] = $actionCap0str;}
$c = 0 - 1;
$this->error->vested++;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function String_Double(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["str"] = "";
$escaped = false;
$escapeCodes = ['_c__mapC' => true];
$escapeCodes["n"] = "\n";
$escapeCodes["b"] = "";
$escapeCodes["f"] = "";
$escapeCodes["r"] = "\\ r";
$escapeCodes["t"] = "\t";
$escapeCodes["v"] = "";
$escapeCodes["\\"] = "\\";
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 34) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "\"", $currentChar);}}else if ($c == 1) {
$castnacstr1 = $data["str"];
$doCapture = true;
if ($currentChar == "\\") {
if ($escaped == false) {
$escaped = true;
$doCapture = false;}}
if ($currentChar == "\"") {
if ($escaped == false) {
$doCapture = false;
$c = 2;
$charPos--;
$this->offset--;}
$escaped = false;}else if ($escaped and $doCapture == true) {
$doCapture = false;
$data["str"] .= _c_lib__mapUtils::readIndex($escapeCodes, $currentChar);
$escaped = false;}
if ($doCapture) {
$data["str"] .= $currentChar;}}else if ($c == 2) {
if ($currentCode == 34) {
if (true) {
$castac2 = $data[""];
$actionCap2str = $data["str"];
$dataStore["data"] = $actionCap2str;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "\"", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function String_Single(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = "";
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["str"] = "";
$escaped = false;
$escapeCodes = ['_c__mapC' => true];
$escapeCodes["n"] = "\n";
$escapeCodes["b"] = "";
$escapeCodes["f"] = "";
$escapeCodes["r"] = "\\ r";
$escapeCodes["t"] = "\t";
$escapeCodes["v"] = "";
$escapeCodes["\\"] = "\\";
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 39) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "'", $currentChar);}}else if ($c == 1) {
$castnacstr1 = $data["str"];
$doCapture = true;
if ($currentChar == "\\") {
if ($escaped == false) {
$escaped = true;
$doCapture = false;}}
if ($currentChar == "'") {
if ($escaped == false) {
$doCapture = false;
$c = 2;
$charPos--;
$this->offset--;}
$escaped = false;}else if ($escaped and $doCapture == true) {
$doCapture = false;
$data["str"] .= _c_lib__mapUtils::readIndex($escapeCodes, $currentChar);
$escaped = false;}
if ($doCapture) {
$data["str"] .= $currentChar;}}else if ($c == 2) {
if ($currentCode == 39) {
if (true) {
$castac2 = $data[""];
$actionCap2str = $data["str"];
$dataStore["data"] = $actionCap2str;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "'", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Json(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["keys"] = [];
$captureRoot1 = ['_c__mapC' => true];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 123) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "{", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->_($input, $charPos);
if ($ruleOut2->hadError) {
$c = 9;
$charPos--;
$this->offset--;}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$c = 3;}}else if ($c == 3) {
$ruleOut3 = $this->String($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "String(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$captureRoot1["key"] = $ruleOutCast3;
$c = 4;
$this->error->vested++;}}else if ($c == 4) {
$ruleOut4 = $this->_($input, $charPos);
if ($ruleOut4->hadError) {
$this->giveError($ruleOut4->error->code, "White space(optional)(" . $ruleOut4->error->expected . ")", $ruleOut4->error->found);}else{
$ruleOutCast4 = _c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$c = 5;}}else if ($c == 5) {
if ($currentCode == 58) {
$c = 6;
$this->error->vested++;}else{
$this->giveError(1, ":", $currentChar);}}else if ($c == 6) {
$ruleOut6 = $this->_($input, $charPos);
if ($ruleOut6->hadError) {
$this->giveError($ruleOut6->error->code, "White space(optional)(" . $ruleOut6->error->expected . ")", $ruleOut6->error->found);}else{
$ruleOutCast6 = _c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$c = 7;}}else if ($c == 7) {
$ruleOut7 = $this->Json_Value($input, $charPos);
if ($ruleOut7->hadError) {
$this->giveError($ruleOut7->error->code, "Json_Value(" . $ruleOut7->error->expected . ")", $ruleOut7->error->found);}else{
$ruleOutCast7 = _c_lib__mapUtils::readIndex($ruleOut7->data, "data");
$charPos = $this->offset;
$captureRoot1["val"] = $ruleOutCast7;
$c = 8;
$this->error->vested++;}}else if ($c == 8) {
$ruleOut8 = $this->_($input, $charPos);
if ($ruleOut8->hadError) {
$c = 9;
$charPos--;
$this->offset--;}else{
$ruleOutCast8 = _c_lib__mapUtils::readIndex($ruleOut8->data, "data");
$charPos = $this->offset;
$castkeys2 = &_c_lib__mapUtils::readIndex($data, "keys");
array_push($castkeys2, $captureRoot1);
if (ord($input[$charPos + 1]) != 44) {
$c = 9;
continue;}else{
$charPos++;}
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$captureRoot1 = ['_c__mapC' => true];
$c = 2;}}else if ($c == 9) {
$ruleOut9 = $this->_($input, $charPos);
if ($ruleOut9->hadError) {
$this->giveError($ruleOut9->error->code, "White space(optional)(" . $ruleOut9->error->expected . ")", $ruleOut9->error->found);}else{
$ruleOutCast9 = _c_lib__mapUtils::readIndex($ruleOut9->data, "data");
$charPos = $this->offset;
$c = 10;}}else if ($c == 10) {
if ($currentCode == 125) {
if (true) {
$castac10 = _c_lib__mapUtils::readIndex($data, "");
$actionCap10keys = &_c_lib__mapUtils::readIndex($data, "keys");
for ($i = 0; $i < count($actionCap10keys); $i++) {
$k = &_c_lib__arrUtils::readIndex($actionCap10keys, $i);
$key = _c_lib__mapUtils::readIndex($k, "key");
_c_lib__mapUtils::readIndex($dataStore, "data")[$key] = _c_lib__mapUtils::readIndex($k, "val");}}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "}", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Json_Array(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["vals"] = [];
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 91) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "[", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
$ruleOut2 = $this->Json_Value($input, $charPos);
if ($ruleOut2->hadError) {
$c = 3;
$charPos--;
$this->offset--;
if ($ruleOut2->error->vested > 1) {
$this->giveError($ruleOut2->error->code, $ruleOut2->error->expected, $ruleOut2->error->found);}}else{
$ruleOutCast2 = _c_lib__mapUtils::readIndex($ruleOut2->data, "data");
$charPos = $this->offset;
$castvals2 = &_c_lib__mapUtils::readIndex($data, "vals");
array_push($castvals2, $ruleOutCast2);
if (ord($input[$charPos + 1]) != 44) {
$c = 3;
continue;}else{
$charPos++;}
if ($charPos == strlen($input) - 1) {
$this->giveError(2, "EOF", $currentChar);}
$c = 2;
$this->error->vested++;}}else if ($c == 3) {
$ruleOut3 = $this->_($input, $charPos);
if ($ruleOut3->hadError) {
$this->giveError($ruleOut3->error->code, "White space(optional)(" . $ruleOut3->error->expected . ")", $ruleOut3->error->found);}else{
$ruleOutCast3 = _c_lib__mapUtils::readIndex($ruleOut3->data, "data");
$charPos = $this->offset;
$c = 4;}}else if ($c == 4) {
if ($currentCode == 93) {
if (true) {
$castac4 = _c_lib__mapUtils::readIndex($data, "");
$actionCap4vals = &_c_lib__mapUtils::readIndex($data, "vals");
$dataStore["data"] = $actionCap4vals;}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "]", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Json_EmptyArray(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = [];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 91) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "[", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
if ($currentCode == 93) {
if (true) {
$castac2 = $data[""];
$data = [];}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "]", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Json_EmptyMap(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = ['_c__mapC' => true];
$dataStore["temp"] = ['_c__mapC' => true];
$data = &_c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
if ($currentCode == 123) {
$c = 1;
$this->error->vested++;}else{
$this->giveError(1, "{", $currentChar);}}else if ($c == 1) {
$ruleOut1 = $this->_($input, $charPos);
if ($ruleOut1->hadError) {
$this->giveError($ruleOut1->error->code, "White space(optional)(" . $ruleOut1->error->expected . ")", $ruleOut1->error->found);}else{
$ruleOutCast1 = _c_lib__mapUtils::readIndex($ruleOut1->data, "data");
$charPos = $this->offset;
$c = 2;}}else if ($c == 2) {
if ($currentCode == 125) {
if (true) {
$castac2 = _c_lib__mapUtils::readIndex($data, "");
$data = ['_c__mapC' => true];}
$c = 0 - 1;
$this->error->vested++;}else{
$this->giveError(1, "}", $currentChar);}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Json_Value(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = 0;
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$ruleOut0 = $this->_($input, $charPos);
if ($ruleOut0->hadError) {
$this->giveError($ruleOut0->error->code, "White space(optional)(" . $ruleOut0->error->expected . ")", $ruleOut0->error->found);}else{
$ruleOutCast0 = _c_lib__mapUtils::readIndex($ruleOut0->data, "data");
$charPos = $this->offset;
$c = 1;}}else if ($c == 1) {
$lit1 = [110, 117, 108, 108];
if ($currentCode == _c_lib__arrUtils::readIndex($lit1, $literalChar)) {
$literalChar++;
if ($literalChar == 4) {
if (true) {
$castacexp1 = $data["exp"];
$data["exp"] = null;}
$c = 10;
$literalChar = 0;}
$this->error->vested++;}else{
$c = 2;
$charPos--;
$this->offset--;}}else if ($c == 2) {
$lit2 = [116, 114, 117, 101];
if ($currentCode == _c_lib__arrUtils::readIndex($lit2, $literalChar)) {
$literalChar++;
if ($literalChar == 4) {
if (true) {
$castacexp2 = $data["exp"];
$data["exp"] = true;}
$c = 10;
$literalChar = 0;}
$this->error->vested++;}else{
$c = 3;
$charPos--;
$this->offset--;}}else if ($c == 3) {
$lit3 = [102, 97, 108, 115, 101];
if ($currentCode == _c_lib__arrUtils::readIndex($lit3, $literalChar)) {
$literalChar++;
if ($literalChar == 5) {
if (true) {
$castacexp3 = $data["exp"];
$data["exp"] = false;}
$c = 10;
$literalChar = 0;}
$this->error->vested++;}else{
$c = 4;
$charPos--;
$this->offset--;}}else if ($c == 4) {
$ruleOut4 = $this->Json_EmptyArray($input, $charPos);
if ($ruleOut4->hadError) {
$c = 5;
$charPos--;
$this->offset--;}else{
$ruleOutCast4 = &_c_lib__mapUtils::readIndex($ruleOut4->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast4;
$c = 10;
$this->error->vested++;}}else if ($c == 5) {
$ruleOut5 = $this->Json_EmptyMap($input, $charPos);
if ($ruleOut5->hadError) {
$c = 6;
$charPos--;
$this->offset--;}else{
$ruleOutCast5 = &_c_lib__mapUtils::readIndex($ruleOut5->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast5;
$c = 10;
$this->error->vested++;}}else if ($c == 6) {
$ruleOut6 = $this->Json_Array($input, $charPos);
if ($ruleOut6->hadError) {
$c = 7;
$charPos--;
$this->offset--;}else{
$ruleOutCast6 = &_c_lib__mapUtils::readIndex($ruleOut6->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast6;
$c = 10;
$this->error->vested++;}}else if ($c == 7) {
$ruleOut7 = $this->Json($input, $charPos);
if ($ruleOut7->hadError) {
$c = 8;
$charPos--;
$this->offset--;}else{
$ruleOutCast7 = &_c_lib__mapUtils::readIndex($ruleOut7->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast7;
$c = 10;
$this->error->vested++;}}else if ($c == 8) {
$ruleOut8 = $this->String($input, $charPos);
if ($ruleOut8->hadError) {
$c = 9;
$charPos--;
$this->offset--;}else{
$ruleOutCast8 = _c_lib__mapUtils::readIndex($ruleOut8->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast8;
$c = 10;
$this->error->vested++;}}else if ($c == 9) {
$ruleOut9 = $this->Json_Number($input, $charPos);
if ($ruleOut9->hadError) {
$this->giveError(1, "null, true, false, Json_EmptyArray, Json_EmptyMap, Json_Array, Json, String, Json_Number", $currentChar);}else{
$ruleOutCast9 = _c_lib__mapUtils::readIndex($ruleOut9->data, "data");
$charPos = $this->offset;
$data["exp"] = $ruleOutCast9;
$c = 10;}}else if ($c == 10) {
$ruleOut10 = $this->_($input, $charPos);
if ($ruleOut10->hadError) {
$this->giveError($ruleOut10->error->code, "White space(optional)(" . $ruleOut10->error->expected . ")", $ruleOut10->error->found);}else{
$ruleOutCast10 = _c_lib__mapUtils::readIndex($ruleOut10->data, "data");
$charPos = $this->offset;
if (true) {
$castac10 = $data[""];
$actionCap10exp = &$data["exp"];
$dataStore["data"] = $actionCap10exp;}
$c = 0 - 1;}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}

function Json_Number(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$input = $arguments[0];
$startPos = $arguments[1];
$oldVest = $this->error->vested;
$dataStore = ['_c__mapC' => true];
$dataStore["data"] = 0;
$dataStore["temp"] = ['_c__mapC' => true];
$data = _c_lib__mapUtils::readIndex($dataStore, "temp");
$c = 0;
$data["nums"] = "";
$literalChar = 0;
for ($charPos = $startPos;$charPos < strlen($input);$charPos++) {
$currentChar = $input[$charPos];
$currentCode = ord($input[$charPos]);
if ($currentCode == 10) {
$this->line++;
$this->column = 0;}
if ($c == 0) {
$passed0 = false;
if ($currentCode == 46) {
$passed0 = true;}else if ($currentCode == 45) {
$passed0 = true;}
if ($passed0 == false) {
if ($currentCode >= 48 and $currentCode <= 57) {
$passed0 = true;}}
if ($passed0) {
$data["nums"] .= $currentChar;
if (true) {
$castacnums0 = $data["nums"];
$actionCap0nums = $data["nums"];
$dataStore["data"] = intval($actionCap0nums);}
$c = 0;
$this->error->vested++;}else{
$castnums0 = $data["nums"];
if (strlen($castnums0) >= 1) {
if (true) {
$castacnums0 = $data["nums"];
$actionCap0nums = $data["nums"];
$dataStore["data"] = intval($actionCap0nums);}
$c = 0 - 1;
$charPos--;
$this->offset--;}else{
$this->giveError(1, "0-9, ., -", $currentChar);}}}
$this->offset++;
$this->column++;
if ($c == 0 - 1) {
$this->offset = $charPos;
break;}
if ($this->hadError) {
break;}}
$parseOutput = new CarbideCalciumParserOutput($this->hadError, $this->error->_c__clone(), $dataStore);
$parseOutput->error->vested = $this->error->vested - $oldVest;
$this->error->vested = $oldVest;
$this->hadError = false;
return $parseOutput;
}
}


}class Carbide_Languages_Carbon {

function __construct(...$arguments) {


}
static function virtualize(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$input = $arguments[0];
$po = CarboniteCarbonParser::parse("Block", "{" . $input . "}");
$ast = &$po->data;
$root = null;
$proc = new Carbide_Virtual_Processor($root);
if ($po->hadError) {
$proc->runtimeError("Found " . $po->error->found . " expected " . $po->error->expected, "?", $po->error->offset, $po->error->offset + 1);}else{
$exps = &_c_lib__mapUtils::readIndex($ast, "data")["code"];
$root = Carbide_Languages_Carbon::buildBlock($proc, $exps, $root);
$root->topBlock = $root;}
return $proc;
}
}

static function virtualizeIntoProcessor(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[2]) == 'NULL')) {
$label = $arguments[0];
$input = $arguments[1];
$processor = $arguments[2];
$po = CarboniteCarbonParser::parse("Block", "{" . $input . "}");
if ($po->hadError) {
$processor->runtimeError("Found " . $po->error->found . " expected " . $po->error->expected, $label, $po->error->offset, $po->error->offset + 1);
throw new Exception("Error in script parser");}
$ast = &$po->data;
$root = null;
$exps = &_c_lib__mapUtils::readIndex($ast, "data")["code"];
$root = Carbide_Languages_Carbon::buildBlock($processor, $exps, $root);
$root->label = $label;
$processor->addBlock($root);
return $root;
}
}

static function buildBlock(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[2]) == 'NULL')) {
$parent = $arguments[0];
$code = $arguments[1];
$parentBlock = $arguments[2];
$rtn = new Carbide_Virtual_Block($parent);
if ($parentBlock == null) {
$rtn->topBlock = $rtn;
$parentBlock = $rtn;}
if ($parent->root == null) {
$parent->root = $rtn;
$parent->root->scope = $parent->scope;}
for ($i = 0; $i < count($code); $i++) {
$exp = &_c_lib__arrUtils::readIndex($code, $i);
$state = null;
$type = _c_lib__mapUtils::readIndex($exp, "type");
if ($type == "define") {
$state = new Carbide_Virtual_Statements_Var($rtn, _c_lib__mapUtils::readIndex($exp, "name"), Carbide_Languages_Carbon::buildExpression(_c_lib__mapUtils::readIndex($exp, "value"), $parent, $parentBlock));}else if ($type == "if") {
$exps = &_c_lib__mapUtils::readIndex($exp, "body")["code"];
$checks = [];
array_push($checks, Carbide_Languages_Carbon::buildExpression(_c_lib__mapUtils::readIndex($exp, "check")["expression"], $parent, $parentBlock));
$state = new Carbide_Virtual_Statements_If($rtn, $checks, Carbide_Languages_Carbon::buildBlock($parent, $exps, $parentBlock));
$castState = $state;
$castState->code->topBlock = $parentBlock->topBlock;}else if ($type == "for") {
$exps = &_c_lib__mapUtils::readIndex($exp, "body")["code"];
$refer = new Carbide_Virtual_Expressions_Reference(_c_lib__mapUtils::readIndex($exp, "define")["name"]);
$one = 1;
$numb = Carbide_Languages_Carbon::buildExpression(_c_lib__mapUtils::readIndex($exp, "define")["value"], $parent, $parentBlock);
$operation = Carbide_Languages_Carbon::buildExpression(_c_lib__mapUtils::readIndex($exp, "iterate"), $parent, $parentBlock);
$state = new Carbide_Virtual_Statements_For($rtn, _c_lib__mapUtils::readIndex($exp, "define")["name"], $numb, Carbide_Languages_Carbon::buildExpression(_c_lib__mapUtils::readIndex($exp, "check"), $parent, $parentBlock), $operation, Carbide_Languages_Carbon::buildBlock($parent, $exps, $parentBlock));
$castState = $state;
$castState->code->topBlock = $parentBlock->topBlock;}else if ($type == "return") {
$state = new Carbide_Virtual_Statements_Return($rtn, Carbide_Languages_Carbon::buildExpression(_c_lib__mapUtils::readIndex($exp, "expression"), $parent, $parentBlock));}else if ($type == "expression") {
$state = new Carbide_Virtual_Statements_Lost($rtn, Carbide_Languages_Carbon::buildExpression($exp, $parent, $parentBlock));}
$state->scope = new Carbide_Virtual_Scope($parent);
array_push($rtn->statements, $state);}
return $rtn;
}
}

static function buildSub(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
$splits = explode(".", $name);
$rtn = new Carbide_Virtual_Expressions_Reference(_c_lib__arrUtils::readIndex($splits, 0));
if (count($splits) > 1) {
for ($s = 1;$s < count($splits);$s++) {
$sub = new Carbide_Virtual_Sub(null);
$sub->type = 1;
$sub->property = _c_lib__arrUtils::readIndex($splits, $s);
array_push($rtn->subs, $sub);}}
return $rtn;
}
}

static function buildValue(...$arguments) {
if (count($arguments) == 3 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[2]) == 'NULL')) {
$lit = $arguments[0];
$parent = $arguments[1];
$parentBlock = $arguments[2];
$val = null;
$litType = _c_lib__mapUtils::readIndex($lit, "literalType");
if ($litType == "number") {
$rVal = _c_lib__mapUtils::readIndex($lit, "value");
$val = Carbide_Virtual_Values_Number::create($rVal);}else if ($litType == "boolean") {
$rVal = _c_lib__mapUtils::readIndex($lit, "value");
$val = Carbide_Virtual_Values_Bool::create($rVal);}else if ($litType == "string") {
$rVal = _c_lib__mapUtils::readIndex($lit, "value");
$val = Carbide_Virtual_Values_String::create($rVal);}else if ($litType == "map") {
$val = Carbide_Virtual_Values_Map::create(['_c__mapC' => true]);}else if ($litType == "array") {
$val = Carbide_Virtual_Values_Array::create([]);}else if ($litType == "function") {
$args = [];
$tArgs = &_c_lib__mapUtils::readIndex($lit, "parameters");
for ($i = 0; $i < count($tArgs); $i++) {
array_push($args, _c_lib__mapUtils::readIndex(_c_lib__arrUtils::readIndex($tArgs, $i), "name"));}
$val = Carbide_Virtual_Values_Function::create($args, Carbide_Languages_Carbon::buildBlock($parent, _c_lib__mapUtils::readIndex($lit, "body")["code"], $parentBlock));
$castVal = $val;
$castVal->code->topBlock = $parentBlock->topBlock;}
return $val;
}
}

static function buildExpression(...$arguments) {
if (count($arguments) == 3 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[2]) == 'NULL')) {
$exp = $arguments[0];
$proc = $arguments[1];
$parentBlock = $arguments[2];
$type = _c_lib__mapUtils::readIndex($exp, "type");
if (isset($exp["terms"])) {
}else{
$rtn = null;
if ($type == "literal") {
$val = Carbide_Languages_Carbon::buildValue($exp, $proc, $parentBlock);
$rtn = new Carbide_Virtual_Expressions_Raw($val);
return $rtn;}else if ($type == "constant") {
$constantName = _c_lib__mapUtils::readIndex($exp, "name");
$splits = explode(".", $constantName);
$rtn = new Carbide_Virtual_Expressions_Reference(_c_lib__arrUtils::readIndex($splits, 0));
for ($i = 1;$i < count($splits);$i++) {
$sub = new Carbide_Virtual_Sub(null);
$sub->type = 1;
$sub->property = _c_lib__arrUtils::readIndex($splits, $i);
array_push($rtn->subs, $sub);}
$appendix = &_c_lib__mapUtils::readIndex($exp, "appendix");
for ($i = 0; $i < count($appendix); $i++) {
$append = &_c_lib__arrUtils::readIndex($appendix, $i);
if (_c_lib__mapUtils::readIndex($append, "type") == "dot") {
$sub = new Carbide_Virtual_Sub(null);
$sub->type = 1;
$sub->property = _c_lib__mapUtils::readIndex($append, "name");
if (count($appendix) > $i + 1) {
$nextAppend = &_c_lib__arrUtils::readIndex($appendix, $i + 1);
if (_c_lib__mapUtils::readIndex($nextAppend, "type") == "call") {
$sub->type = 2;
foreach (_c_lib__mapUtils::readIndex($nextAppend, "expression") as $a => $_c_v__k0) {
$appExp = &_c_lib__mapUtils::readIndex($nextAppend, "expression")[$a];
array_push($sub->arguments, Carbide_Languages_Carbon::buildExpression($appExp, $proc, $parentBlock));}}}
array_push($rtn->subs, $sub);}else if (_c_lib__mapUtils::readIndex($append, "type") == "call" and $i == 0) {
$sub = null;
$doPush = true;
if (count($rtn->subs) > 0 and _c_lib__arrUtils::readIndex($rtn->subs, count($rtn->subs) - 1)->type == 1) {
$sub = _c_lib__arrUtils::readIndex($rtn->subs, count($rtn->subs) - 1);
$doPush = false;}else{
$sub = new Carbide_Virtual_Sub(null);}
$sub->type = 2;
foreach (_c_lib__mapUtils::readIndex($append, "expression") as $a => $_c_v__k0) {
$appExp = &_c_lib__mapUtils::readIndex($append, "expression")[$a];
array_push($sub->arguments, Carbide_Languages_Carbon::buildExpression($appExp, $proc, $parentBlock));}
if ($doPush) {
array_push($rtn->subs, $sub);}}else{
$sub = new Carbide_Virtual_Sub(null);
$sub->type = 2;
foreach (_c_lib__mapUtils::readIndex($append, "expression") as $a => $_c_v__k0) {
$appExp = &_c_lib__mapUtils::readIndex($append, "expression")[$a];
array_push($sub->arguments, Carbide_Languages_Carbon::buildExpression($appExp, $proc, $parentBlock));}
array_push($rtn->subs, $sub);}}
return $rtn;}else if ($type == "function") {
$args = [];
$tArgs = &_c_lib__mapUtils::readIndex($exp, "parameters");
for ($i = 0; $i < count($tArgs); $i++) {
array_push($args, _c_lib__mapUtils::readIndex(_c_lib__arrUtils::readIndex($tArgs, $i), "name"));}
$val = Carbide_Virtual_Values_Function::create($args, Carbide_Languages_Carbon::buildBlock($proc, _c_lib__mapUtils::readIndex($exp, "body")["code"], $parentBlock));
$rtn = new Carbide_Virtual_Expressions_Raw($val);
return $rtn;}}
$terms = &_c_lib__mapUtils::readIndex($exp, "terms");
$rtn = null;
if (count($terms) == 1) {
if (isset(_c_lib__arrUtils::readIndex($terms, 0)["operator"])) {
$rtn = new Carbide_Virtual_Expressions_Operation(_c_lib__mapUtils::readIndex(_c_lib__arrUtils::readIndex($terms, 0), "operator"), Carbide_Languages_Carbon::buildExpression(_c_lib__mapUtils::readIndex(_c_lib__arrUtils::readIndex($terms, 0), "term"), $proc, $parentBlock), null);}else{
$rtn = Carbide_Languages_Carbon::buildExpression(_c_lib__arrUtils::readIndex($terms, 0), $proc, $parentBlock);}}else{
$head = &_c_lib__arrUtils::readIndex($terms, 0);
$tail = &_c_lib__arrUtils::readIndex($terms, 1);
$tailExp = null;
if (isset($tail["operator"])) {
array_shift($terms);
$tailExp = Carbide_Languages_Carbon::buildExpression($exp, $proc, $parentBlock);}else{
$tailExp = Carbide_Languages_Carbon::buildExpression($tail, $proc, $parentBlock);}
$rtn = new Carbide_Virtual_Expressions_Operation(_c_lib__mapUtils::readIndex($head, "operator"), Carbide_Languages_Carbon::buildExpression(_c_lib__mapUtils::readIndex($head, "term"), $proc, $parentBlock), $tailExp);}
return $rtn;
}
}


}class Carbide_Virtual_Map {
public $virtual;

public $realStart;

public $realEnd;

function __construct(...$arguments) {
$this->virtual = 0 - 1;
$this->realStart = 0 - 1;
$this->realEnd = 0 - 1;

if (count($arguments) == 3 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'integer' or gettype($arguments[2]) == 'NULL')) {
$virtual = $arguments[0];
$realStart = $arguments[1];
$realEnd = $arguments[2];
$this->virtual = $virtual;
$this->realStart = $realStart;
$this->realEnd = $realEnd;
}

}

}class Carbide_Virtual_Block {
public $data;

public $statements;

public $parent;

public $scope;

public $label;

public $topBlock;

public $canOutput;

function __construct(...$arguments) {
$this->data = [];
$this->statements = [];
$this->parent = null;
$this->scope = null;
$this->label = null;
$this->topBlock = null;
$this->canOutput = false;

if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[0]) == 'NULL')) {
$parent = $arguments[0];
$this->parent = $parent;
$this->scope = new Carbide_Virtual_Scope($parent);
}

}
function buildFromAst(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$data = $arguments[0];
$this->data = $data;
$this->build();
}
}

function build(...$arguments) {
if (count($arguments) == 0) {
$data = &$this->data;
for ($i = 0; $i < count($data); $i++) {
$statementData = &_c_lib__arrUtils::readIndex($data, $i);
$state = null;
$state->scope = new Carbide_Virtual_Scope($this->parent);
$state->scope->setParentScope($this->scope);
$state->build();
array_push($this->statements, $state);}
}
}

function run(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[0]) == 'NULL')) {
$scope = $arguments[0];
for ($i = 0; $i < count($this->statements); $i++) {
$state = _c_lib__arrUtils::readIndex($this->statements, $i);
$state->scope->setParentScope($this->scope);
$state->run($scope);}
}
}

function clear(...$arguments) {
if (count($arguments) == 0) {
for ($i = 0; $i < count($this->statements); $i++) {
$state = _c_lib__arrUtils::readIndex($this->statements, $i);
$state->clear();}
}
}

function output(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'integer' or gettype($arguments[2]) == 'NULL')) {
$data = $arguments[0];
$start = $arguments[1];
$end = $arguments[2];

}
}


}class Carbide_Virtual_Statement {
public $data;

public $parent;

public $topParent;

public $scope;

function __construct(...$arguments) {
$this->data = ['_c__mapC' => true];
$this->parent = null;
$this->topParent = null;
$this->scope = null;


}
function build(...$arguments) {
if (count($arguments) == 0) {

}
}

function run(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[0]) == 'NULL')) {
$scope = $arguments[0];

}
}

function clear(...$arguments) {
if (count($arguments) == 0) {

}
}


}class Carbide_Virtual_Statements_Define {
public $name;

public $value;

public $data;

public $parent;

public $topParent;

public $scope;

function __construct(...$arguments) {
$this->name = "";
$this->value = null;
$this->data = ['_c__mapC' => true];
$this->parent = null;
$this->topParent = null;
$this->scope = null;

if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Expression' or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Operation') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Call') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Raw') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Reference')) or gettype($arguments[2]) == 'NULL')) {
$parent = $arguments[0];
$name = $arguments[1];
$value = $arguments[2];
$this->parent = $parent;
$this->topParent = $this->parent->parent->root;
$this->name = $name;
$this->value = $value;
$this->value->parent = $this;
$this->value->setParent();
}

}
function build(...$arguments) {
if (count($arguments) == 0) {

}
}

function run(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[0]) == 'NULL')) {
$scope = $arguments[0];
$variable = new Carbide_Virtual_Variable($this->name, $this->value->run($scope));
$this->topParent->scope->addVariable($variable);
}
}

function clear(...$arguments) {
if (count($arguments) == 0) {

}
}


}class Carbide_Virtual_Statements_Function {
public $arguments;

public $name;

public $code;

public $data;

public $parent;

public $topParent;

public $scope;

function __construct(...$arguments) {
$this->arguments = [];
$this->name = "";
$this->code = null;
$this->data = ['_c__mapC' => true];
$this->parent = null;
$this->topParent = null;
$this->scope = null;

if (count($arguments) == 4 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL') and ((gettype($arguments[2]) == 'array' and !isset($arguments[2]['_c__mapC'])) or gettype($arguments[2]) == 'NULL') and ((get_class($arguments[3]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[3]) == 'NULL')) {
$parent = $arguments[0];
$name = $arguments[1];
$___arguments = $arguments[2];
$code = $arguments[3];
$this->parent = $parent;
$this->topParent = $this->parent->parent->root;
$this->name = $name;
$this->arguments = $___arguments;
$this->code = $code;
$this->scope = new Carbide_Virtual_Scope($parent->parent);
$this->code->scope = $this->scope;
$this->topParent->parent->addFunction($this);
}

}
function call(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];
if (count($args) != count($this->arguments)) {
$location = "anon";
if ($this->code->topBlock != null) {
$location = $this->code->topBlock->label;}
$this->topParent->parent->runtimeError("Call to function '" . $this->name . "' invalid argument count " . count($args), $location, 0, 0);}
$this->clear();
$funcScope = new Carbide_Virtual_Scope($this->parent->parent);
for ($i = 0; $i < count($this->arguments); $i++) {
$value = _c_lib__arrUtils::readIndex($args, $i);
$name = _c_lib__arrUtils::readIndex($this->arguments, $i);
$funcScope->addVariable(new Carbide_Virtual_Variable($name, $value->run($scope)));}
$funcScope->setParentScope($scope);
$this->code->run($funcScope);
$rtn = $funcScope->search("functionReturn");
if ($rtn == null) {
$retu = Carbide_Virtual_Values_Null::create();
return $retu;}else{
return $rtn->value;}
}
}

function clear(...$arguments) {
if (count($arguments) == 0) {
$this->scope->clear();
$this->code->clear();
}
}

function run(...$arguments) {
if (count($arguments) == 0) {

}
}

function build(...$arguments) {
if (count($arguments) == 0) {

}
}


}class Carbide_Virtual_Statements_If {
public $checks;

public $code;

public $data;

public $parent;

public $topParent;

public $scope;

function __construct(...$arguments) {
$this->checks = [];
$this->code = null;
$this->data = ['_c__mapC' => true];
$this->parent = null;
$this->topParent = null;
$this->scope = null;

if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[2]) == 'NULL')) {
$parent = $arguments[0];
$checks = $arguments[1];
$code = $arguments[2];
$this->parent = $parent;
$this->topParent = $this->parent->parent->root;
$this->checks = $checks;
for ($i = 0; $i < count($this->checks); $i++) {
$check = _c_lib__arrUtils::readIndex($this->checks, $i);
$check->parent = $this;
$check->setParent();}
$this->code = $code;
}

}
function run(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[0]) == 'NULL')) {
$scope = $arguments[0];
$ok = true;
for ($i = 0; $i < count($this->checks); $i++) {
$check = _c_lib__arrUtils::readIndex($this->checks, $i);
$v = $check->run($scope);
if ($v->value == false) {
$ok = false;}}
if ($ok) {
$this->code->run($scope);}
}
}

function clear(...$arguments) {
if (count($arguments) == 0) {
$this->scope->clear();
$this->code->clear();
}
}

function build(...$arguments) {
if (count($arguments) == 0) {

}
}


}class Carbide_Virtual_Statements_For {
public $itName;

public $initial;

public $to;

public $iterate;

public $code;

public $in;

public $data;

public $parent;

public $topParent;

public $scope;

function __construct(...$arguments) {
$this->itName = "";
$this->initial = null;
$this->to = null;
$this->iterate = null;
$this->code = null;
$this->in = false;
$this->data = ['_c__mapC' => true];
$this->parent = null;
$this->topParent = null;
$this->scope = null;

if (count($arguments) == 6 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Expression' or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Operation') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Call') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Raw') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Reference')) or gettype($arguments[2]) == 'NULL') and ((get_class($arguments[3]) == 'WebsomCarbonite\Carbide_Virtual_Expression' or (get_class($arguments[3]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Operation') or (get_class($arguments[3]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Call') or (get_class($arguments[3]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Raw') or (get_class($arguments[3]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Reference')) or gettype($arguments[3]) == 'NULL') and ((get_class($arguments[4]) == 'WebsomCarbonite\Carbide_Virtual_Expression' or (get_class($arguments[4]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Operation') or (get_class($arguments[4]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Call') or (get_class($arguments[4]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Raw') or (get_class($arguments[4]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Reference')) or gettype($arguments[4]) == 'NULL') and ((get_class($arguments[5]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[5]) == 'NULL')) {
$parent = $arguments[0];
$name = $arguments[1];
$initial = $arguments[2];
$suchThat = $arguments[3];
$iterate = $arguments[4];
$code = $arguments[5];
$this->parent = $parent;
$this->itName = $name;
$this->topParent = $this->parent->parent->root;
$this->initial = $initial;
$this->initial->parent = $this;
$this->initial->setParent();
$this->to = $suchThat;
$this->to->parent = $this;
$this->to->setParent();
$this->iterate = $iterate;
$this->iterate->parent = $this;
$this->iterate->setParent();
$this->code = $code;
}

}
static function In(...$arguments) {
if (count($arguments) == 4 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Expression' or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Operation') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Call') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Raw') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Reference')) or gettype($arguments[2]) == 'NULL') and ((get_class($arguments[3]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[3]) == 'NULL')) {
$parent = $arguments[0];
$name = $arguments[1];
$what = $arguments[2];
$code = $arguments[3];
$emp = null;
$rtn = new Carbide_Virtual_Statements_For($parent, $name, $emp, $emp, $emp, $code);
$rtn->to = $what;
$this->to->parent = $this;
$rtn->in = true;
$rtn->code = $code;
$rtn->code->scope = $rtn->scope;
return $rtn;
}
}

function run(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[0]) == 'NULL')) {
$scope = $arguments[0];
if ($this->in) {
$to = $this->to->run($scope);
$it = new Carbide_Virtual_Variable($this->itName, Carbide_Virtual_Values_Null::create());
$itKey = new Carbide_Virtual_Variable($this->itName, Carbide_Virtual_Values_Null::create());
$scope->addVariable($it);
$to->iterate($itKey, $it, $this->code, $scope);}else{
$it = new Carbide_Virtual_Variable($this->itName, $this->initial->run($scope));
$scope->addVariable($it);
$start = $it->value->value;
$to = $this->to->run($scope);
while ($to->value) {
$this->code->run($scope);
$this->iterate->run($scope);
$to = $this->to->run($scope);}}
}
}

function clear(...$arguments) {
if (count($arguments) == 0) {
$this->scope->clear();
$this->code->clear();
}
}

function build(...$arguments) {
if (count($arguments) == 0) {

}
}


}class Carbide_Virtual_Statements_Raw {
public $code;

public $doOuput;

public $data;

public $parent;

public $topParent;

public $scope;

function __construct(...$arguments) {
$this->code = "";
$this->doOuput = false;
$this->data = ['_c__mapC' => true];
$this->parent = null;
$this->topParent = null;
$this->scope = null;


}
function build(...$arguments) {
if (count($arguments) == 0) {
$this->code = _c_lib__mapUtils::readIndex($this->data, "content");
if ($this->code == "\n") {
$this->doOuput = true;}
}
}

function run(...$arguments) {
if (count($arguments) == 0) {
if ($this->doOuput == false) {
$end = _c_lib__mapUtils::readIndex($this->data, "offset");
$this->parent->output($this->code, $end - strlen($this->code), $end);}
}
}

function clear(...$arguments) {
if (count($arguments) == 0) {

}
}


}class Carbide_Virtual_Statements_Lost {
public $value;

public $data;

public $parent;

public $topParent;

public $scope;

function __construct(...$arguments) {
$this->value = null;
$this->data = ['_c__mapC' => true];
$this->parent = null;
$this->topParent = null;
$this->scope = null;

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Expression' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Operation') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Call') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Raw') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Reference')) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$exp = $arguments[1];
$this->parent = $parent;
$this->topParent = $this->parent->parent->root;
$this->value = $exp;
$this->value->parent = $this;
$this->value->setParent();
}

}
function run(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[0]) == 'NULL')) {
$scope = $arguments[0];
$val = $this->value->run($scope);
}
}

function build(...$arguments) {
if (count($arguments) == 0) {

}
}

function clear(...$arguments) {
if (count($arguments) == 0) {

}
}


}class Carbide_Virtual_Statements_Var {
public $name;

public $value;

public $data;

public $parent;

public $topParent;

public $scope;

function __construct(...$arguments) {
$this->name = "";
$this->value = null;
$this->data = ['_c__mapC' => true];
$this->parent = null;
$this->topParent = null;
$this->scope = null;

if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Expression' or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Operation') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Call') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Raw') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Reference')) or gettype($arguments[2]) == 'NULL')) {
$parent = $arguments[0];
$name = $arguments[1];
$value = $arguments[2];
$this->parent = $parent;
$this->topParent = $this->parent->parent->root;
$this->name = $name;
$this->value = $value;
$this->value->parent = $this;
$this->value->setParent();
}

}
function run(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[0]) == 'NULL')) {
$scope = $arguments[0];
$variable = new Carbide_Virtual_Variable($this->name, $this->value->run($scope));
$scope->setVariable($variable);
}
}

function clear(...$arguments) {
if (count($arguments) == 0) {
$this->build();
}
}

function build(...$arguments) {
if (count($arguments) == 0) {

}
}


}class Carbide_Virtual_Statements_Return {
public $value;

public $data;

public $parent;

public $topParent;

public $scope;

function __construct(...$arguments) {
$this->value = null;
$this->data = ['_c__mapC' => true];
$this->parent = null;
$this->topParent = null;
$this->scope = null;

if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Expression' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Operation') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Call') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Raw') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Reference')) or gettype($arguments[1]) == 'NULL')) {
$parent = $arguments[0];
$exp = $arguments[1];
$this->parent = $parent;
$this->topParent = $this->parent->parent->root;
$this->value = $exp;
$this->value->parent = $this;
$this->value->setParent();
}

}
function run(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[0]) == 'NULL')) {
$scope = $arguments[0];
$name = "functionReturn";
$variable = new Carbide_Virtual_Variable($name, $this->value->run($scope));
$scope->addVariable($variable);
}
}

function build(...$arguments) {
if (count($arguments) == 0) {

}
}

function clear(...$arguments) {
if (count($arguments) == 0) {

}
}


}class Carbide_Virtual_Statements_Out {
public $code;

public $data;

public $parent;

public $topParent;

public $scope;

function __construct(...$arguments) {
$this->code = null;
$this->data = ['_c__mapC' => true];
$this->parent = null;
$this->topParent = null;
$this->scope = null;


}
function run(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[0]) == 'NULL')) {
$scope = $arguments[0];
$this->code->run($scope);
}
}

function clear(...$arguments) {
if (count($arguments) == 0) {
$this->scope->clear();
$this->code->clear();
}
}

function build(...$arguments) {
if (count($arguments) == 0) {

}
}


}class Carbide_Virtual_Processor {
public $root;

public $scripts;

public $scope;

public $_c__interface;

public $notices;

public $hadError;

public $heap;

public $heapIndex;

public $functionScope;

function __construct(...$arguments) {
$this->root = null;
$this->scripts = [];
$this->scope = null;
$this->_c__interface = null;
$this->notices = [];
$this->hadError = false;
$this->heap = [];
$this->heapIndex = 0;
$this->functionScope = [];

if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[0]) == 'NULL')) {
$root = $arguments[0];
$this->root = $root;
$emp = null;
$this->scope = new Carbide_Virtual_Scope($emp);
$this->setVar("typeOf", function ($args) {if (count($args) > 0) {
return Carbide_Virtual_Values_String::create(_c_lib__arrUtils::readIndex($args, 0)->type);}});
}

}
function findOnHeap(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL')) {
$id = $arguments[0];
for ($i = 0; $i < count($this->heap); $i++) {
$data = _c_lib__arrUtils::readIndex($this->heap, $i);
if ($data->id == $id) {
return $data;}}
return null;
}
}

function setValue(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$value = $arguments[1];
$this->scope->setVariable(new Carbide_Virtual_Variable($name, $value));
}
}

function setVar(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$value = $arguments[1];
$cast = $value;
$this->setValue($name, Carbide_Virtual_Values_Number::create($cast));
}
else if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'double' or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$value = $arguments[1];
$this->setValue($name, Carbide_Virtual_Values_Number::create($value));
}
else if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'boolean' or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$value = $arguments[1];
$this->setValue($name, Carbide_Virtual_Values_Bool::create($value));
}
else if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$value = $arguments[1];
$this->setValue($name, Carbide_Virtual_Values_String::create($value));
}
else if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (is_callable($arguments[1]) or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$value = $arguments[1];
$this->setValue($name, Carbide_Virtual_Values_Function::create($value));
}
}

function build(...$arguments) {
if (count($arguments) == 0) {
$this->root->scope = $this->scope;
$this->root->canOutput = true;
$this->root->build();
}
}

function run(...$arguments) {
if (count($arguments) == 0) {
try {;
if ($this->root != null) {
$this->root->run($this->scope);}
for ($i = 0; $i < count($this->scripts); $i++) {
$script = _c_lib__arrUtils::readIndex($this->scripts, $i);
$script->run($this->scope);}
} catch(\Exception $err) {};
}
}

function addFunction(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Statements_Function') or gettype($arguments[0]) == 'NULL')) {
$func = $arguments[0];
array_push($this->functionScope, $func);
}
}

function addBlock(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[0]) == 'NULL')) {
$block = $arguments[0];
array_push($this->scripts, $block);
}
}

function searchFunction(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
for ($i = 0; $i < count($this->functionScope); $i++) {
$func = _c_lib__arrUtils::readIndex($this->functionScope, $i);
if ($func->name == $name) {
return $func;}}
$emp = null;
return $emp;
}
}

function runtimeError(...$arguments) {
if (count($arguments) == 4 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'integer' or gettype($arguments[2]) == 'NULL') and (gettype($arguments[3]) == 'integer' or gettype($arguments[3]) == 'NULL')) {
$message = $arguments[0];
$location = $arguments[1];
$start = $arguments[2];
$end = $arguments[3];
$this->hadError = true;
array_push($this->notices, new Carbide_Notice($message, $location, $start, $end, 4));
throw new Exception("Error in Carbide.Virtual.Runtime");
}
}


}class Carbide_Virtual_Interface {

function __construct(...$arguments) {

if (count($arguments) == 0) {

}

}
function call(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$___arguments = $arguments[1];

}
}


}class Carbide_Virtual_Value {
public $type;

public $value;

public $raw;

function __construct(...$arguments) {
$this->type = "null";
$this->value = 0;
$this->raw = null;

if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
}

}
static function make(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[1]) == 'NULL')) {
$data = $arguments[0];
$proc = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "string") {
$rtn = new Carbide_Virtual_Values_String($data);}else if ($type == "map") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Map($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}else if ($type == "number") {
$rtn = new Carbide_Virtual_Values_Number($data);}else if ($type == "bool") {
$rtn = new Carbide_Virtual_Values_Bool($data);}else if ($type == "array") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Array($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}
$rtn->setValue($data);
return $rtn;
}
}

static function create(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL')) {
$value = $arguments[0];

}
}

function getValue(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

function duplicate(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

function setValue(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];

}
}

function compare(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];

}
}

static function primitiveToValue(...$arguments) {
if (count($arguments) == 1 and (((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'boolean' or gettype($arguments[0]) == 'double' or gettype($arguments[0]) == 'integer' or (gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'string') or gettype($arguments[0]) == 'NULL')) {
$prim = $arguments[0];
if ($prim == null) {
return Carbide_Virtual_Values_Null::create();}
$type = (gettype($prim) == 'double' ? 'float' : (gettype($prim) == 'array' ? (isset($prim['_c__mapC']) ? 'map' : 'array') : gettype($prim)));
if ($type == "array") {
return Carbide_Virtual_Values_ProxyArray::create($prim);}else if ($type == "map") {
return Carbide_Virtual_Values_ProxyMap::create($prim);}else if ($type == "string") {
return Carbide_Virtual_Values_String::create($prim);}else if ($type == "boolean") {
return Carbide_Virtual_Values_Bool::create($prim);}else if ($type == "integer" or $type == "float") {
return Carbide_Virtual_Values_Number::create($prim);}
}
}

function dotSet(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$prop = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];

}
}

function property(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$scope = $arguments[1];
return Carbide_Virtual_Values_Null::create();
}
}

function method(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$name = $arguments[0];
$input = $arguments[1];
$scope = $arguments[2];
return Carbide_Virtual_Values_Null::create();
}
}

function call(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];

}
else if (count($arguments) == 3 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[2]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];
$context = $arguments[2];

}
}

function operate(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$operator = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];

}
}

function iterate(...$arguments) {
if (count($arguments) == 4 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[2]) == 'NULL') and ((get_class($arguments[3]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[3]) == 'NULL')) {
$variableKey = $arguments[0];
$variable = $arguments[1];
$code = $arguments[2];
$scope = $arguments[3];

}
}


}class Carbide_Virtual_Values_String {
public $type;

public $value;

public $raw;

function __construct(...$arguments) {
$this->type = "string";
$this->value = "";
$this->raw = null;

if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
}

}
function setValue(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->value = _c_lib__mapUtils::readIndex($raw, "value");
}
}

function compare(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
if ($this->value == _c_lib__mapUtils::readIndex($raw, "value")) {
return true;}else{
return false;}
}
}

static function create(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$val = $arguments[0];
$m = ['_c__mapC' => true];
$value = new Carbide_Virtual_Values_String($m);
$value->value = $val;
return $value;
}
}

function iterate(...$arguments) {
if (count($arguments) == 4 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[2]) == 'NULL') and ((get_class($arguments[3]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[3]) == 'NULL')) {
$vKey = $arguments[0];
$v = $arguments[1];
$code = $arguments[2];
$scope = $arguments[3];
foreach ($this->value as $i => $_c_v__k0) {
$vKey->value->value = $i;
$v->value = Carbide_Virtual_Values_String::create($this->value[$i]);
$code->run($scope);}
}
}

function property(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$scope = $arguments[1];
if ($name == "length") {
$len = strlen($this->value);
return Carbide_Virtual_Values_Number::create($len);}
}
}

function method(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$name = $arguments[0];
$input = $arguments[1];
$scope = $arguments[2];
if ($name == "replace") {
if (count($input) == 2) {
$what = _c_lib__arrUtils::readIndex($input, 0)->value;
$replace = _c_lib__arrUtils::readIndex($input, 1)->value;
return Carbide_Virtual_Values_String::create(str_replace($what, $replace, $this->value));}}
return Carbide_Virtual_Values_Null::create();
}
}

function operate(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$operator = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];
$v = null;
if ($operator == "=") {
$this->value = $value->value;
$v = Carbide_Virtual_Values_Null::create();}else if ($operator == "==") {
$v = Carbide_Virtual_Values_Bool::create($this->value == $value->value);}else if ($operator == "!=") {
$v = Carbide_Virtual_Values_Bool::create($this->value != $value->value);}else if ($operator == "+") {
$v = Carbide_Virtual_Values_String::create($this->value . $value->value);}else if ($operator == "+=") {
$this->value .= $value->value;
$v = Carbide_Virtual_Values_Null::create();}
return $v;
}
}

function duplicate(...$arguments) {
if (count($arguments) == 0) {
return Carbide_Virtual_Values_String::create($this->value);
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[1]) == 'NULL')) {
$data = $arguments[0];
$proc = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "string") {
$rtn = new Carbide_Virtual_Values_String($data);}else if ($type == "map") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Map($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}else if ($type == "number") {
$rtn = new Carbide_Virtual_Values_Number($data);}else if ($type == "bool") {
$rtn = new Carbide_Virtual_Values_Bool($data);}else if ($type == "array") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Array($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}
$rtn->setValue($data);
return $rtn;
}
}

function getValue(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

static function primitiveToValue(...$arguments) {
if (count($arguments) == 1 and (((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'boolean' or gettype($arguments[0]) == 'double' or gettype($arguments[0]) == 'integer' or (gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'string') or gettype($arguments[0]) == 'NULL')) {
$prim = $arguments[0];
if ($prim == null) {
return Carbide_Virtual_Values_Null::create();}
$type = (gettype($prim) == 'double' ? 'float' : (gettype($prim) == 'array' ? (isset($prim['_c__mapC']) ? 'map' : 'array') : gettype($prim)));
if ($type == "array") {
return Carbide_Virtual_Values_ProxyArray::create($prim);}else if ($type == "map") {
return Carbide_Virtual_Values_ProxyMap::create($prim);}else if ($type == "string") {
return Carbide_Virtual_Values_String::create($prim);}else if ($type == "boolean") {
return Carbide_Virtual_Values_Bool::create($prim);}else if ($type == "integer" or $type == "float") {
return Carbide_Virtual_Values_Number::create($prim);}
}
}

function dotSet(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$prop = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];

}
}

function call(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];

}
else if (count($arguments) == 3 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[2]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];
$context = $arguments[2];

}
}


}class Carbide_Virtual_Values_Number {
public $type;

public $value;

public $raw;

function __construct(...$arguments) {
$this->type = "number";
$this->value = 0;
$this->raw = null;

if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
}

}
function setValue(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->value = _c_lib__mapUtils::readIndex($raw, "value");
if (_c_lib__mapUtils::readIndex($raw, "negative") != null) {
$zero = 0;
$this->value = $zero - $this->value;}
}
}

function compare(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
if ($this->value == _c_lib__mapUtils::readIndex($raw, "value")) {
return true;}else{
return false;}
}
}

function method(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$name = $arguments[0];
$args = $arguments[1];
$scope = $arguments[2];
if ($name == "toString") {
return Carbide_Virtual_Values_String::create(strval($this->value));}
}
}

function operate(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$operator = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];
$v = null;
if ($operator == "=") {
$this->value = $value->value;
$v = Carbide_Virtual_Values_Null::create();}else if ($operator == "==") {
$v = Carbide_Virtual_Values_Bool::create($this->value == $value->value);}else if ($operator == "!=") {
$v = Carbide_Virtual_Values_Bool::create($this->value != $value->value);}else if ($operator == "+") {
$v = Carbide_Virtual_Values_Number::create($this->value + $value->value);}else if ($operator == "-") {
$v = Carbide_Virtual_Values_Number::create($this->value - $value->value);}else if ($operator == "+=") {
$this->value+=$value->value;
$v = Carbide_Virtual_Values_Null::create();}else if ($operator == "*=") {
$this->value = $this->value * $value->value;
$v = Carbide_Virtual_Values_Null::create();}else if ($operator == "-=") {
$this->value-=$value->value;
$v = Carbide_Virtual_Values_Null::create();}else if ($operator == "*") {
$v = Carbide_Virtual_Values_Number::create($this->value * $value->value);}else if ($operator == "/") {
$v = Carbide_Virtual_Values_Number::create($this->value / $value->value);}else if ($operator == ">") {
$v = Carbide_Virtual_Values_Bool::create($this->value > $value->value);}else if ($operator == ">=") {
$v = Carbide_Virtual_Values_Bool::create($this->value >= $value->value);}else if ($operator == "<") {
$v = Carbide_Virtual_Values_Bool::create($this->value < $value->value);}else if ($operator == "<=") {
$v = Carbide_Virtual_Values_Bool::create($this->value <= $value->value);}
return $v;
}
}

static function create(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'double' or gettype($arguments[0]) == 'NULL')) {
$number = $arguments[0];
$m = ['_c__mapC' => true];
$value = new Carbide_Virtual_Values_Number($m);
$value->value = $number;
return $value;
}
}

function duplicate(...$arguments) {
if (count($arguments) == 0) {
return Carbide_Virtual_Values_Number::create($this->value);
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[1]) == 'NULL')) {
$data = $arguments[0];
$proc = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "string") {
$rtn = new Carbide_Virtual_Values_String($data);}else if ($type == "map") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Map($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}else if ($type == "number") {
$rtn = new Carbide_Virtual_Values_Number($data);}else if ($type == "bool") {
$rtn = new Carbide_Virtual_Values_Bool($data);}else if ($type == "array") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Array($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}
$rtn->setValue($data);
return $rtn;
}
}

function getValue(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

static function primitiveToValue(...$arguments) {
if (count($arguments) == 1 and (((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'boolean' or gettype($arguments[0]) == 'double' or gettype($arguments[0]) == 'integer' or (gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'string') or gettype($arguments[0]) == 'NULL')) {
$prim = $arguments[0];
if ($prim == null) {
return Carbide_Virtual_Values_Null::create();}
$type = (gettype($prim) == 'double' ? 'float' : (gettype($prim) == 'array' ? (isset($prim['_c__mapC']) ? 'map' : 'array') : gettype($prim)));
if ($type == "array") {
return Carbide_Virtual_Values_ProxyArray::create($prim);}else if ($type == "map") {
return Carbide_Virtual_Values_ProxyMap::create($prim);}else if ($type == "string") {
return Carbide_Virtual_Values_String::create($prim);}else if ($type == "boolean") {
return Carbide_Virtual_Values_Bool::create($prim);}else if ($type == "integer" or $type == "float") {
return Carbide_Virtual_Values_Number::create($prim);}
}
}

function dotSet(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$prop = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];

}
}

function property(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$scope = $arguments[1];
return Carbide_Virtual_Values_Null::create();
}
}

function call(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];

}
else if (count($arguments) == 3 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[2]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];
$context = $arguments[2];

}
}

function iterate(...$arguments) {
if (count($arguments) == 4 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[2]) == 'NULL') and ((get_class($arguments[3]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[3]) == 'NULL')) {
$variableKey = $arguments[0];
$variable = $arguments[1];
$code = $arguments[2];
$scope = $arguments[3];

}
}


}class Carbide_Virtual_Values_Array {
public $type;

public $value;

public $raw;

function __construct(...$arguments) {
$this->type = "array";
$this->value = [];
$this->raw = null;

if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
}

}
function compare(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
if ($this->value == _c_lib__mapUtils::readIndex($raw, "value")) {
return true;}else{
return false;}
}
}

function property(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$scope = $arguments[1];
if ($name == "length") {
$len = count($this->value);
return Carbide_Virtual_Values_Number::create($len);}
return Carbide_Virtual_Values_Null::create();
}
}

function method(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$name = $arguments[0];
$input = $arguments[1];
$scope = $arguments[2];
if ($name == "length") {
$len = count($this->value);
return Carbide_Virtual_Values_Number::create($len);}else if ($name == "index") {
$ind = _c_lib__arrUtils::readIndex($input, 0);
$found = _c_lib__arrUtils::readIndex($this->value, $ind->value);
return $found;}else if ($name == "push") {
$ind = _c_lib__arrUtils::readIndex($input, 0);
$found = array_push($this->value, $ind);}else if ($name == "pop") {
array_pop($this->value);}else if ($name == "join") {
$joins = "";
$glue = _c_lib__arrUtils::readIndex($input, 0)->value;
for ($i = 0; $i < count($this->value); $i++) {
$cast = _c_lib__arrUtils::readIndex($this->value, $i)->value;
if ($i != count($this->value) - 1) {
$joins .= $cast . $glue;}else{
$joins .= $cast;}}
return Carbide_Virtual_Values_String::create($joins);}
return Carbide_Virtual_Values_Null::create();
}
}

static function create(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$val = $arguments[0];
$m = ['_c__mapC' => true];
$value = new Carbide_Virtual_Values_Array($m);
$value->value = $val;
return $value;
}
}

function iterate(...$arguments) {
if (count($arguments) == 4 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[2]) == 'NULL') and ((get_class($arguments[3]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[3]) == 'NULL')) {
$vKey = $arguments[0];
$v = $arguments[1];
$code = $arguments[2];
$scope = $arguments[3];
for ($i = 0; $i < count($this->value); $i++) {
$vKey->value->value = $i;
$v->value = _c_lib__arrUtils::readIndex($this->value, $i);
$code->run($scope);}
}
}

function duplicate(...$arguments) {
if (count($arguments) == 0) {
return Carbide_Virtual_Values_Array::create([]);
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[1]) == 'NULL')) {
$data = $arguments[0];
$proc = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "string") {
$rtn = new Carbide_Virtual_Values_String($data);}else if ($type == "map") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Map($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}else if ($type == "number") {
$rtn = new Carbide_Virtual_Values_Number($data);}else if ($type == "bool") {
$rtn = new Carbide_Virtual_Values_Bool($data);}else if ($type == "array") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Array($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}
$rtn->setValue($data);
return $rtn;
}
}

function getValue(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

function setValue(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];

}
}

static function primitiveToValue(...$arguments) {
if (count($arguments) == 1 and (((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'boolean' or gettype($arguments[0]) == 'double' or gettype($arguments[0]) == 'integer' or (gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'string') or gettype($arguments[0]) == 'NULL')) {
$prim = $arguments[0];
if ($prim == null) {
return Carbide_Virtual_Values_Null::create();}
$type = (gettype($prim) == 'double' ? 'float' : (gettype($prim) == 'array' ? (isset($prim['_c__mapC']) ? 'map' : 'array') : gettype($prim)));
if ($type == "array") {
return Carbide_Virtual_Values_ProxyArray::create($prim);}else if ($type == "map") {
return Carbide_Virtual_Values_ProxyMap::create($prim);}else if ($type == "string") {
return Carbide_Virtual_Values_String::create($prim);}else if ($type == "boolean") {
return Carbide_Virtual_Values_Bool::create($prim);}else if ($type == "integer" or $type == "float") {
return Carbide_Virtual_Values_Number::create($prim);}
}
}

function dotSet(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$prop = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];

}
}

function call(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];

}
else if (count($arguments) == 3 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[2]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];
$context = $arguments[2];

}
}

function operate(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$operator = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];

}
}


}class Carbide_Virtual_Values_Map {
public $type;

public $value;

public $raw;

function __construct(...$arguments) {
$this->type = "map";
$this->value = null;
$this->raw = null;

if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
}

}
function setValue(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->value = _c_lib__mapUtils::readIndex($raw, "value");
}
}

function compare(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
if ($this->value == _c_lib__mapUtils::readIndex($raw, "value")) {
return true;}else{
return false;}
}
}

static function create(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$val = $arguments[0];
$m = ['_c__mapC' => true];
$value = new Carbide_Virtual_Values_Map($m);
$value->value = $val;
return $value;
}
}

function iterate(...$arguments) {
if (count($arguments) == 4 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[2]) == 'NULL') and ((get_class($arguments[3]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[3]) == 'NULL')) {
$vKey = $arguments[0];
$v = $arguments[1];
$code = $arguments[2];
$scope = $arguments[3];
foreach ($this->value as $key => $_c_v__k0) {
$cast = $vKey->value;
$cast->value = $key;
$v->value = _c_lib__mapUtils::readIndex($this->value, $key);
$code->run($scope);}
}
}

function property(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$scope = $arguments[1];
$f = _c_lib__mapUtils::readIndex($this->value, $name);
if ($f != null) {
$rtn = _c_lib__mapUtils::readIndex($this->value, $name);
return $rtn;}
return Carbide_Virtual_Values_Null::create();
}
}

function method(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$name = $arguments[0];
$input = $arguments[1];
$scope = $arguments[2];
if ($name == "set") {
$key = _c_lib__arrUtils::readIndex($input, 0);
$ind = _c_lib__arrUtils::readIndex($input, 1);
$this->value[$key->value] = $ind;}else if ($name == "index") {
$ind = _c_lib__arrUtils::readIndex($input, 0);
if (_c_lib__mapUtils::readIndex($this->value, $ind->value) != null) {
$found = _c_lib__mapUtils::readIndex($this->value, $ind->value);
return $found;}}else{
$ind = _c_lib__arrUtils::readIndex($input, 0);
$found = _c_lib__mapUtils::readIndex($this->value, $name);
return $found->call($input, $scope, $this);}
return Carbide_Virtual_Values_Null::create();
}
}

function dotSet(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$prop = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];
$v = null;
$this->value[$prop] = $value;
$v = Carbide_Virtual_Values_Null::create();
return $v;
}
}

function duplicate(...$arguments) {
if (count($arguments) == 0) {
return Carbide_Virtual_Values_Map::create(['_c__mapC' => true]);
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[1]) == 'NULL')) {
$data = $arguments[0];
$proc = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "string") {
$rtn = new Carbide_Virtual_Values_String($data);}else if ($type == "map") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Map($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}else if ($type == "number") {
$rtn = new Carbide_Virtual_Values_Number($data);}else if ($type == "bool") {
$rtn = new Carbide_Virtual_Values_Bool($data);}else if ($type == "array") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Array($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}
$rtn->setValue($data);
return $rtn;
}
}

function getValue(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

static function primitiveToValue(...$arguments) {
if (count($arguments) == 1 and (((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'boolean' or gettype($arguments[0]) == 'double' or gettype($arguments[0]) == 'integer' or (gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'string') or gettype($arguments[0]) == 'NULL')) {
$prim = $arguments[0];
if ($prim == null) {
return Carbide_Virtual_Values_Null::create();}
$type = (gettype($prim) == 'double' ? 'float' : (gettype($prim) == 'array' ? (isset($prim['_c__mapC']) ? 'map' : 'array') : gettype($prim)));
if ($type == "array") {
return Carbide_Virtual_Values_ProxyArray::create($prim);}else if ($type == "map") {
return Carbide_Virtual_Values_ProxyMap::create($prim);}else if ($type == "string") {
return Carbide_Virtual_Values_String::create($prim);}else if ($type == "boolean") {
return Carbide_Virtual_Values_Bool::create($prim);}else if ($type == "integer" or $type == "float") {
return Carbide_Virtual_Values_Number::create($prim);}
}
}

function call(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];

}
else if (count($arguments) == 3 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[2]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];
$context = $arguments[2];

}
}

function operate(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$operator = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];

}
}


}class Carbide_Virtual_Values_Function {
public $type;

public $value;

public $arguments;

public $code;

public $closure;

public $raw;

function __construct(...$arguments) {
$this->type = "function";
$this->value = null;
$this->arguments = [];
$this->code = null;
$this->closure = null;
$this->raw = null;

if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
}

}
function setValue(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];

}
}

function compare(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
return false;
}
}

static function create(...$arguments) {
if (count($arguments) == 1 and (is_callable($arguments[0]) or gettype($arguments[0]) == 'NULL')) {
$func = $arguments[0];
$m = ['_c__mapC' => true];
$value = new Carbide_Virtual_Values_Function($m);
$castValue = $func;
$value->value = $castValue;
return $value;
}
else if (count($arguments) == 1 and (is_callable($arguments[0]) or gettype($arguments[0]) == 'NULL')) {
$func = $arguments[0];
$m = ['_c__mapC' => true];
$value = new Carbide_Virtual_Values_Function($m);
$castValue = $func;
$value->value = $castValue;
return $value;
}
else if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[1]) == 'NULL')) {
$args = $arguments[0];
$code = $arguments[1];
$m = ['_c__mapC' => true];
$value = new Carbide_Virtual_Values_Function($m);
$value->arguments = $args;
$value->code = $code;
return $value;
}
}

function call(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];
return $this->call($args, $scope, null);
}
else if (count($arguments) == 3 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[2]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];
$context = $arguments[2];
if ($this->value != null) {
$cast = $this->value;
return $cast($args);}else{
if (count($args) != count($this->arguments)) {
}
$this->code->clear();
$funcScope = new Carbide_Virtual_Scope($scope->parent);
for ($i = 0; $i < count($this->arguments); $i++) {
$value = _c_lib__arrUtils::readIndex($args, $i);
$name = _c_lib__arrUtils::readIndex($this->arguments, $i);
$funcScope->addVariable(new Carbide_Virtual_Variable($name, $value));}
if ($context != null) {
$funcScope->addVariable(new Carbide_Virtual_Variable("this", $context));}
if ($this->closure != null) {
$funcScope->setParentScope($this->closure);}
$this->code->run($funcScope);
$rtn = $funcScope->search("functionReturn");
if ($rtn == null) {
$retu = Carbide_Virtual_Values_Null::create();
return $retu;}else{
return $rtn->value;}}
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[1]) == 'NULL')) {
$data = $arguments[0];
$proc = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "string") {
$rtn = new Carbide_Virtual_Values_String($data);}else if ($type == "map") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Map($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}else if ($type == "number") {
$rtn = new Carbide_Virtual_Values_Number($data);}else if ($type == "bool") {
$rtn = new Carbide_Virtual_Values_Bool($data);}else if ($type == "array") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Array($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}
$rtn->setValue($data);
return $rtn;
}
}

function getValue(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

function duplicate(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

static function primitiveToValue(...$arguments) {
if (count($arguments) == 1 and (((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'boolean' or gettype($arguments[0]) == 'double' or gettype($arguments[0]) == 'integer' or (gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'string') or gettype($arguments[0]) == 'NULL')) {
$prim = $arguments[0];
if ($prim == null) {
return Carbide_Virtual_Values_Null::create();}
$type = (gettype($prim) == 'double' ? 'float' : (gettype($prim) == 'array' ? (isset($prim['_c__mapC']) ? 'map' : 'array') : gettype($prim)));
if ($type == "array") {
return Carbide_Virtual_Values_ProxyArray::create($prim);}else if ($type == "map") {
return Carbide_Virtual_Values_ProxyMap::create($prim);}else if ($type == "string") {
return Carbide_Virtual_Values_String::create($prim);}else if ($type == "boolean") {
return Carbide_Virtual_Values_Bool::create($prim);}else if ($type == "integer" or $type == "float") {
return Carbide_Virtual_Values_Number::create($prim);}
}
}

function dotSet(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$prop = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];

}
}

function property(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$scope = $arguments[1];
return Carbide_Virtual_Values_Null::create();
}
}

function method(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$name = $arguments[0];
$input = $arguments[1];
$scope = $arguments[2];
return Carbide_Virtual_Values_Null::create();
}
}

function operate(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$operator = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];

}
}

function iterate(...$arguments) {
if (count($arguments) == 4 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[2]) == 'NULL') and ((get_class($arguments[3]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[3]) == 'NULL')) {
$variableKey = $arguments[0];
$variable = $arguments[1];
$code = $arguments[2];
$scope = $arguments[3];

}
}


}class Carbide_Virtual_Values_Bool {
public $type;

public $value;

public $raw;

function __construct(...$arguments) {
$this->type = "bool";
$this->value = false;
$this->raw = null;

if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
}

}
function setValue(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->value = _c_lib__mapUtils::readIndex($raw, "value");
}
}

function compare(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
if ($this->value == _c_lib__mapUtils::readIndex($raw, "value")) {
return true;}else{
return false;}
}
}

static function create(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'boolean' or gettype($arguments[0]) == 'NULL')) {
$val = $arguments[0];
$m = ['_c__mapC' => true];
$value = new Carbide_Virtual_Values_Bool($m);
$value->value = $val;
return $value;
}
}

function operate(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$operator = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];
if ($operator == "=") {
$this->value = $value->value;}else if ($operator == "==") {
return Carbide_Virtual_Values_Bool::create($this->value == $value->value);}else if ($operator == "!=") {
return Carbide_Virtual_Values_Bool::create($this->value != $value->value);}
}
}

function duplicate(...$arguments) {
if (count($arguments) == 0) {
return Carbide_Virtual_Values_Bool::create($this->value);
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[1]) == 'NULL')) {
$data = $arguments[0];
$proc = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "string") {
$rtn = new Carbide_Virtual_Values_String($data);}else if ($type == "map") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Map($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}else if ($type == "number") {
$rtn = new Carbide_Virtual_Values_Number($data);}else if ($type == "bool") {
$rtn = new Carbide_Virtual_Values_Bool($data);}else if ($type == "array") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Array($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}
$rtn->setValue($data);
return $rtn;
}
}

function getValue(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

static function primitiveToValue(...$arguments) {
if (count($arguments) == 1 and (((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'boolean' or gettype($arguments[0]) == 'double' or gettype($arguments[0]) == 'integer' or (gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'string') or gettype($arguments[0]) == 'NULL')) {
$prim = $arguments[0];
if ($prim == null) {
return Carbide_Virtual_Values_Null::create();}
$type = (gettype($prim) == 'double' ? 'float' : (gettype($prim) == 'array' ? (isset($prim['_c__mapC']) ? 'map' : 'array') : gettype($prim)));
if ($type == "array") {
return Carbide_Virtual_Values_ProxyArray::create($prim);}else if ($type == "map") {
return Carbide_Virtual_Values_ProxyMap::create($prim);}else if ($type == "string") {
return Carbide_Virtual_Values_String::create($prim);}else if ($type == "boolean") {
return Carbide_Virtual_Values_Bool::create($prim);}else if ($type == "integer" or $type == "float") {
return Carbide_Virtual_Values_Number::create($prim);}
}
}

function dotSet(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$prop = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];

}
}

function property(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$scope = $arguments[1];
return Carbide_Virtual_Values_Null::create();
}
}

function method(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$name = $arguments[0];
$input = $arguments[1];
$scope = $arguments[2];
return Carbide_Virtual_Values_Null::create();
}
}

function call(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];

}
else if (count($arguments) == 3 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[2]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];
$context = $arguments[2];

}
}

function iterate(...$arguments) {
if (count($arguments) == 4 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[2]) == 'NULL') and ((get_class($arguments[3]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[3]) == 'NULL')) {
$variableKey = $arguments[0];
$variable = $arguments[1];
$code = $arguments[2];
$scope = $arguments[3];

}
}


}class Carbide_Virtual_Values_ProxyMap {
public $type;

public $value;

public $raw;

function __construct(...$arguments) {
$this->type = "map";
$this->value = ['_c__mapC' => true];
$this->raw = null;

if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
}

}
function setValue(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->value = _c_lib__mapUtils::readIndex($raw, "value");
}
}

function compare(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
if ($this->value == _c_lib__mapUtils::readIndex($raw, "value")) {
return true;}else{
return false;}
}
}

static function create(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$val = $arguments[0];
$m = ['_c__mapC' => true];
$value = new Carbide_Virtual_Values_ProxyMap($m);
$value->value = $val;
return $value;
}
}

function iterate(...$arguments) {
if (count($arguments) == 4 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[2]) == 'NULL') and ((get_class($arguments[3]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[3]) == 'NULL')) {
$vKey = $arguments[0];
$v = $arguments[1];
$code = $arguments[2];
$scope = $arguments[3];
foreach ($this->value as $key => $_c_v__k0) {
$cast = $vKey->value;
$cast->value = $key;
$v->value = Carbide_Virtual_Value::primitiveToValue(_c_lib__mapUtils::readIndex($this->value, $key));
$code->run($scope);}
}
}

function property(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$scope = $arguments[1];
if (isset($this->value[$name])) {
$rtn = Carbide_Virtual_Value::primitiveToValue(_c_lib__mapUtils::readIndex($this->value, $name));
return $rtn;}
return Carbide_Virtual_Values_Null::create();
}
}

function method(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$name = $arguments[0];
$input = $arguments[1];
$scope = $arguments[2];
if ($name == "set") {
$key = _c_lib__arrUtils::readIndex($input, 0);
$ind = _c_lib__arrUtils::readIndex($input, 1);
$this->value[$key->value] = $ind->value;}else if ($name == "index") {
$ind = _c_lib__arrUtils::readIndex($input, 0);
$found = Carbide_Virtual_Value::primitiveToValue($this->value[$ind->value]);
return $found;}
return Carbide_Virtual_Values_Null::create();
}
}

function dotSet(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$prop = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];
$v = null;
$this->value[$prop] = $value->value;
$v = Carbide_Virtual_Values_Null::create();
return $v;
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[1]) == 'NULL')) {
$data = $arguments[0];
$proc = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "string") {
$rtn = new Carbide_Virtual_Values_String($data);}else if ($type == "map") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Map($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}else if ($type == "number") {
$rtn = new Carbide_Virtual_Values_Number($data);}else if ($type == "bool") {
$rtn = new Carbide_Virtual_Values_Bool($data);}else if ($type == "array") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Array($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}
$rtn->setValue($data);
return $rtn;
}
}

function getValue(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

function duplicate(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

static function primitiveToValue(...$arguments) {
if (count($arguments) == 1 and (((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'boolean' or gettype($arguments[0]) == 'double' or gettype($arguments[0]) == 'integer' or (gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'string') or gettype($arguments[0]) == 'NULL')) {
$prim = $arguments[0];
if ($prim == null) {
return Carbide_Virtual_Values_Null::create();}
$type = (gettype($prim) == 'double' ? 'float' : (gettype($prim) == 'array' ? (isset($prim['_c__mapC']) ? 'map' : 'array') : gettype($prim)));
if ($type == "array") {
return Carbide_Virtual_Values_ProxyArray::create($prim);}else if ($type == "map") {
return Carbide_Virtual_Values_ProxyMap::create($prim);}else if ($type == "string") {
return Carbide_Virtual_Values_String::create($prim);}else if ($type == "boolean") {
return Carbide_Virtual_Values_Bool::create($prim);}else if ($type == "integer" or $type == "float") {
return Carbide_Virtual_Values_Number::create($prim);}
}
}

function call(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];

}
else if (count($arguments) == 3 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[2]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];
$context = $arguments[2];

}
}

function operate(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$operator = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];

}
}


}class Carbide_Virtual_Values_ProxyArray {
public $type;

public $value;

public $raw;

function __construct(...$arguments) {
$this->type = "array";
$this->value = null;
$this->raw = null;

if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
}

}
function setValue(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->value = _c_lib__mapUtils::readIndex($raw, "value");
}
}

function compare(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
if ($this->value == _c_lib__mapUtils::readIndex($raw, "value")) {
return true;}else{
return false;}
}
}

static function create(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$val = $arguments[0];
$m = ['_c__mapC' => true];
$value = new Carbide_Virtual_Values_ProxyArray($m);
$value->value = $val;
return $value;
}
}

function iterate(...$arguments) {
if (count($arguments) == 4 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[2]) == 'NULL') and ((get_class($arguments[3]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[3]) == 'NULL')) {
$vKey = $arguments[0];
$v = $arguments[1];
$code = $arguments[2];
$scope = $arguments[3];
for ($i = 0; $i < count($this->value); $i++) {
$vKey->value->value = $i;
$v->value = Carbide_Virtual_Value::primitiveToValue(_c_lib__arrUtils::readIndex($this->value, $i));
$code->run($scope);}
}
}

function property(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$scope = $arguments[1];
if ($name == "length") {
$cast = count($this->value);
$rtn = Carbide_Virtual_Values_Number::create($cast);
return $rtn;}
return Carbide_Virtual_Values_Null::create();
}
}

function method(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$name = $arguments[0];
$input = $arguments[1];
$scope = $arguments[2];
if ($name == "length") {
$len = count($this->value);
return Carbide_Virtual_Values_Number::create($len);}else if ($name == "index") {
$ind = _c_lib__arrUtils::readIndex($input, 0);
$found = Carbide_Virtual_Value::primitiveToValue(_c_lib__arrUtils::readIndex($this->value, $ind->value));
return $found;}else if ($name == "push") {
$ind = _c_lib__arrUtils::readIndex($input, 0);
$found = array_push($this->value, $ind->value);}else if ($name == "pop") {
array_pop($this->value);}
return Carbide_Virtual_Values_Null::create();
}
}

function dotSet(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$prop = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];
$v = null;
$this->value[$prop] = $value->value;
$v = Carbide_Virtual_Values_Null::create();
return $v;
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[1]) == 'NULL')) {
$data = $arguments[0];
$proc = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "string") {
$rtn = new Carbide_Virtual_Values_String($data);}else if ($type == "map") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Map($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}else if ($type == "number") {
$rtn = new Carbide_Virtual_Values_Number($data);}else if ($type == "bool") {
$rtn = new Carbide_Virtual_Values_Bool($data);}else if ($type == "array") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Array($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}
$rtn->setValue($data);
return $rtn;
}
}

function getValue(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

function duplicate(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

static function primitiveToValue(...$arguments) {
if (count($arguments) == 1 and (((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'boolean' or gettype($arguments[0]) == 'double' or gettype($arguments[0]) == 'integer' or (gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'string') or gettype($arguments[0]) == 'NULL')) {
$prim = $arguments[0];
if ($prim == null) {
return Carbide_Virtual_Values_Null::create();}
$type = (gettype($prim) == 'double' ? 'float' : (gettype($prim) == 'array' ? (isset($prim['_c__mapC']) ? 'map' : 'array') : gettype($prim)));
if ($type == "array") {
return Carbide_Virtual_Values_ProxyArray::create($prim);}else if ($type == "map") {
return Carbide_Virtual_Values_ProxyMap::create($prim);}else if ($type == "string") {
return Carbide_Virtual_Values_String::create($prim);}else if ($type == "boolean") {
return Carbide_Virtual_Values_Bool::create($prim);}else if ($type == "integer" or $type == "float") {
return Carbide_Virtual_Values_Number::create($prim);}
}
}

function call(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];

}
else if (count($arguments) == 3 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[2]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];
$context = $arguments[2];

}
}

function operate(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$operator = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];

}
}


}class Carbide_Virtual_Values_AutoArray {
public $type;

public $value;

public $raw;

function __construct(...$arguments) {
$this->type = "array";
$this->value = null;
$this->raw = null;

if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$value = $arguments[0];
$this->value = $value;
}
else if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
}

}
function castCarbideValue(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL')) {
$i = $arguments[0];
return Carbide_Virtual_Value::primitiveToValue(_c_lib__arrUtils::readIndex($this->value, $i));
}
}

function iterate(...$arguments) {
if (count($arguments) == 4 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[2]) == 'NULL') and ((get_class($arguments[3]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[3]) == 'NULL')) {
$vKey = $arguments[0];
$v = $arguments[1];
$code = $arguments[2];
$scope = $arguments[3];
for ($i = 0; $i < count($this->value); $i++) {
$vKey->value->value = $i;
$v->value = $this->castCarbideValue($i);
$code->run($scope);}
}
}

function property(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$scope = $arguments[1];
if ($name == "length") {
$cast = count($this->value);
$rtn = Carbide_Virtual_Values_Number::create($cast);
return $rtn;}
return Carbide_Virtual_Values_Null::create();
}
}

function method(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$name = $arguments[0];
$input = $arguments[1];
$scope = $arguments[2];
if ($name == "length") {
$len = count($this->value);
return Carbide_Virtual_Values_Number::create($len);}else if ($name == "index") {
$ind = _c_lib__arrUtils::readIndex($input, 0);
$found = $this->castCarbideValue($ind->value);
return $found;}else if ($name == "push") {
$ind = _c_lib__arrUtils::readIndex($input, 0);
$cast = &$this->value;
array_push($cast, $ind->value);}else if ($name == "pop") {
array_pop($this->value);}
return Carbide_Virtual_Values_Null::create();
}
}

function dotSet(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$prop = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];
$v = null;
$this->value[$prop] = $value->value;
$v = Carbide_Virtual_Values_Null::create();
return $v;
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[1]) == 'NULL')) {
$data = $arguments[0];
$proc = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "string") {
$rtn = new Carbide_Virtual_Values_String($data);}else if ($type == "map") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Map($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}else if ($type == "number") {
$rtn = new Carbide_Virtual_Values_Number($data);}else if ($type == "bool") {
$rtn = new Carbide_Virtual_Values_Bool($data);}else if ($type == "array") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Array($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}
$rtn->setValue($data);
return $rtn;
}
}

static function create(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL')) {
$value = $arguments[0];

}
}

function getValue(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

function duplicate(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

function setValue(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];

}
}

function compare(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];

}
}

static function primitiveToValue(...$arguments) {
if (count($arguments) == 1 and (((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'boolean' or gettype($arguments[0]) == 'double' or gettype($arguments[0]) == 'integer' or (gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'string') or gettype($arguments[0]) == 'NULL')) {
$prim = $arguments[0];
if ($prim == null) {
return Carbide_Virtual_Values_Null::create();}
$type = (gettype($prim) == 'double' ? 'float' : (gettype($prim) == 'array' ? (isset($prim['_c__mapC']) ? 'map' : 'array') : gettype($prim)));
if ($type == "array") {
return Carbide_Virtual_Values_ProxyArray::create($prim);}else if ($type == "map") {
return Carbide_Virtual_Values_ProxyMap::create($prim);}else if ($type == "string") {
return Carbide_Virtual_Values_String::create($prim);}else if ($type == "boolean") {
return Carbide_Virtual_Values_Bool::create($prim);}else if ($type == "integer" or $type == "float") {
return Carbide_Virtual_Values_Number::create($prim);}
}
}

function call(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];

}
else if (count($arguments) == 3 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[2]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];
$context = $arguments[2];

}
}

function operate(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$operator = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];

}
}


}class Carbide_Virtual_Values_Null {
public $type;

public $value;

public $raw;

function __construct(...$arguments) {
$this->type = "null";
$this->value = false;
$this->raw = null;

if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
}

}
function setValue(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->value = _c_lib__mapUtils::readIndex($raw, "value");
}
}

function compare(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
if ($this->value == _c_lib__mapUtils::readIndex($raw, "value")) {
return true;}else{
return false;}
}
}

static function create(...$arguments) {
if (count($arguments) == 0) {
$m = ['_c__mapC' => true];
$value = new Carbide_Virtual_Values_Null($m);
$value->value = null;
return $value;
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[1]) == 'NULL')) {
$data = $arguments[0];
$proc = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "string") {
$rtn = new Carbide_Virtual_Values_String($data);}else if ($type == "map") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Map($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}else if ($type == "number") {
$rtn = new Carbide_Virtual_Values_Number($data);}else if ($type == "bool") {
$rtn = new Carbide_Virtual_Values_Bool($data);}else if ($type == "array") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Array($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}
$rtn->setValue($data);
return $rtn;
}
}

function getValue(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

function duplicate(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

static function primitiveToValue(...$arguments) {
if (count($arguments) == 1 and (((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'boolean' or gettype($arguments[0]) == 'double' or gettype($arguments[0]) == 'integer' or (gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'string') or gettype($arguments[0]) == 'NULL')) {
$prim = $arguments[0];
if ($prim == null) {
return Carbide_Virtual_Values_Null::create();}
$type = (gettype($prim) == 'double' ? 'float' : (gettype($prim) == 'array' ? (isset($prim['_c__mapC']) ? 'map' : 'array') : gettype($prim)));
if ($type == "array") {
return Carbide_Virtual_Values_ProxyArray::create($prim);}else if ($type == "map") {
return Carbide_Virtual_Values_ProxyMap::create($prim);}else if ($type == "string") {
return Carbide_Virtual_Values_String::create($prim);}else if ($type == "boolean") {
return Carbide_Virtual_Values_Bool::create($prim);}else if ($type == "integer" or $type == "float") {
return Carbide_Virtual_Values_Number::create($prim);}
}
}

function dotSet(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$prop = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];

}
}

function property(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$scope = $arguments[1];
return Carbide_Virtual_Values_Null::create();
}
}

function method(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$name = $arguments[0];
$input = $arguments[1];
$scope = $arguments[2];
return Carbide_Virtual_Values_Null::create();
}
}

function call(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];

}
else if (count($arguments) == 3 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[2]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];
$context = $arguments[2];

}
}

function operate(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$operator = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];

}
}

function iterate(...$arguments) {
if (count($arguments) == 4 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[2]) == 'NULL') and ((get_class($arguments[3]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[3]) == 'NULL')) {
$variableKey = $arguments[0];
$variable = $arguments[1];
$code = $arguments[2];
$scope = $arguments[3];

}
}


}class Carbide_Virtual_Values_Reference {
public $type;

public $id;

public $processor;

public $value;

public $raw;

function __construct(...$arguments) {
$this->type = "null";
$this->id = 1;
$this->processor = null;
$this->value = 0;
$this->raw = null;

if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
}

}
function getValue(...$arguments) {
if (count($arguments) == 0) {
return $this->processor->findOnHeap($this->id)->value;
}
}

function setValue(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];

}
}

function compare(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];

}
}

static function create(...$arguments) {
if (count($arguments) == 0) {
return null;
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[1]) == 'NULL')) {
$data = $arguments[0];
$proc = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "string") {
$rtn = new Carbide_Virtual_Values_String($data);}else if ($type == "map") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Map($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}else if ($type == "number") {
$rtn = new Carbide_Virtual_Values_Number($data);}else if ($type == "bool") {
$rtn = new Carbide_Virtual_Values_Bool($data);}else if ($type == "array") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Array($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}
$rtn->setValue($data);
return $rtn;
}
}

function duplicate(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

static function primitiveToValue(...$arguments) {
if (count($arguments) == 1 and (((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'boolean' or gettype($arguments[0]) == 'double' or gettype($arguments[0]) == 'integer' or (gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'string') or gettype($arguments[0]) == 'NULL')) {
$prim = $arguments[0];
if ($prim == null) {
return Carbide_Virtual_Values_Null::create();}
$type = (gettype($prim) == 'double' ? 'float' : (gettype($prim) == 'array' ? (isset($prim['_c__mapC']) ? 'map' : 'array') : gettype($prim)));
if ($type == "array") {
return Carbide_Virtual_Values_ProxyArray::create($prim);}else if ($type == "map") {
return Carbide_Virtual_Values_ProxyMap::create($prim);}else if ($type == "string") {
return Carbide_Virtual_Values_String::create($prim);}else if ($type == "boolean") {
return Carbide_Virtual_Values_Bool::create($prim);}else if ($type == "integer" or $type == "float") {
return Carbide_Virtual_Values_Number::create($prim);}
}
}

function dotSet(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$prop = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];

}
}

function property(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$scope = $arguments[1];
return Carbide_Virtual_Values_Null::create();
}
}

function method(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$name = $arguments[0];
$input = $arguments[1];
$scope = $arguments[2];
return Carbide_Virtual_Values_Null::create();
}
}

function call(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];

}
else if (count($arguments) == 3 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[2]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];
$context = $arguments[2];

}
}

function operate(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$operator = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];

}
}

function iterate(...$arguments) {
if (count($arguments) == 4 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[2]) == 'NULL') and ((get_class($arguments[3]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[3]) == 'NULL')) {
$variableKey = $arguments[0];
$variable = $arguments[1];
$code = $arguments[2];
$scope = $arguments[3];

}
}


}class Carbide_Virtual_Variable {
public $name;

public $value;

function __construct(...$arguments) {
$this->name = "";
$this->value = null;

if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$value = $arguments[1];
$this->name = $name;
$this->value = $value;
}

}

}class Carbide_Virtual_Scope {
public $parentScope;

public $parent;

public $data;

function __construct(...$arguments) {
$this->parentScope = null;
$this->parent = null;
$this->data = [];

if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[0]) == 'NULL')) {
$parent = $arguments[0];
$this->parent = $parent;
}

}
function setParentScope(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[0]) == 'NULL')) {
$scope = $arguments[0];
$this->parentScope = $scope;
}
}

function setVariable(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[0]) == 'NULL')) {
$variable = $arguments[0];
for ($i = 0; $i < count($this->data); $i++) {
$dat = _c_lib__arrUtils::readIndex($this->data, $i);
if ($dat->name == $variable->name) {
$dat->value = $variable->value;
return null;}}
$this->addVariable($variable);
}
}

function addVariable(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[0]) == 'NULL')) {
$variable = $arguments[0];
array_push($this->data, $variable);
}
}

function clear(...$arguments) {
if (count($arguments) == 0) {
for ($i = count($this->data);$i > 0;$i--) {
array_pop($this->data);}
}
}

function search(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
for ($i = 0; $i < count($this->data); $i++) {
$variable = _c_lib__arrUtils::readIndex($this->data, $i);
if ($variable->name == $name) {
return $variable;}}
if ($this->parentScope != null) {
return $this->parentScope->search($name);}
$emp = null;
return $emp;
}
}


}class Carbide_Virtual_Sub {
public $data;

public $parent;

public $type;

public $property;

public $arguments;

function __construct(...$arguments) {
$this->data = ['_c__mapC' => true];
$this->parent = null;
$this->type = 0;
$this->property = "";
$this->arguments = [];

if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Statement' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Statements_Define') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Statements_Function') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Statements_If') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Statements_For') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Statements_Raw') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Statements_Lost') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Statements_Var') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Statements_Return') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Statements_Out')) or gettype($arguments[0]) == 'NULL')) {
$parent = $arguments[0];
$this->parent = $parent;
}

}
function run(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$on = $arguments[0];
$scope = $arguments[1];
if ($this->type == 1) {
return $on->property($this->property, $scope);}else{
$args = [];
for ($i = 0; $i < count($this->arguments); $i++) {
$arg = _c_lib__arrUtils::readIndex($this->arguments, $i);
array_push($args, $arg->run($scope));}
if ($on->type == "function") {
return $on->call($args, $scope);}else{
return $on->method($this->property, $args, $scope);}}
}
}


}class Carbide_Notice {
public $start;

public $end;

public $level;

public $location;

public $message;

function __construct(...$arguments) {
$this->start = 0;
$this->end = 0;
$this->level = 0;
$this->location = "";
$this->message = "";

if (count($arguments) == 5 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'integer' or gettype($arguments[2]) == 'NULL') and (gettype($arguments[3]) == 'integer' or gettype($arguments[3]) == 'NULL') and (gettype($arguments[4]) == 'integer' or gettype($arguments[4]) == 'NULL')) {
$message = $arguments[0];
$location = $arguments[1];
$start = $arguments[2];
$end = $arguments[3];
$level = $arguments[4];
$this->message = $message;
$this->location = $location;
$this->start = $start;
$this->end = $end;
$this->level = $level;
}

}

}class Carbide_Virtual_Data {
public $id;

public $refs;

public $value;

function __construct(...$arguments) {
$this->id = 0;
$this->refs = 0;
$this->value = null;

if (count($arguments) == 2 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL')) {
$id = $arguments[0];
$val = $arguments[1];
$this->id = $id;
$this->value = $val;
}

}

}class Carbide_Virtual_Expression {
public $data;

public $subs;

public $parent;

function __construct(...$arguments) {
$this->data = null;
$this->subs = [];
$this->parent = null;


}
function build(...$arguments) {
if (count($arguments) == 0) {

}
}

function setParent(...$arguments) {
if (count($arguments) == 0) {

}
}

function buildSubs(...$arguments) {
if (count($arguments) == 0) {

}
}

function runSubs(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$on = $arguments[0];
$scope = $arguments[1];
$last = $on;
for ($i = 0; $i < count($this->subs); $i++) {
$sub = _c_lib__arrUtils::readIndex($this->subs, $i);
$last = $sub->run($last, $scope);}
return $last;
}
}

function runSubsTo(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'integer' or gettype($arguments[2]) == 'NULL')) {
$on = $arguments[0];
$scope = $arguments[1];
$to = $arguments[2];
$last = $on;
for ($i = 0; $i < count($this->subs); $i++) {
$sub = _c_lib__arrUtils::readIndex($this->subs, $i);
$last = $sub->run($last, $scope);
if ($to == $i) {
break;}}
return $last;
}
}

function run(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[0]) == 'NULL')) {
$scope = $arguments[0];

}
}

function runTo(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$scope = $arguments[0];
$to = $arguments[1];

}
}


}class Carbide_Virtual_Expressions_Operation {
public $head;

public $tail;

public $operator;

public $data;

public $subs;

public $parent;

function __construct(...$arguments) {
$this->head = null;
$this->tail = null;
$this->operator = "";
$this->data = null;
$this->subs = [];
$this->parent = null;

if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Expression' or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Operation') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Call') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Raw') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Reference')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Expression' or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Operation') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Call') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Raw') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Expressions_Reference')) or gettype($arguments[2]) == 'NULL')) {
$operator = $arguments[0];
$head = $arguments[1];
$tail = $arguments[2];
$this->operator = $operator;
$this->head = $head;
$this->head->parent = $this->parent;
$this->tail = $tail;
$this->tail->parent = $this->parent;
}

}
function setParent(...$arguments) {
if (count($arguments) == 0) {
$this->tail->parent = $this->parent;
$this->head->parent = $this->parent;
}
}

function runTo(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$scope = $arguments[0];
$to = $arguments[1];
return $this->run($scope);
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$scope = $arguments[0];
$to = $arguments[1];

}
}

function run(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[0]) == 'NULL')) {
$scope = $arguments[0];
$this->setParent();
$head = $this->head->run($scope);
$tail = $this->tail->run($scope);
if ($this->operator == "=" and count($this->head->subs) > 0) {
$top = $this->head->runTo($scope, count($this->head->subs) - 1);
return $top->dotSet(_c_lib__arrUtils::readIndex($this->head->subs, count($this->head->subs) - 1)->property, $tail, $scope);}else{
return $head->operate($this->operator, $tail, $scope);}
}
}

function build(...$arguments) {
if (count($arguments) == 0) {

}
}

function buildSubs(...$arguments) {
if (count($arguments) == 0) {

}
}

function runSubs(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$on = $arguments[0];
$scope = $arguments[1];
$last = $on;
for ($i = 0; $i < count($this->subs); $i++) {
$sub = _c_lib__arrUtils::readIndex($this->subs, $i);
$last = $sub->run($last, $scope);}
return $last;
}
}

function runSubsTo(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'integer' or gettype($arguments[2]) == 'NULL')) {
$on = $arguments[0];
$scope = $arguments[1];
$to = $arguments[2];
$last = $on;
for ($i = 0; $i < count($this->subs); $i++) {
$sub = _c_lib__arrUtils::readIndex($this->subs, $i);
$last = $sub->run($last, $scope);
if ($to == $i) {
break;}}
return $last;
}
}


}class Carbide_Virtual_Expressions_Call {
public $name;

public $arguments;

public $data;

public $subs;

public $parent;

function __construct(...$arguments) {
$this->name = "";
$this->arguments = [];
$this->data = null;
$this->subs = [];
$this->parent = null;

if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'string' or gettype($arguments[1]) == 'NULL')) {
$___arguments = $arguments[0];
$name = $arguments[1];
$this->name = $name;
$this->arguments = $___arguments;
}

}
function setParent(...$arguments) {
if (count($arguments) == 0) {
for ($i = 0; $i < count($this->arguments); $i++) {
$arg = _c_lib__arrUtils::readIndex($this->arguments, $i);
$arg->parent = $this->parent;
$arg->setParent();}
}
}

function runTo(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$scope = $arguments[0];
$to = $arguments[1];
return $this->run($scope);
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$scope = $arguments[0];
$to = $arguments[1];

}
}

function run(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[0]) == 'NULL')) {
$scope = $arguments[0];
$call = $this->parent->topParent->parent->searchFunction($this->name);
if ($call != null) {
return $this->runSubs($call->call($this->arguments, $scope), $scope);}else{
$splits = explode(".", $this->name);
$root = _c_lib__arrUtils::readIndex($splits, 0);
$val = $scope->search($root);
if ($val != null) {
$realValue = $val->value;
if (count($splits) > 2) {
for ($i = 1;$i < count($splits) - 1;$i++) {
$realValue = $realValue->property(_c_lib__arrUtils::readIndex($splits, $i), $scope);}}
$args = [];
for ($i = 0; $i < count($this->arguments); $i++) {
$arg = _c_lib__arrUtils::readIndex($this->arguments, $i);
array_push($args, $arg->run($scope));}
if (count($splits) > 1) {
return $realValue->method(_c_lib__arrUtils::readIndex($splits, count($splits) - 1), $args, $scope);}else{
return $realValue->call($args, $scope);}}else{
$location = "anon";
if ($this->parent->parent->topBlock != null) {
$location = $this->parent->parent->topBlock->label;}
$this->parent->topParent->parent->runtimeError("Unknown function '" . $this->name . "'", $location, 0, 0);}}
}
}

function build(...$arguments) {
if (count($arguments) == 0) {

}
}

function buildSubs(...$arguments) {
if (count($arguments) == 0) {

}
}

function runSubs(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$on = $arguments[0];
$scope = $arguments[1];
$last = $on;
for ($i = 0; $i < count($this->subs); $i++) {
$sub = _c_lib__arrUtils::readIndex($this->subs, $i);
$last = $sub->run($last, $scope);}
return $last;
}
}

function runSubsTo(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'integer' or gettype($arguments[2]) == 'NULL')) {
$on = $arguments[0];
$scope = $arguments[1];
$to = $arguments[2];
$last = $on;
for ($i = 0; $i < count($this->subs); $i++) {
$sub = _c_lib__arrUtils::readIndex($this->subs, $i);
$last = $sub->run($last, $scope);
if ($to == $i) {
break;}}
return $last;
}
}


}class Carbide_Virtual_Expressions_Raw {
public $value;

public $data;

public $subs;

public $parent;

function __construct(...$arguments) {
$this->value = null;
$this->data = null;
$this->subs = [];
$this->parent = null;

if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[0]) == 'NULL')) {
$val = $arguments[0];
$this->value = $val;
}

}
function build(...$arguments) {
if (count($arguments) == 0) {
$this->value = Carbide_Virtual_Value::make($this->data, $this->parent->parent->parent);
}
}

function runTo(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$scope = $arguments[0];
$to = $arguments[1];
if ($this->value->type == "function") {
$cast = $this->value;
$cast->closure = $scope;}
return $this->value->duplicate();
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$scope = $arguments[0];
$to = $arguments[1];

}
}

function run(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[0]) == 'NULL')) {
$scope = $arguments[0];
if ($this->value->type == "function") {
$cast = $this->value;
$cast->closure = $scope;}
return $this->value->duplicate();
}
}

function setParent(...$arguments) {
if (count($arguments) == 0) {

}
}

function buildSubs(...$arguments) {
if (count($arguments) == 0) {

}
}

function runSubs(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$on = $arguments[0];
$scope = $arguments[1];
$last = $on;
for ($i = 0; $i < count($this->subs); $i++) {
$sub = _c_lib__arrUtils::readIndex($this->subs, $i);
$last = $sub->run($last, $scope);}
return $last;
}
}

function runSubsTo(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'integer' or gettype($arguments[2]) == 'NULL')) {
$on = $arguments[0];
$scope = $arguments[1];
$to = $arguments[2];
$last = $on;
for ($i = 0; $i < count($this->subs); $i++) {
$sub = _c_lib__arrUtils::readIndex($this->subs, $i);
$last = $sub->run($last, $scope);
if ($to == $i) {
break;}}
return $last;
}
}


}class Carbide_Virtual_Expressions_Reference {
public $name;

public $data;

public $subs;

public $parent;

function __construct(...$arguments) {
$this->name = "";
$this->data = null;
$this->subs = [];
$this->parent = null;

if (count($arguments) == 1 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL')) {
$name = $arguments[0];
$this->name = $name;
}

}
function build(...$arguments) {
if (count($arguments) == 0) {
$this->buildSubs();
$this->name = _c_lib__mapUtils::readIndex($this->data, "value");
}
}

function runTo(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$scope = $arguments[0];
$to = $arguments[1];
$ref = $scope->search($this->name);
if ($ref != null) {
if ($to == 0) {
return $ref->value->getValue();}
return $this->runSubsTo($ref->value->getValue(), $scope, $to);}else{
$location = "anon";
if ($this->parent->parent->topBlock != null) {
$location = $this->parent->parent->topBlock->label;}
$this->parent->topParent->parent->runtimeError("Undefined reference '" . $this->name . "'", $location, 0, 0);}
}
else if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[0]) == 'NULL') and (gettype($arguments[1]) == 'integer' or gettype($arguments[1]) == 'NULL')) {
$scope = $arguments[0];
$to = $arguments[1];

}
}

function run(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[0]) == 'NULL')) {
$scope = $arguments[0];
$ref = $scope->search($this->name);
if ($ref != null) {
return $this->runSubs($ref->value->getValue(), $scope);}else{
$location = "anon";
if ($this->parent->parent->topBlock != null) {
$location = $this->parent->parent->topBlock->label;}
$this->parent->topParent->parent->runtimeError("Undefined reference '" . $this->name . "'", $location, 0, 0);}
}
}

function setParent(...$arguments) {
if (count($arguments) == 0) {

}
}

function buildSubs(...$arguments) {
if (count($arguments) == 0) {

}
}

function runSubs(...$arguments) {
if (count($arguments) == 2 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$on = $arguments[0];
$scope = $arguments[1];
$last = $on;
for ($i = 0; $i < count($this->subs); $i++) {
$sub = _c_lib__arrUtils::readIndex($this->subs, $i);
$last = $sub->run($last, $scope);}
return $last;
}
}

function runSubsTo(...$arguments) {
if (count($arguments) == 3 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[0]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[0]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL') and (gettype($arguments[2]) == 'integer' or gettype($arguments[2]) == 'NULL')) {
$on = $arguments[0];
$scope = $arguments[1];
$to = $arguments[2];
$last = $on;
for ($i = 0; $i < count($this->subs); $i++) {
$sub = _c_lib__arrUtils::readIndex($this->subs, $i);
$last = $sub->run($last, $scope);
if ($to == $i) {
break;}}
return $last;
}
}


}class carbide_proxy_Carbonite_Statement {
public $value;

public $type;

public $raw;

function __construct(...$arguments) {
$this->value = null;
$this->type = "null";
$this->raw = null;

if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
}

}
static function create(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statement' or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_If') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_Return') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_Define') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_For') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_ForIn') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_While') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_Continue') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_Break') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_Native') or (get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Statements_Expression')) or gettype($arguments[0]) == 'NULL')) {
$reference = $arguments[0];
$m = ['_c__mapC' => true];
$value = new carbide_proxy_Carbonite_Statement($m);
$value->value = $reference;
return $value;
}
}

function method(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$name = $arguments[0];
$args = $arguments[1];
$c_scope = $arguments[2];

}
}

function property(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$c_scope = $arguments[1];
if ($name == "type") {
$insta = $this->value;
$carbide_rtn = $insta::$type;
return Carbide_Virtual_Value::primitiveToValue($carbide_rtn);}
}
}

function dotSet(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$name = $arguments[0];
$setTo = $arguments[1];
$c_scope = $arguments[2];

}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[1]) == 'NULL')) {
$data = $arguments[0];
$proc = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "string") {
$rtn = new Carbide_Virtual_Values_String($data);}else if ($type == "map") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Map($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}else if ($type == "number") {
$rtn = new Carbide_Virtual_Values_Number($data);}else if ($type == "bool") {
$rtn = new Carbide_Virtual_Values_Bool($data);}else if ($type == "array") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Array($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}
$rtn->setValue($data);
return $rtn;
}
}

function getValue(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

function duplicate(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

function setValue(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];

}
}

function compare(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];

}
}

static function primitiveToValue(...$arguments) {
if (count($arguments) == 1 and (((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'boolean' or gettype($arguments[0]) == 'double' or gettype($arguments[0]) == 'integer' or (gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'string') or gettype($arguments[0]) == 'NULL')) {
$prim = $arguments[0];
if ($prim == null) {
return Carbide_Virtual_Values_Null::create();}
$type = (gettype($prim) == 'double' ? 'float' : (gettype($prim) == 'array' ? (isset($prim['_c__mapC']) ? 'map' : 'array') : gettype($prim)));
if ($type == "array") {
return Carbide_Virtual_Values_ProxyArray::create($prim);}else if ($type == "map") {
return Carbide_Virtual_Values_ProxyMap::create($prim);}else if ($type == "string") {
return Carbide_Virtual_Values_String::create($prim);}else if ($type == "boolean") {
return Carbide_Virtual_Values_Bool::create($prim);}else if ($type == "integer" or $type == "float") {
return Carbide_Virtual_Values_Number::create($prim);}
}
}

function call(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];

}
else if (count($arguments) == 3 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[2]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];
$context = $arguments[2];

}
}

function operate(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$operator = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];

}
}

function iterate(...$arguments) {
if (count($arguments) == 4 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[2]) == 'NULL') and ((get_class($arguments[3]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[3]) == 'NULL')) {
$variableKey = $arguments[0];
$variable = $arguments[1];
$code = $arguments[2];
$scope = $arguments[3];

}
}


}class carbide_proxy_Carbonite_Body {
public $value;

public $type;

public $raw;

function __construct(...$arguments) {
$this->value = null;
$this->type = "null";
$this->raw = null;

if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];
$this->raw = $raw;
}

}
static function create(...$arguments) {
if (count($arguments) == 1 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbonite_Body') or gettype($arguments[0]) == 'NULL')) {
$reference = $arguments[0];
$m = ['_c__mapC' => true];
$value = new carbide_proxy_Carbonite_Body($m);
$value->value = $reference;
return $value;
}
}

function method(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$name = $arguments[0];
$args = $arguments[1];
$c_scope = $arguments[2];

}
}

function property(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$c_scope = $arguments[1];
if ($name == "statements") {
$insta = $this->value;
$carbide_rtn = &$insta->statements;
return new carbide_valueArray_Carbonite_Statement($carbide_rtn);}
}
}

function dotSet(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$name = $arguments[0];
$setTo = $arguments[1];
$c_scope = $arguments[2];
if ($name == "statements") {
$c_setCast = $setTo->value;
$this->value->statements = $c_setCast;}
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[1]) == 'NULL')) {
$data = $arguments[0];
$proc = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "string") {
$rtn = new Carbide_Virtual_Values_String($data);}else if ($type == "map") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Map($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}else if ($type == "number") {
$rtn = new Carbide_Virtual_Values_Number($data);}else if ($type == "bool") {
$rtn = new Carbide_Virtual_Values_Bool($data);}else if ($type == "array") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Array($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}
$rtn->setValue($data);
return $rtn;
}
}

function getValue(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

function duplicate(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

function setValue(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];

}
}

function compare(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];

}
}

static function primitiveToValue(...$arguments) {
if (count($arguments) == 1 and (((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'boolean' or gettype($arguments[0]) == 'double' or gettype($arguments[0]) == 'integer' or (gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'string') or gettype($arguments[0]) == 'NULL')) {
$prim = $arguments[0];
if ($prim == null) {
return Carbide_Virtual_Values_Null::create();}
$type = (gettype($prim) == 'double' ? 'float' : (gettype($prim) == 'array' ? (isset($prim['_c__mapC']) ? 'map' : 'array') : gettype($prim)));
if ($type == "array") {
return Carbide_Virtual_Values_ProxyArray::create($prim);}else if ($type == "map") {
return Carbide_Virtual_Values_ProxyMap::create($prim);}else if ($type == "string") {
return Carbide_Virtual_Values_String::create($prim);}else if ($type == "boolean") {
return Carbide_Virtual_Values_Bool::create($prim);}else if ($type == "integer" or $type == "float") {
return Carbide_Virtual_Values_Number::create($prim);}
}
}

function call(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];

}
else if (count($arguments) == 3 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[2]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];
$context = $arguments[2];

}
}

function operate(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$operator = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];

}
}

function iterate(...$arguments) {
if (count($arguments) == 4 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[2]) == 'NULL') and ((get_class($arguments[3]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[3]) == 'NULL')) {
$variableKey = $arguments[0];
$variable = $arguments[1];
$code = $arguments[2];
$scope = $arguments[3];

}
}


}class carbide_valueArray_Carbonite_Statement {
public $value;

public $type;

public $raw;

function __construct(...$arguments) {
$this->value = null;
$this->type = "array";
$this->raw = null;

if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$val = $arguments[0];
$this->value = $val;
}

}
function castCarbideValue(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL')) {
$i = $arguments[0];
return carbide_proxy_Carbonite_Statement::create(_c_lib__arrUtils::readIndex($this->value, $i));
}
}

function iterate(...$arguments) {
if (count($arguments) == 4 and ((get_class($arguments[0]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Variable') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Block') or gettype($arguments[2]) == 'NULL') and ((get_class($arguments[3]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[3]) == 'NULL')) {
$vKey = $arguments[0];
$v = $arguments[1];
$code = $arguments[2];
$scope = $arguments[3];
for ($i = 0; $i < count($this->value); $i++) {
$vKey->value->value = $i;
$v->value = $this->castCarbideValue($i);
$code->run($scope);}
}
}

function property(...$arguments) {
if (count($arguments) == 2 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$name = $arguments[0];
$scope = $arguments[1];
if ($name == "length") {
$cast = count($this->value);
$rtn = Carbide_Virtual_Values_Number::create($cast);
return $rtn;}
return Carbide_Virtual_Values_Null::create();
}
}

function method(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((gettype($arguments[1]) == 'array' and !isset($arguments[1]['_c__mapC'])) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$name = $arguments[0];
$input = $arguments[1];
$scope = $arguments[2];
if ($name == "length") {
$len = count($this->value);
return Carbide_Virtual_Values_Number::create($len);}else if ($name == "index") {
$ind = _c_lib__arrUtils::readIndex($input, 0);
$found = $this->castCarbideValue($ind->value);
return $found;}else if ($name == "push") {
$ind = _c_lib__arrUtils::readIndex($input, 0);
$cast = &$this->value;
array_push($cast, $ind->value);}else if ($name == "pop") {
array_pop($this->value);}
return Carbide_Virtual_Values_Null::create();
}
}

function dotSet(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$prop = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];
$v = null;
$this->value[$prop] = $value->value;
$v = Carbide_Virtual_Values_Null::create();
return $v;
}
}

static function make(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Processor') or gettype($arguments[1]) == 'NULL')) {
$data = $arguments[0];
$proc = $arguments[1];
$rtn = null;
$type = _c_lib__mapUtils::readIndex($data, "type");
if ($type == "string") {
$rtn = new Carbide_Virtual_Values_String($data);}else if ($type == "map") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Map($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}else if ($type == "number") {
$rtn = new Carbide_Virtual_Values_Number($data);}else if ($type == "bool") {
$rtn = new Carbide_Virtual_Values_Bool($data);}else if ($type == "array") {
$v = new Carbide_Virtual_Data($proc->heapIndex, new Carbide_Virtual_Values_Array($data));
$v->value->setValue($data);
$proc->heapIndex++;
array_push($proc->heap, $v);
$ref = new Carbide_Virtual_Values_Reference(['_c__mapC' => true]);
$ref->processor = $proc;
$ref->id = $v->id;
$rtn = $ref;}
$rtn->setValue($data);
return $rtn;
}
}

static function create(...$arguments) {
if (count($arguments) == 1 and (gettype($arguments[0]) == 'integer' or gettype($arguments[0]) == 'NULL')) {
$value = $arguments[0];

}
}

function getValue(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

function duplicate(...$arguments) {
if (count($arguments) == 0) {
return $this;
}
}

function setValue(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];

}
}

function compare(...$arguments) {
if (count($arguments) == 1 and ((gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL')) {
$raw = $arguments[0];

}
}

static function primitiveToValue(...$arguments) {
if (count($arguments) == 1 and (((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'boolean' or gettype($arguments[0]) == 'double' or gettype($arguments[0]) == 'integer' or (gettype($arguments[0]) == 'array' and isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'string') or gettype($arguments[0]) == 'NULL')) {
$prim = $arguments[0];
if ($prim == null) {
return Carbide_Virtual_Values_Null::create();}
$type = (gettype($prim) == 'double' ? 'float' : (gettype($prim) == 'array' ? (isset($prim['_c__mapC']) ? 'map' : 'array') : gettype($prim)));
if ($type == "array") {
return Carbide_Virtual_Values_ProxyArray::create($prim);}else if ($type == "map") {
return Carbide_Virtual_Values_ProxyMap::create($prim);}else if ($type == "string") {
return Carbide_Virtual_Values_String::create($prim);}else if ($type == "boolean") {
return Carbide_Virtual_Values_Bool::create($prim);}else if ($type == "integer" or $type == "float") {
return Carbide_Virtual_Values_Number::create($prim);}
}
}

function call(...$arguments) {
if (count($arguments) == 2 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];

}
else if (count($arguments) == 3 and ((gettype($arguments[0]) == 'array' and !isset($arguments[0]['_c__mapC'])) or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[2]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[2]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[2]) == 'NULL')) {
$args = $arguments[0];
$scope = $arguments[1];
$context = $arguments[2];

}
}

function operate(...$arguments) {
if (count($arguments) == 3 and (gettype($arguments[0]) == 'string' or gettype($arguments[0]) == 'NULL') and ((get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Value' or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArguments') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualArgument') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualClass') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMembers') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualMember') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualTypes') or (get_class($arguments[1]) == 'WebsomCarbonite\VirtualType') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_String') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Number') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Array') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Map') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Function') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Bool') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyMap') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_ProxyArray') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_AutoArray' or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_valueArray_Carbonite_Statement')) or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Null') or (get_class($arguments[1]) == 'WebsomCarbonite\Carbide_Virtual_Values_Reference') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Statement') or (get_class($arguments[1]) == 'WebsomCarbonite\carbide_proxy_Carbonite_Body')) or gettype($arguments[1]) == 'NULL') and ((get_class($arguments[2]) == 'WebsomCarbonite\Carbide_Virtual_Scope') or gettype($arguments[2]) == 'NULL')) {
$operator = $arguments[0];
$value = $arguments[1];
$scope = $arguments[2];

}
}


}
}
?>